/*
Copyright (C) 2016 British Broadcasting Corporation, Parabola Research
and Queen Mary University of London.

This file is part of the Turing codec.

The Turing codec is free software; you can redistribute it and/or modify
it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

The Turing codec is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Commercial support and intellectual property rights for
the Turing codec are also available under a proprietary license.
For more information, contact us at info @ turingcodec.org.
 */

#include "pred_intra.h"
#include "havoc_test.h"
#include "Jit.h"
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <array>
#include <map>
#include <vector>

using namespace Xbyak;

static int Clip3(int min, int max, int value)
{
    if (value < min) 
        return min;
    if (value > max) 
        return max;
    return value;
}


template <typename Sample>
struct Neighbours
{
    Sample const *neighbours;
    Sample operator()(int x, int y) const
    {
        return this->neighbours[x - y - 1];
    }
};


template <typename Sample>
struct ReferenceSampleArray
{
    Sample& operator[](size_t i) { return this->buffer[32+i]; }
    std::array<Sample, 97> buffer;
};


// review: unnecessary
template <class T>
class Initializer
{
    public:
        Initializer(T t) : value(t) { };
        operator T() const
        {
            return this->value;
        }
    protected:
        const T value;
};

struct IntraPredAngle : Initializer<int>
{
    IntraPredAngle(int intraPredMode) : Initializer<int>(lookup(intraPredMode)) { }
    static int lookup(int intraPredMode)
    {
        assert(intraPredMode >= 2);
        assert(intraPredMode <= 34);
        static const int table[35] = { 0, 0, 32, 26, 21, 17, 13, 9, 5, 2, 0, -2, -5, -9, -13, -17, -21, -26, -32, -26, -21, -17, -13, -9, -5, -2, 0, 2, 5, 9, 13, 17, 21, 26, 32};
        return table[intraPredMode];
    }
};

struct InvAngle : Initializer<int>
{
    InvAngle(int intraPredMode) : Initializer<int>(lookup(intraPredMode)) { }
    static int lookup(int intraPredMode)
    {
        assert(intraPredMode >= 11);
        assert(intraPredMode <= 25);
        static const int table[26] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4096, -1638, -910, -630, -482, -390, -315, -256, -315, -390, -482, -630, -910, -1638, -4096};
        return table[intraPredMode];
    }
};


char havoc_intrapred_shuffle(int row, int val)
{
    static const char kernel[20][16] =
    {
         {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, // mode 0
         {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, // mode 0
         {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, // mode 1
         {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, // mode 1
         {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, // mode 2
         {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, // mode 2
         { 6, 26,  6, 26,  6, 26,  6, 26, 12, 20, 12, 20, 12, 20, 12, 20}, // mode 3
         {18, 14, 18, 14, 18, 14, 18, 14, 24,  8, 24,  8, 24,  8, 24,  8}, // mode 3
         {11, 21, 11, 21, 11, 21, 11, 21, 22, 10, 22, 10, 22, 10, 22, 10}, // mode 4
         { 1, 31,  1, 31,  1, 31,  1, 31, 12, 20, 12, 20, 12, 20, 12, 20}, // mode 4
         {15, 17, 15, 17, 15, 17, 15, 17, 30,  2, 30,  2, 30,  2, 30,  2}, // mode 5
         {13, 19, 13, 19, 13, 19, 13, 19, 28,  4, 28,  4, 28,  4, 28,  4}, // mode 5
         {19, 13, 19, 13, 19, 13, 19, 13,  6, 26,  6, 26,  6, 26,  6, 26}, // mode 6
         {25,  7, 25,  7, 25,  7, 25,  7, 12, 20, 12, 20, 12, 20, 12, 20}, // mode 6
         {17,  9, 17,  9, 17,  9, 17,  9, 14, 18, 14, 18, 14, 18, 14, 18}, // mode 7
         { 5, 27,  5, 27,  5, 27,  5, 27, 28,  4, 28,  4, 28,  4, 28,  4}, // mode 7
         {27,  5, 27,  5, 27,  5, 27,  5, 22, 10, 22, 10, 22, 10, 22, 10}, // mode 8
         {17, 15, 17, 15, 17, 15, 17, 15, 12, 20, 12, 20, 12, 20, 12, 20}, // mode 8
         {30,  2, 30,  2, 30,  2, 30,  2, 28,  4, 28,  4, 28,  4, 28,  4}, // mode 9
         {26,  6, 26,  6, 26,  6, 26,  6, 24,  8, 24,  8, 24,  8, 24,  8}, // mode 9
    };
    
    return kernel[row][val];
}

template <typename Sample>
static Sample p(const Sample *neighbours, const Sample corner, int dx, int dy)
{
    if (dx < 0 && dy < 0)
    {
    }
    else if (dy < 0)
    {
        assert(dy == -1);
        return neighbours[64 + dx];
    }
    else if (dx < 0)
    {
        assert(dx == -1);
        return neighbours[63 - dy];
    }

    assert(dx == -1);
    assert(dy == -1);
    return corner;
}


template <typename Sample>
struct IntraPredDc4x4_SSE_8bits :
    Jit::Function
    {
        IntraPredDc4x4_SSE_8bits(Jit::Buffer *buffer, int mode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label constant_0x00020002000200020002000200020002;
        Label constant_0x00040004000400040004000400040004;
        Label constant_0x0000000000000000;

        void data()
        {
            align();
            
            L(constant_0x00000000000000000000000000000000);
            dw({ 0 }, 8);

            L(constant_0x00020002000200020002000200020002);
            dw({ 2 }, 8);

            L(constant_0x00040004000400040004000400040004);
            dw({ 4 }, 8);

            L(constant_0x0000000000000000);
            dd({ 0 }, 2);
        }

        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0    = arg64(0);                        // Sample *dst
            auto &r3    = arg64(1);                        // dst_stride
            //Reg32 dst_stride = Reg32(arg64(1).getIdx()); // dst_stride
            auto &r1    = arg64(2);                        // const Sample *neighbours

            //Loading all the samples
            movd(xmm0, ptr[r1 - 0x5]); //load vertical   data [0 + 60] = pos 60, 61, 62, 63. (unaligned)
            movd(xmm1, ptr[r1]); //load horizontal data [0 + 64] = pos 64, 65, 66, 67. (aligned)

            //db({ 0xcc });

            //xmm2 = _mm_set_epi32(0, 0, xmm1, xmm0)
            //xmm2 = _mm_set_epi32(0, 0, xmm1, xmm0)
            pinsrq(xmm2, ptr[rip + constant_0x0000000000000000], 1);
            movd(r8d, xmm1);                                         //load horizontal data in a 32 bit register
            pinsrd(xmm2, r8d,                                    1);
            movd(r8d, xmm0);                                         //load vertical   data in a 32 bit register
            pinsrd(xmm2, r8d,                                    0);


            //xmm2 = _mm_sad_epu8(xmm2, 0);
            psadbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
            //xmm2 = _mm_add_epi16(xmm2, 4);
            paddw(xmm2,  ptr[rip + constant_0x00040004000400040004000400040004]);
            //xmm2 = _mm_srli_epi16(xmm2, 3);
            psrlw(xmm2, 3);
            //xmm2 = m_shuffle_epi8(xmm2, 0);
            pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);


            //db({0xcc});


            //tmp (r9d) = 2 * dc (r8d) + 2;
            punpcklbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
            movdqa(xmm3, xmm2);
            pmullw(xmm3, ptr[rip + constant_0x00020002000200020002000200020002]);
            paddw(xmm3, ptr[rip + constant_0x00020002000200020002000200020002]);

            /// FILTER
            pextrw(r8d,  xmm3, 0); // Load the first tmp value.
            pextrb(r9d,  xmm0, 3); // Load the first left value.
            pextrb(r11d, xmm1, 0); // Load the first top  value.

            /// Prepare the l, u, dc and tmp to be added unpacking them into 16bits
            punpcklbw(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]);
            punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]);

            //tmp = (tmp + dc)
            paddw(xmm3, xmm2);

            // Do left column
            //((l[1->3] + tmp + dc) >> 2)
            paddw(xmm0, xmm3);
            psrlw(xmm0, 2);

            // Do top row
            //((u[1->3] + tmp + dc) >> 2)
            paddw(xmm1, xmm3);
            psrlw(xmm1, 2);

            // Do top left. (we use r10d because r10d is used to store "packed" FUNCTION PARAMETER)
            //((u[0](r11d) + l[0](r9d) + tmp (r8d)) >> 2)
            add(r11d, r9d); // top (r11d) = top (r11d) + left (r9d)
            add(r11d, r8d); // top (r11d) = top (r11d) + tmp  (r8d)
            shr(r11d, 2);   // top (r11d) = top (r11d) >> 2.


            // --- Save the 1st row ----
            // --- pack back the first row ---
            packuswb(xmm1, xmm1);
            // insert top left filtered sample to the top of the top row sample array
            pinsrb(xmm1, r11d,  0);
            pextrd(ptr[r0], xmm1, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            //db({0xcc});

            // --- Save the 2nd row ----
            // --- pack back the first column ---
            packuswb(xmm0, xmm0);
            packuswb(xmm2, xmm2);

            // Insert the filtered sample in position of the DC sample 
#define INSERT_LINE(last)                               \
            pinsrb(xmm2, r8d, 0);                       \
            pextrd(ptr[r0], xmm2, 0);                   \
            if (!last)                                  \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            // Extract the byte from the left filtered sample (sample 2)
            pextrb(r8d, xmm0, 2);
            INSERT_LINE(0);
            // --- Save the 3rd row ----
            // Extract the byte from the left filtered sample (sample 1)
            pextrb(r8d, xmm0, 1);
            INSERT_LINE(0);
            // --- Save the 4th row ----
            // Extract the byte from the left filtered sample (sample 0)
            pextrb(r8d, xmm0, 0);
            INSERT_LINE(1);
#undef INSERT_LINE
        }
    };

    template <typename Sample>
    struct IntraPredDc4x4_SSE_8bits_nof :
        Jit::Function
        {
            IntraPredDc4x4_SSE_8bits_nof(Jit::Buffer *buffer, int mode) :
            Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value)
            {
                this->build();
            }

            Label constant_0x00000000000000000000000000000000;
            Label constant_0x00040004000400040004000400040004;
            Label constant_0x0000000000000000;

            void data()
            {
                align();
    
           L(constant_0x00000000000000000000000000000000);
                dw({ 0 }, 8);

                L(constant_0x00040004000400040004000400040004);
                dw({ 4 }, 8);

                L(constant_0x0000000000000000);
                dd({ 0 }, 2);
            }

            void assemble()
            {
                //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
                auto &r0    = arg64(0);                        // Sample *dst
                auto &r3    = arg64(1);                        // dst_stride
                //Reg32 dst_stride = Reg32(arg64(1).getIdx()); // dst_stride
                auto &r1    = arg64(2);                        // const Sample *neighbours
                auto &r2    = arg64(3);                        // Sample neigh_corner

                //Loading all the samples
                movd(xmm0, ptr[r1 - 0x5]); //load vertical   data (unaligned)
                movd(xmm1, ptr[r1]); //load horizontal data (aligned)

                //db({ 0xcc });

                //xmm2 = _mm_set_epi32(0, 0, xmm1, xmm0)
                //xmm2 = _mm_set_epi32(0, 0, xmm1, xmm0)
                pinsrq(xmm2, ptr[rip + constant_0x0000000000000000], 1);
                movd(r8d, xmm1);                                         //load horizontal data in a 32 bit register
                pinsrd(xmm2, r8d,                                    1);
                movd(r8d, xmm0);                                         //load vertical   data in a 32 bit register
                pinsrd(xmm2, r8d,                                    0);

                //xmm2 = _mm_sad_epu8(xmm2, 0);
                psadbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
                //xmm2 = _mm_add_epi16(xmm2, 4);
                paddw(xmm2,  ptr[rip + constant_0x00040004000400040004000400040004]);
                //xmm2 = _mm_srli_epi16(xmm2, 3);
                psrlw(xmm2, 3);
                //xmm2 = m_shuffle_epi8(xmm2, 0);
                pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);

                //db({0xcc});
    #define INSERT_LINE(last)                               \
                pextrd(ptr[r0], xmm2, 0);                   \
                if (!last)                                  \
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(1);
    #undef INSERT_LINE
            }
        };

    template <typename Sample>
    struct IntraPredDc8x8_SSE_8bits :
        Jit::Function
        {
            IntraPredDc8x8_SSE_8bits(Jit::Buffer *buffer, int mode) :
            Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value)
            {
                this->build();
            }

            Label constant_0x00000000000000000000000000000000;
            Label constant_0x00020002000200020002000200020002;
            Label constant_0x00080008000800080008000800080008;
            Label constant_0x0000000000000000;

            void data()
            {
                align();
                
                L(constant_0x00000000000000000000000000000000);
                dw({ 0 }, 8);

                L(constant_0x00020002000200020002000200020002);
                dw({ 2 }, 8);

                L(constant_0x00080008000800080008000800080008);
                dw({ 8 }, 8);

                L(constant_0x0000000000000000);
                dd({ 0 }, 2);
            }

            void assemble()
            {
                //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
                auto &r0    = arg64(0);                        // Sample *dst
                auto &r3    = arg64(1);                        // dst_stride
                //Reg32 dst_stride = Reg32(arg64(1).getIdx()); // dst_stride
                auto &r1    = arg64(2);                        // const Sample *neighbours
                auto &r2    = arg64(3);                        // Sample neigh_corner

                //Loading all the samples
                movq(xmm0, ptr[r1 - 0x9]); //load vertical   data [0 + 56] = pos 56, 57, 58, 59, 60, 61, 62, 63. (unaligned)
                movq(xmm1, ptr[r1]); //load horizontal data [0 + 64] = pos 64, 65, 66, 67, 68, 69, 70, 71. (aligned)

                //db({ 0xcc });

                //xmm2 = _mm_set_epi64(0, xmm1)
                pinsrq(xmm2, ptr[rip + constant_0x0000000000000000], 1);
                movq(rax, xmm0);                                         //load horizontal data in a 64 bit register
                pinsrd(xmm2, rax,                                    0);

                //xmm3 = _mm_set_epi64(0, xmm1)
                pinsrq(xmm3, ptr[rip + constant_0x0000000000000000], 1);
                movq(rax, xmm1);                                         //load horizontal data in a 64 bit register
                pinsrd(xmm3, rax,                                    0);

                //xmm2 = _mm_sad_epu8(xmm2, 0);
                psadbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
                //xmm3 = _mm_sad_epu8(xmm3, 0);
                psadbw(xmm3, ptr[rip + constant_0x00000000000000000000000000000000]);

                //xmm2 = _mm_add_epi16(xmm2, xmm3);
                paddw(xmm2,  xmm3);

                //xmm2 = _mm_add_epi16(xmm2, 8);
                paddw(xmm2,  ptr[rip + constant_0x00080008000800080008000800080008]);
                //xmm2 = _mm_srli_epi16(xmm2, 4);
                psrlw(xmm2, 4);
                //xmm2 = m_shuffle_epi8(xmm2, 0);
                pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);

                //db({0xcc});

                //tmp (r9d) = 2 * dc (r8d) + 2;
                punpcklbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
                movdqa(xmm3, xmm2);
                pmullw(xmm3, ptr[rip + constant_0x00020002000200020002000200020002]);
                paddw(xmm3, ptr[rip + constant_0x00020002000200020002000200020002]);
                
                /// FILTER
                pextrw(r8d,  xmm3, 0); // Load the first tmp value.
                pextrb(r9d,  xmm0, 7); // Load the first left value.
                pextrb(r11d, xmm1, 0); // Load the first top  value.

                /// Prepare the l, u, dc and tmp to be added unpacking them into 16bits
                punpcklbw(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]);
                punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]);

                //tmp = (tmp + dc)
                paddw(xmm3, xmm2);

                // Do left column
                //((l[1->3] + tmp + dc) >> 2)
                paddw(xmm0, xmm3);
                psrlw(xmm0, 2);

                // Do top row
                //((u[1->3] + tmp + dc) >> 2)
                paddw(xmm1, xmm3);
                psrlw(xmm1, 2);

                // Do top left. (we use r10d becuse r10d is used to store "packed" FUNCTION PARAMETER)
                //((u[0](ecx) + l[0](edx) + tmp (r9d)) >> 2)
                add(r11d, r9d); // top (r11d) = top (r11d) + left (r9d)
                add(r11d, r8d); // top (r11d) = top (r11d) + tmp  (r9d)
                shr(r11d, 2);   // top (r11d) = top (r11d) >> 2.

                // --- Save the 1st row ----
                // --- pack back the first row ---
                packuswb(xmm1, xmm1);
                // insert top left filtered sample to the top of the top row sample array
                pinsrb(xmm1, r11d,  0);
                pextrq(ptr[r0], xmm1, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                //db({0xcc});

                // --- pack back the first column ---
                packuswb(xmm0, xmm0);
                packuswb(xmm2, xmm2);

#define INSERT_LINE(last)                                   \
                pinsrb(xmm2, r8d, 0);                       \
                pextrq(ptr[r0], xmm2, 0);                   \
                if (!last)                                  \
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                // --- Save the 2nd row ----
                // Extract the byte from the left filtered sample (sample 6)
                pextrb(r8d, xmm0, 6);
                INSERT_LINE(0);
                // --- Save the 3rd row ----
                // Extract the byte from the left filtered sample (sample 5)
                pextrb(r8d, xmm0, 5);
                INSERT_LINE(0);
                // --- Save the 4th row ----
                // Extract the byte from the left filtered sample (sample 4)
                pextrb(r8d, xmm0, 4);
                INSERT_LINE(0);
                // --- Save the 5th row ----
                // Extract the byte from the left filtered sample (sample 3)
                pextrb(r8d, xmm0, 3);
                INSERT_LINE(0);
                // --- Save the 6th row ----
                // Extract the byte from the left filtered sample (sample 2)
                pextrb(r8d, xmm0, 2);
                INSERT_LINE(0);
                // --- Save the 7th row ----
                // Extract the byte from the left filtered sample (sample 1)
                pextrb(r8d, xmm0, 1);
                INSERT_LINE(0);
                // --- Save the 8th row ----
                // Extract the byte from the left filtered sample (sample 0)
                pextrb(r8d, xmm0, 0);
                INSERT_LINE(1);
#undef INSERT_LINE
            }
    };

    template <typename Sample>
    struct IntraPredDc8x8_SSE_8bits_nof :
        Jit::Function
        {
            IntraPredDc8x8_SSE_8bits_nof(Jit::Buffer *buffer, int mode) :
            Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value)
            {
                this->build();
            }

            Label constant_0x00000000000000000000000000000000;
            Label constant_0x00080008000800080008000800080008;
            Label constant_0x0000000000000000;

            void data()
            {
                align();
                
                L(constant_0x00000000000000000000000000000000);
                dw({ 0 }, 8);

                L(constant_0x00080008000800080008000800080008);
                dw({ 8 }, 8);

                L(constant_0x0000000000000000);
                dd({ 0 }, 2);
            }

            void assemble()
            {
                //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
                auto &r0    = arg64(0);                        // Sample *dst
                auto &r3    = arg64(1);                        // dst_stride
                //Reg32 dst_stride = Reg32(arg64(1).getIdx()); // dst_stride
                auto &r1    = arg64(2);                        // const Sample *neighbours
                auto &r2    = arg64(3);                        // Sample neigh_corner

                //Loading all the samples
                movq(xmm0, ptr[r1 - 0x9]); //load vertical   data [0 + 56] = pos 56, 57, 58, 59, 60, 61, 62, 63. (unaligned)
                movq(xmm1, ptr[r1]); //load horizontal data [0 + 64] = pos 64, 65, 66, 67, 68, 69, 70, 71. (aligned)

                //db({ 0xcc });

                //xmm2 = _mm_set_epi64(0, xmm1)
                pinsrq(xmm2, ptr[rip + constant_0x0000000000000000], 1);
                movq(rax, xmm0);                                         //load horizontal data in a 64 bit register
                pinsrd(xmm2, rax,                                    0);

                //xmm3 = _mm_set_epi64(0, xmm1)
                pinsrq(xmm3, ptr[rip + constant_0x0000000000000000], 1);
                movq(rax, xmm1);                                         //load horizontal data in a 64 bit register
                pinsrd(xmm3, rax,                                    0);

                //xmm2 = _mm_sad_epu8(xmm2, 0);
                psadbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
                //xmm3 = _mm_sad_epu8(xmm3, 0);
                psadbw(xmm3, ptr[rip + constant_0x00000000000000000000000000000000]);

                //xmm2 = _mm_add_epi16(xmm2, xmm3);
                paddw(xmm2,  xmm3);

                //xmm2 = _mm_add_epi16(xmm2, 8);
                paddw(xmm2,  ptr[rip + constant_0x00080008000800080008000800080008]);
                //xmm2 = _mm_srli_epi16(xmm2, 4);
                psrlw(xmm2, 4);
                //xmm2 = m_shuffle_epi8(xmm2, 0);
                pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);

                //db({0xcc});
#define INSERT_LINE(last)                                   \
                pextrq(ptr[r0], xmm2, 0);                   \
                if (!last)                                  \
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0);
                INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(1);

#undef INSERT_LINE
            }
    };


    template <typename Sample>
    struct IntraPredDc16x16_SSE_8bits :
        Jit::Function
        {
            IntraPredDc16x16_SSE_8bits(Jit::Buffer *buffer, int mode) :
            Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value)
            {
                this->build();
            }

            Label constant_0x00000000000000000000000000000000;
            Label constant_0x00020002000200020002000200020002;
            Label constant_0x0000000000000000;
            Label constant_0x0010;

            void data()
            {
                align();

                L(constant_0x00000000000000000000000000000000);
                dw({ 0 }, 8);

                L(constant_0x00020002000200020002000200020002);
                dw({ 2 }, 8);

                L(constant_0x0000000000000000);
                dd({ 0 }, 2);

                L(constant_0x0010);
                dw({ 16 }, 1);
            }

            void assemble()
            {
                //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
                auto &r0    = arg64(0);                        // Sample *dst
                auto &r3    = arg64(1);                        // dst_stride
                //Reg32 dst_stride = Reg32(arg64(1).getIdx()); // dst_stride
                auto &r1    = arg64(2);                        // const Sample *neighbours
                auto &r2    = arg64(3);                        // Sample neigh_corner

                //Loading all the samples
                movdqu(xmm0, ptr[r1 - 0x11]); //load vertical   data [0 + 48] = pos 48...63. (aligned)
                movdqa(xmm1, ptr[r1]); //load horizontal data [0 + 64] = pos 64...78. (aligned)

                //db({ 0xcc });

                //xmm2 = _mm_sad_epu8(xmm2, 0);
                movdqa(xmm2, xmm0);
                psadbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
                //xmm3 = _mm_sad_epu8(xmm3, 0);
                movdqa(xmm3, xmm1);
                psadbw(xmm3, ptr[rip + constant_0x00000000000000000000000000000000]);

                //xmm2 = _mm_add_epi16(xmm2, xmm3);
                paddw(xmm2,  xmm3);

                // Adding the 2 16 bits together to get the final sum
                pextrw(r8d, xmm2, 0);
                pextrw(r9d, xmm2, 4);
                add(r8d, r9d);
                // r8d + 16;
                add(r8d,  ptr[rip + constant_0x0010]);
                // r8d >> 5
                shr(r8d, 5);

                // replicate the DC value to all the 16 pixels
                movdqa(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
                pinsrw(xmm2, r8d, 0);
                //xmm2 = _mm_shuffle_epi8(xmm2, 0);
                pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);

                //db({0xcc});

                //tmp (r9d) = 2 * dc (r8d) + 2;
                punpcklbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
                movdqa(xmm3, xmm2);
                pmullw(xmm3, ptr[rip + constant_0x00020002000200020002000200020002]);
                paddw(xmm3, ptr[rip + constant_0x00020002000200020002000200020002]);
                 
                /// FILTER
                pextrw(r8d,  xmm3,  0); // Load the first tmp value.
                pextrb(r9d,  xmm0, 15); // Load the first left value.
                pextrb(r11d, xmm1,  0); // Load the first top  value.

                /// Save a copy of top and left
                movdqa(xmm4, xmm0);
                movdqa(xmm5, xmm1);

                /// Save only the top 8 sample for left and top
                punpckhqdq(xmm0, xmm0);
                punpckhqdq(xmm1, xmm1);

                // left
                pmovzxbw(xmm4, xmm4); /* samples 0 to  7  */
                pmovzxbw(xmm0, xmm0); /* samples 8 to 15  */

                // top
                pmovzxbw(xmm5, xmm5); /* samples 0 to  7  */
                pmovzxbw(xmm1, xmm1); /* samples 8 to 15  */

                //tmp = (tmp + dc)
                paddw(xmm3, xmm2);

                // Do left column
                //((l[1->3] + tmp + dc) >> 2)
                paddw(xmm0, xmm3);
                psrlw(xmm0, 2);
                paddw(xmm4, xmm3);
                psrlw(xmm4, 2);

                // Do top row
                //((u[1->3] + tmp + dc) >> 2)
                paddw(xmm1, xmm3);
                psrlw(xmm1, 2);
                paddw(xmm5, xmm3);
                psrlw(xmm5, 2);

                // Do top left. (we use r10d becuse r10d is used to store "packed" FUNCTION PARAMETER)
                //((u[0](ecx) + l[0](edx) + tmp (r9d)) >> 2)
                add(r11d, r9d); // top (r11d) = top (r11d) + left (r9d)
                add(r11d, r8d); // top (r11d) = top (r11d) + tmp  (r9d)
                shr(r11d, 2);   // top (r11d) = top (r11d) >> 2.

                // --- Save the 1st row ----
                // --- pack back the first row ---
                packuswb(xmm5, xmm1);
                // insert top left filtered sample to the top of the top row sample array
                pinsrb(xmm5, r11d, 0);
                movdqa(ptr[r0], xmm5);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                //db({0xcc});

                // --- pack back the first column ---
                packuswb(xmm4, xmm0);
                packuswb(xmm2, xmm2);

                //db({ 0xcc });

                // Insert the filtered sample in position of the DC sample 
#define INSERT_LINE(last)                                   \
                pinsrb(xmm2, r8d, 0);                       \
                movdqa(ptr[r0], xmm2);                      \
                if (!last)                                  \
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);


                // Extract the byte from the left filtered sample (sample i)
                pextrb(r8d, xmm4, 14);
                INSERT_LINE(0);
                pextrb(r8d, xmm4, 13);
                INSERT_LINE(0);
                pextrb(r8d, xmm4, 12);
                INSERT_LINE(0);
                pextrb(r8d, xmm4, 11);
                INSERT_LINE(0);
                pextrb(r8d, xmm4, 10);
                INSERT_LINE(0);
                pextrb(r8d, xmm4,  9);
                INSERT_LINE(0);
                pextrb(r8d, xmm4,  8);
                INSERT_LINE(0);
                pextrb(r8d, xmm4,  7);
                INSERT_LINE(0);
                pextrb(r8d, xmm4,  6);
                INSERT_LINE(0);
                pextrb(r8d, xmm4,  5);
                INSERT_LINE(0);
                pextrb(r8d, xmm4,  4);
                INSERT_LINE(0);
                pextrb(r8d, xmm4,  3);
                INSERT_LINE(0);
                pextrb(r8d, xmm4,  2);
                INSERT_LINE(0);
                pextrb(r8d, xmm4,  1);
                INSERT_LINE(0);
                pextrb(r8d, xmm4,  0);
                INSERT_LINE(1);
#undef INSERT_LINE
            }
    };

    template <typename Sample>
    struct IntraPredDc16x16_SSE_8bits_nof :
        Jit::Function
        {
            IntraPredDc16x16_SSE_8bits_nof(Jit::Buffer *buffer, int mode) :
            Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value)
            {
                this->build();
            }

            Label constant_0x00000000000000000000000000000000;
            Label constant_0x0000000000000000;
            Label constant_0x0010;

            void data()
            {
                align();

                L(constant_0x00000000000000000000000000000000);
                dw({ 0 }, 8);

                L(constant_0x0000000000000000);
                dd({ 0 }, 2);

                L(constant_0x0010);
                dw({ 16 }, 1);
            }

            void assemble()
            {
                //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
                auto &r0    = arg64(0);                        // Sample *dst
                auto &r3    = arg64(1);                        // dst_stride
                //Reg32 dst_stride = Reg32(arg64(1).getIdx()); // dst_stride
                auto &r1    = arg64(2);                        // const Sample *neighbours
                auto &r2    = arg64(3);                        // Sample neigh_corner

                //Loading all the samples
                movdqu(xmm0, ptr[r1 - 0x11]); //load vertical   data [0 + 48] = pos 48...63. (aligned)
                movdqa(xmm1, ptr[r1]); //load horizontal data [0 + 64] = pos 64...78. (aligned)

                //db({ 0xcc });

                //xmm2 = _mm_sad_epu8(xmm2, 0);
                movdqa(xmm2, xmm0);
                psadbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
                //xmm3 = _mm_sad_epu8(xmm3, 0);
                movdqa(xmm3, xmm1);
                psadbw(xmm3, ptr[rip + constant_0x00000000000000000000000000000000]);

                //xmm2 = _mm_add_epi16(xmm2, xmm3);
                paddw(xmm2,  xmm3);

                // Adding the 2 16 bits together to get the final sum
                pextrw(r8d, xmm2, 0);
                pextrw(r9d, xmm2, 4);
                add(r8d, r9d);
                // r8d + 16;
                add(r8d,  ptr[rip + constant_0x0010]);
                // r8d >> 5
                shr(r8d, 5);

                // replicate the DC value to all the 16 pixels
                movdqa(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
                pinsrw(xmm2, r8d, 0);
                //xmm2 = _mm_shuffle_epi8(xmm2, 0);
                pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);

                //db({0xcc});

#define INSERT_LINE(last)                                   \
                movdqa(ptr[r0], xmm2);                      \
                if (!last)                                  \
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0);
                INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(1);
#undef INSERT_LINE

            }
    };

    template <typename Sample>
    struct IntraPredDc32x32_SSE_8bits :
        Jit::Function
        {
            IntraPredDc32x32_SSE_8bits(Jit::Buffer *buffer, int mode) :
            Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value)
            {
                this->build();
            }

            Label constant_0x00000000000000000000000000000000;
            Label constant_0x0020;

            void data()
            {
                align();

                L(constant_0x00000000000000000000000000000000);
                dw({ 0 }, 8);

                L(constant_0x0020);
                dw({ 32 }, 1);
            }

            void assemble()
            {
                //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
                auto &r0    = arg64(0);                        // Sample *dst
                auto &r3    = arg64(1);                        // dst_stride
                //Reg32 dst_stride = Reg32(arg64(1).getIdx()); // dst_stride
                auto &r1    = arg64(2);                        // const Sample *neighbours
                auto &r2    = arg64(3);                        // Sample neigh_corner

                //Loading all the samples
                movdqu(xmm0, ptr[r1 - 0x21]); //load vertical   data (unaligned)
                movdqu(xmm1, ptr[r1 - 0x11]); //load vertical   data (unaligned)
                movdqa(xmm2, ptr[r1]); //load horizontal data (aligned)
                movdqa(xmm3, ptr[r1 + 0x10]); //load horizontal data (aligned)

                //db({ 0xcc });

                //xmm2 = _mm_sad_epu8(xmm2, 0);
                psadbw(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]);
                psadbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]);
                psadbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
                psadbw(xmm3, ptr[rip + constant_0x00000000000000000000000000000000]);

                //xmm2 = _mm_add_epi16(xmm2, xmm3);
                paddw(xmm0, xmm1);
                paddw(xmm0, xmm2);
                paddw(xmm0, xmm3);

                // Adding the 2 16 bits together to get the final sum
                pextrw(r8d, xmm0, 0);
                pextrw(r9d, xmm0, 4);
                add(r8d, r9d);
                // r8d + 16;
                add(r8d,  ptr[rip + constant_0x0020]);
                // r8d >> 6
                shr(r8d, 6);

                // replicate the DC value to all the 16 pixels
                movdqa(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
                pinsrw(xmm2, r8d, 0);
                //xmm2 = m_shuffle_epi8(xmm2, 0);
                pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);

                //db({0xcc});

                L("nofilter");
                {
                    // Insert the filtered sample in position of the DC sample
#define INSERT_LINE(last)                                             \
                    movdqa(ptr[r0], xmm2);                            \
                    movdqa(ptr[r0  + (0x10 * sizeof(Sample))], xmm2); \
                    if (!last)                                        \
                        lea(r0, ptr[r0 + (r3   * sizeof(Sample))]);

                    INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0);
                    INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0);
                    INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0);
                    INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(1);
#undef INSERT_LINE
                }
            }
    };

    template <typename Sample>
    struct IntraPredPlanar4x4_SSE_8bits :
        Jit::Function
        {
            IntraPredPlanar4x4_SSE_8bits(Jit::Buffer *buffer, int mode) :
            Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value)
            {
                this->build();
            }

            Label constant_0x00000000000000000000000000000000;
            Label constant_0x00000000;
            Label constant_0x00010002000300040001000200030004;
            Label constant_0x00030002000100000003000200010000;
            Label constant_0x00020002000200020002000200020002;
            Label constant_0x00030003000300030003000300030003;
            Label constant_0x00040004000400040004000400040004;

            void data()
            {
                align();

                L(constant_0x00000000000000000000000000000000);
                dw({ 0 }, 8);

                L(constant_0x00010002000300040001000200030004);
                dw({ 1,   2,   3,   4,   1,   2,   3,   4 }, 1);

                L(constant_0x00030002000100000003000200010000);
                dw({ 3,   2,   1,   0,   3,   2,   1,   0 }, 1);

                L(constant_0x00020002000200020002000200020002);
                dw({ 2,   2,   2,   2,   2,   2,   2,   2 }, 1);

                L(constant_0x00030003000300030003000300030003);
                dw({ 3,   3,   3,   3,   3,   3,   3,   3 }, 1);

                L(constant_0x00040004000400040004000400040004);
                dw({ 4,   4,   4,   4,   4,   4,   4,   4 }, 1);

                L(constant_0x00000000);
                dd({ 0 }, 1);

            }

            void assemble()
            {
                //void(Sample *dst, intptr_t dstStride, Sample const *neighbours, int predModeIntra);
                auto &r0    = arg64(0);                        // Sample *dst
                auto &r3    = arg64(1);                        // dst_stride
                auto &r1    = arg64(2);                        // const Sample *neighbours
                
                //Loading all the samples (need to read 2 int as we need the bottom left (BL) and the top right (TR)
                movq(xmm0, ptr[r1 - 9]); //load vertical   data 
                movq(xmm1, ptr[r1]); //load horizontal data 

                //db({ 0xcc });

                // Prepare constants
                punpcklbw(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts verticals from byte to short
                punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts horizontals from byte to short
                pshuflw(xmm3, xmm0, 0xFF);                                               // Extract and replicate bottom left (BL)
                pshufhw(xmm4, xmm1, 0x00);                                               // Extract top right   (TR)
                pshufd(xmm4, xmm4, 0xAA);                                                // Replicate top right (TR)
                pshufd(xmm0, xmm0, 0xEE);                                                // Moving needed Most Significant 32bits to Least Significant
                pmullw(xmm4, ptr[rip + constant_0x00010002000300040001000200030004]);    // Prepare the constant part of the formula (TR = TR * (1,2,3,4))
                paddw(xmm4, ptr[rip + constant_0x00040004000400040004000400040004]);     // Prepare the constant part of the formula (TR = TR + (4,4,4,4))

                // 1st line
                pshuflw(xmm5, xmm0, 0xFF);                                            // Extract and replicate 1st vertical
                pmullw(xmm5, ptr[rip + constant_0x00030002000100000003000200010000]); // Multiply first left pixel by (N - 1 - x) (x = 0 to 3))
                movdqa(xmm6, xmm1);                                                   // Save horizontal data.
                pmullw(xmm6, ptr[rip + constant_0x00030003000300030003000300030003]); // Multiply horizontal by (N - 1 - y) y = 0 --> (N - 1 - y) = 3) 
                paddw(xmm6, xmm5);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1]
                paddw(xmm6, xmm4);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[-1][N] + 4
                paddw(xmm6, xmm3);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[-1][N] + 4 + (y + 1)p([-1][N]
                psraw(xmm6, 3);                                                       // Shifting right by 3
                packuswb(xmm6, xmm6);                                                 // Repack to bytes
                movd(ptr[r0], xmm6);                                                  // Copy to memory
                lea(r0, ptr[r0 + (r3   * sizeof(Sample))]);                           // Move the pointer of stride

                // 2nd line
                pshuflw(xmm5, xmm0, 0xAA);                                            // Extract and replicate 2nd vertical
                pmullw(xmm5, ptr[rip + constant_0x00030002000100000003000200010000]); // Multiply first left pixel by (N - 1 - x) (x = 0 to 3))
                movdqa(xmm6, xmm1);                                                   // Save horizontal data.
                pmullw(xmm6, ptr[rip + constant_0x00020002000200020002000200020002]); // Multiply horizontal by (N - 1 - y) y = 0 --> (N - 1 - y) = 2) 
                paddw(xmm6, xmm5);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1]
                paddw(xmm6, xmm4);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[-1][N] + 4
                movdqa(xmm7, xmm3);                                                   // Save p[-1][N].
                pmullw(xmm7, ptr[rip + constant_0x00020002000200020002000200020002]); // Multiply horizontal by (y + 1) y = 1 --> (y + 1) = 2) 
                paddw(xmm6, xmm7);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[-1][N] + 4 + (y + 1)p([-1][N]
                psraw(xmm6, 3);                                                       // Shifting right by 3
                packuswb(xmm6, xmm6);                                                 // Repack to bytes
                movd(ptr[r0], xmm6);                                                  // Copy to memory
                lea(r0, ptr[r0 + (r3   * sizeof(Sample))]);                           // Move the pointer of stride

                // 3rd line
                pshuflw(xmm5, xmm0, 0x55);                                            // Extract and replicate 3rd vertical
                pmullw(xmm5, ptr[rip + constant_0x00030002000100000003000200010000]); // Multiply first left pixel by (N - 1 - x) (x = 0 to 3))
                movdqa(xmm6, xmm1);                                                   // Save horizontal data.
                paddw(xmm6, xmm5);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1]
                paddw(xmm6, xmm4);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[-1][N] + 4
                movdqa(xmm7, xmm3);                                                   // Save p[-1][N].
                pmullw(xmm7, ptr[rip + constant_0x00030003000300030003000300030003]); // Multiply horizontal by (y + 1) y = 2 --> (y + 1) = 3) 
                paddw(xmm6, xmm7);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[-1][N] + 4 + (y + 1)p([-1][N]
                psraw(xmm6, 3);                                                       // Shifting right by 3
                packuswb(xmm6, xmm6);                                                 // Repack to bytes
                movd(ptr[r0], xmm6);                                                  // Copy to memory
                lea(r0, ptr[r0 + (r3   * sizeof(Sample))]);                           // Move the pointer of stride

                // 4th line
                pshuflw(xmm5, xmm0, 0x00);                                            // Extract and replicate 4th vertical
                pmullw(xmm5, ptr[rip + constant_0x00030002000100000003000200010000]); // Multiply first left pixel by (N - 1 - x) (x = 0 to 3))
                movdqa(xmm6,  ptr[rip + constant_0x00000000]);                        // Horizontal data is nil on this line
                paddw(xmm6, xmm5);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1]
                paddw(xmm6, xmm4);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[-1][N] + 4
                movdqa(xmm7, xmm3);                                                   // Save p[-1][N].
                pmullw(xmm7, ptr[rip + constant_0x00040004000400040004000400040004]); // Multiply horizontal by (y + 1) y = 3 --> (y + 1) = 4) 
                paddw(xmm6, xmm7);                                                    // (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[-1][N] + 4 + (y + 1)p([-1][N]
                psraw(xmm6, 3);                                                       // Shifting right by 3
                packuswb(xmm6, xmm6);                                                 // Repack to bytes
                movd(ptr[r0], xmm6);                                                  // Copy to memory

            }
    };

    template <typename Sample>
    struct IntraPredPlanar8x8_SSE_8bits :
        Jit::Function
        {
            IntraPredPlanar8x8_SSE_8bits(Jit::Buffer *buffer, int mode) :
            Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value)
            {
                this->build();
            }

            Label constant_0x00FF00FF00FF00FF00FF00FF00FF00FF;
            Label constant_0x00000000000000000000000000000000;
            Label constant_0x00080008000800080008000800080008;
            Label constant_0x00070006000500040003000200010000;
            Label constant_0x00010002000300040005000600070008;

            Label constant_mult;


            void data()
            {
                align();
                L(constant_0x00FF00FF00FF00FF00FF00FF00FF00FF);
                dw({ 0x00ff }, 8);

                L(constant_0x00000000000000000000000000000000);
                dw({ 0 }, 8);

                L(constant_0x00080008000800080008000800080008);
                dw({ 8 }, 8);

                L(constant_0x00070006000500040003000200010000);
                dw({ 7,   6,   5,   4,   3,   2,   1,   0 }, 1);

                L(constant_0x00010002000300040005000600070008);
                dw({ 1,   2,   3,   4,   5,   6,   7,   8 }, 1);

                L(constant_mult);
                for (int mult = 0; mult < 9; mult++)
                {
                    dw({ mult, mult, mult, mult, mult, mult, mult, mult }, 1);
                }
            }

            void assemble()
            {
                //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
                auto &r0    = arg64(0);                        // Sample *dst
                auto &r3    = arg64(1);                        // dst_stride
                //Reg32 dst_stride = Reg32(arg64(1).getIdx()); // dst_stride
                auto &r1    = arg64(2);                        // const Sample *neighbours
                auto &r2    = arg64(3);                        // Sample neigh_corner
                auto &g5    = reg64(5);

                lea(g5, ptr[rip + constant_mult]);                                                                                                                          \

                //Loading all the samples
                movq(xmm0, ptr[r1 - 9]); //load vertical   data 
                movq(xmm1, ptr[r1]); //load horizontal data 
                movd(xmm2, ptr[r1 - 10]); //Bottom Left data (BL)
                movd(xmm3, ptr[r1 + 8]); //Top Right   data (TR)

                //db({ 0xcc });

                // Prepare constants
                punpcklbw(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts verticals from byte to short
                punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts horizontals from byte to short

                pand(xmm2, ptr[rip + constant_0x00FF00FF00FF00FF00FF00FF00FF00FF]);      // Repeat bottom left (BL) p[-1][N]
                pshuflw(xmm2, xmm2, 0x00);                                               // Converts BL from byte to short
                pshufd(xmm2, xmm2, 0x44);                                                // Repeat bottom left (BL) p[-1][N]

                pand(xmm3, ptr[rip + constant_0x00FF00FF00FF00FF00FF00FF00FF00FF]);      // Repeat top right   (TR) p[N][-1]
                pshuflw(xmm3, xmm3, 0x00);                                               // Converts TR from byte to short
                pshufd(xmm3, xmm3, 0x44);                                                // Repeat top right   (TR) p[N][-1]

                pmullw(xmm3, ptr[rip + constant_0x00010002000300040005000600070008]);    // Prepare the constant part of the formula (TR = TR * (1,2,3,4,5,6,7,8))
                paddw(xmm3, ptr[rip + constant_0x00080008000800080008000800080008]);     // Prepare the constant part of the formula (TR = TR + (8,8,8,8,8,8,8,8))

                //db({ 0xcc });

#define INSERT_LINE8x8(n_pixel)                                                                                                                                                  \
                {                                                                                                                                                                \
                    pmullw(xmm5, ptr[rip + constant_0x00070006000500040003000200010000]); /* Multiply n_pixel left pixel by (N - 1 - x) (x = 0 to 7)) */                         \
                    movdqa(xmm6, xmm1);                                                   /* Save horizontal data */                                                             \
                    pmullw(xmm6, ptr[g5 + ((7 - n_pixel)*16)]);                           /* Multiply horizontals by (N - 1 - y) */                                              \
                    paddw(xmm6, xmm5);                                                    /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] */                                        \
                    movdqa(xmm7, xmm2);                                                   /* Save p[-1][N] */                                                                    \
                    pmullw(xmm7, ptr[g5 + ((n_pixel + 1)*16)]);                           /* Multiply BL by (y + 1) y = n_pixel --> (y + 1)p([-1][N])*/                          \
                    paddw(xmm6, xmm3);                                                    /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[N][-1] + 8 */                    \
                    paddw(xmm6, xmm7);                                                    /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[N][-1] + 8 + (y + 1)p([-1][N])*/ \
                    psraw(xmm6, 4);                                                       /* Shifting right by 4 (k + 1)*/                                                       \
                    packuswb(xmm6, xmm6);                                                 /* Repack to bytes */                                                                  \
                    movq(ptr[r0], xmm6);                                                  /* Copy to memory  */                                                                  \
                    if (n_pixel != 7)                                                                                                                                            \
                        lea(r0, ptr[r0 + (r3   * sizeof(Sample))]);                       /* Move the pointer of stride */                                                       \
                }

                pshufhw(xmm4, xmm0, 0xFF);  /* Extract the n_pixel vertical   */
                pshufd(xmm5, xmm4, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE8x8(0);
                pshufhw(xmm4, xmm0, 0xAA);  /* Extract the n_pixel vertical   */
                pshufd(xmm5, xmm4, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE8x8(1);
                pshufhw(xmm4, xmm0, 0x55);  /* Extract the n_pixel vertical   */
                pshufd(xmm5, xmm4, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE8x8(2);
                pshufhw(xmm4, xmm0, 0x00);  /* Extract the n_pixel vertical   */
                pshufd(xmm5, xmm4, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE8x8(3);

                pshuflw(xmm4, xmm0, 0xFF);  /* Extract the n_pixel vertical   */
                pshufd(xmm5, xmm4, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE8x8(4);
                pshuflw(xmm4, xmm0, 0xAA);  /* Extract the n_pixel vertical   */
                pshufd(xmm5, xmm4, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE8x8(5);
                pshuflw(xmm4, xmm0, 0x55);  /* Extract the n_pixel vertical   */
                pshufd(xmm5, xmm4, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE8x8(6);
                pshuflw(xmm4, xmm0, 0x00);  /* Extract the n_pixel vertical   */
                pshufd(xmm5, xmm4, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE8x8(7);

 #undef INSERT_LINE8x8
            }
        };

    template <typename Sample>
    struct IntraPredPlanar16x16_SSE_8bits :
    Jit::Function
        {
            IntraPredPlanar16x16_SSE_8bits(Jit::Buffer *buffer, int mode) :
            Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value)
            {
                this->build();
            }

            Label constant_0x00FF00FF00FF00FF00FF00FF00FF00FF;
            Label constant_0x00000000000000000000000000000000;
            Label constant_0x00160016001600160016001600160016;
            Label constant_0x00010002000300040005000600070008;
            Label constant_0x00090010001100120013001400150016;
            Label constant_0x00150014001300120011001000090008;
            Label constant_0x00070006000500040003000200010000;

            Label constant_mult;

            void data()
            {
                align();

                L(constant_0x00FF00FF00FF00FF00FF00FF00FF00FF);
                dw({ 0x00ff }, 8);

                L(constant_0x00000000000000000000000000000000);
                dw({ 0 }, 8);

                L(constant_0x00160016001600160016001600160016);
                dw({ 16 }, 8);

                L(constant_0x00010002000300040005000600070008);
                dw({ 1,   2,   3,   4,   5,   6,   7,   8 }, 1);
                L(constant_0x00090010001100120013001400150016);
                dw({ 9,  10,  11,  12,  13,  14,  15,  16 }, 1);

                L(constant_0x00150014001300120011001000090008);
                dw({15,  14,  13,  12,  11,  10,   9,   8 }, 1);
                L(constant_0x00070006000500040003000200010000);
                dw({ 7,   6,   5,   4,   3,   2,   1,   0 }, 1);

                L(constant_mult);
                for (int mult = 0; mult < 17; mult++)
                {
                    dw({ mult, mult, mult, mult, mult, mult, mult, mult }, 1);
                }
            }

            void assemble()
            {
                //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
                auto &r0    = arg64(0);                        // Sample *dst
                auto &r3    = arg64(1);                        // dst_stride
                //Reg32 dst_stride = Reg32(arg64(1).getIdx()); // dst_stride
                auto &r1    = arg64(2);                        // const Sample *neighbours
                auto &g5    = reg64(5);

                lea(g5, ptr[rip + constant_mult]);                                                                                                                          \

                //Loading all the samples

                //Loading all the samples
                movdqu(xmm0, ptr[r1 - 0x11]); //load vertical   data 
                movdqa(xmm1, ptr[r1]); //load horizontal data 
                movd(xmm2, ptr[r1 - 0x12]);   //Bottom Left data (BL)
                movd(xmm3, ptr[r1 + 0x10]);   //Top Right   data (TR)
                movdqa(xmm4, xmm0);                                                      /* Copy selected left pixels row */                                                                      \
                movdqa(xmm5, xmm1);                                                      /* Copy selected left pixels row */                                                                      \

                //db({ 0xcc });

                // Prepare constants
                punpcklbw(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts verticals   samples 8 to 15 from byte to short
                punpckhbw(xmm4, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts verticals   samples 0 to  7 from byte to short
                punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts horizontals samples 0 to  7 from byte to short
                punpckhbw(xmm5, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts horizontals samples 8 to 15 from byte to short

                pand(xmm2, ptr[rip + constant_0x00FF00FF00FF00FF00FF00FF00FF00FF]);      // Repeat bottom left (BL) p[-1][N]
                pshuflw(xmm2, xmm2, 0x00);                                               // Converts BL from byte to short
                pshufd(xmm2, xmm2, 0x44);                                                // Repeat bottom left (BL) p[-1][N]
                
                pand(xmm3, ptr[rip + constant_0x00FF00FF00FF00FF00FF00FF00FF00FF]);      // Repeat top right   (TR) p[N][-1]
                pshuflw(xmm3, xmm3, 0x00);                                               // Converts TR from byte to short
                pshufd(xmm3, xmm3, 0x44);                                                // Repeat top right   (TR) p[N][-1]

                movdqa(xmm6, xmm3);                                                      // Copy replicated top right   (TR)
                pmullw(xmm3, ptr[rip + constant_0x00010002000300040005000600070008]);    // Prepare the constant part of the formula (TR = TR * ( 1, 2, 3, 4, 5, 6, 7, 8))
                paddw(xmm3, ptr[rip + constant_0x00160016001600160016001600160016]);     // Prepare the constant part of the formula (TR = TR + (16,16,16,16,16,16,16,16))
                pmullw(xmm6, ptr[rip + constant_0x00090010001100120013001400150016]);    // Prepare the constant part of the formula (TR = TR * ( 9,10,11,12,13,14,15,16))
                paddw(xmm6, ptr[rip + constant_0x00160016001600160016001600160016]);     // Prepare the constant part of the formula (TR = TR + (16,16,16,16,16,16,16,16))

#define INSERT_LINE16x16(n_pixel)                                                                                                                                                                  \
                {                                                                                                                                                                                  \
                    movdqa(xmm8, xmm7);                                                   /* Copy selected left pixels row */                                                                      \
                    pmullw(xmm7, ptr[rip + constant_0x00150014001300120011001000090008]); /* Multiply n_pixel left pixel by (N - 1 - x) (x = 0 to  7)) */                                          \
                    pmullw(xmm8, ptr[rip + constant_0x00070006000500040003000200010000]); /* Multiply n_pixel left pixel by (N - 1 - x) (x = 8 to 15)) */                                          \
                    movdqa(xmm9,  xmm1);                                                  /* Save horizontal samples 0 to  7 */                                                                    \
                    movdqa(xmm10, xmm5);                                                  /* Save horizontal samples 8 to 15 */                                                                    \
                    pmullw(xmm9,  ptr[g5 + ((15 - n_pixel)*16)]);                         /* Multiply horizontals by (N - 1 - y) */                                                                \
                    pmullw(xmm10, ptr[g5 + ((15 - n_pixel)*16)]);                         /* Multiply horizontals by (N - 1 - y) */                                                                \
                    paddw(xmm9,  xmm7);                                                   /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] samples 0 to  7 */                                          \
                    paddw(xmm10, xmm8);                                                   /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] samples 8 to 15 */                                          \
                    movdqa(xmm7, xmm2);                                                   /* Save p[-1][N] */                                                                                      \
                    movdqa(xmm8, xmm2);                                                   /* Save p[-1][N] */                                                                                      \
                    pmullw(xmm7, ptr[g5 + ((n_pixel + 1)*16)]);                           /* Multiply BL by (y + 1) y = n_pixel --> (y + 1)p([-1][N]) samples 0 to  7 */                           \
                    pmullw(xmm8, ptr[g5 + ((n_pixel + 1)*16)]);                           /* Multiply BL by (y + 1) y = n_pixel --> (y + 1)p([-1][N]) samples 8 to 15 */                           \
                    paddw(xmm9,  xmm3);                                                   /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[N][-1] + 16 samples 0 to  7 */                     \
                    paddw(xmm10, xmm6);                                                   /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[N][-1] + 16 samples 8 to 15 */                     \
                    paddw(xmm9,  xmm7);                                                   /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[N][-1] + 16 + (y + 1)p([-1][N]) samples 0 to  7 */ \
                    paddw(xmm10, xmm8);                                                   /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (x+1)p[N][-1] + 16 + (y + 1)p([-1][N]) samples 8 to 15 */ \
                    psraw(xmm9, 5);                                                       /* Shifting right by 5 (k + 1) samples 0 to  7 */                                                        \
                    psraw(xmm10, 5);                                                      /* Shifting right by 5 (k + 1) samples 8 to 15 */                                                        \
                    packuswb(xmm9,  xmm10);                                               /* Repack to bytes samples 0 to 15 */                                                                    \
                    movdqa(ptr[r0], xmm9);                                                /* Copy to memory  */                                                                                    \
                    if (n_pixel != 15)                                                                                                                                                             \
                        lea(r0, ptr[r0 + (r3   * sizeof(Sample))]);                       /* Move the pointer of stride */                                                                         \
                }

                pshufhw(xmm7, xmm4, 0xFF);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(0);
                pshufhw(xmm7, xmm4, 0xAA);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(1);
                pshufhw(xmm7, xmm4, 0x55);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(2);
                pshufhw(xmm7, xmm4, 0x00);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(3);

                pshuflw(xmm7, xmm4, 0xFF);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(4);
                pshuflw(xmm7, xmm4, 0xAA);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(5);
                pshuflw(xmm7, xmm4, 0x55);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(6);
                pshuflw(xmm7, xmm4, 0x00);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(7);

                pshufhw(xmm7, xmm0, 0xFF);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(8);
                pshufhw(xmm7, xmm0, 0xAA);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(9);
                pshufhw(xmm7, xmm0, 0x55);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(10);
                pshufhw(xmm7, xmm0, 0x00);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0xAA);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(11);

                pshuflw(xmm7, xmm0, 0xFF);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(12);
                pshuflw(xmm7, xmm0, 0xAA);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(13);
                pshuflw(xmm7, xmm0, 0x55);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(14);
                pshuflw(xmm7, xmm0, 0x00);  /* Extract the n_pixel vertical   */
                pshufd(xmm7, xmm7, 0x00);   /* Replicate the n_pixel vertical */
                INSERT_LINE16x16(15);

#undef INSERT_LINE16x16
             }
        };

    template <typename Sample>
    struct IntraPredPlanar32x32_SSE_8bits :
    Jit::Function
        {
            IntraPredPlanar32x32_SSE_8bits(Jit::Buffer *buffer, int mode) :
            Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value)
            {
                this->build();
            }

            Label constant_0x00FF00FF00FF00FF00FF00FF00FF00FF;
            Label constant_0x00000000000000000000000000000000;
            Label constant_0x00320032003200320032003200320032;
            Label constant_0x00010002000300040005000600070008;
            Label constant_0x00090010001100120013001400150016;
            Label constant_0x00170018001900200021002200230024;
            Label constant_0x00250026002700280029003000310032;
            Label constant_0x00310030002900280027002600250024;
            Label constant_0x00230022002100200019001800170016;
            Label constant_0x00150014001300120011001000090008;
            Label constant_0x00070006000500040003000200010000;
            Label constant_mult;

            void data()
            {
                align();

                L(constant_0x00FF00FF00FF00FF00FF00FF00FF00FF);
                dw({ 0x00ff }, 8);

                L(constant_0x00000000000000000000000000000000);
                dw({ 0 }, 8);

                L(constant_0x00320032003200320032003200320032);
                dw({ 32 }, 8);

                L(constant_0x00010002000300040005000600070008);
                dw({ 1,   2,   3,   4,   5,   6,   7,   8 }, 1);

                L(constant_0x00090010001100120013001400150016);
                dw({ 9,  10,  11,  12,  13,  14,  15,  16 }, 1);

                L(constant_0x00170018001900200021002200230024);
                dw({17,  18,  19,  20,  21,  22,  23,  24 }, 1);

                L(constant_0x00250026002700280029003000310032);
                dw({25,  26,  27,  28,  29,  30,  31,  32 }, 1);

                L(constant_0x00310030002900280027002600250024);
                dw({31,  30,  29,  28,  27,  26,  25,  24 }, 1);

                L(constant_0x00230022002100200019001800170016);
                dw({23,  22,  21,  20,  19,  18,  17,  16 }, 1);

                L(constant_0x00150014001300120011001000090008);
                dw({15,  14,  13,  12,  11,  10,   9,   8 }, 1);

                L(constant_0x00070006000500040003000200010000);
                dw({ 7,   6,   5,   4,   3,   2,   1,   0 }, 1);

                L(constant_mult);
                for (int mult = 0; mult < 33; mult++)
                {
                    dw({ mult, mult, mult, mult, mult, mult, mult, mult }, 1);
                }
            }

            void assemble()
            {
                //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
                auto &r0    = arg64(0);                        // Sample *dst
                auto &r3    = arg64(1);                        // dst_stride
                //Reg32 dst_stride = Reg32(arg64(1).getIdx()); // dst_stride
                auto &r1    = arg64(2);                        // const Sample *neighbours
                auto &r2    = arg64(3);                        // Sample neigh_corner
                auto &g5    = reg64(5);

                lea(g5, ptr[rip + constant_mult]);                                                                                                                          \
                lea(r3, ptr[r3 - 0x18]);                                                                                                                          \

                //Loading all the samples
                movdqu(xmm0, ptr[r1 - 0x21]); //load vertical   data [0 + 32] = pos 32...47. = 31 --> 16
                movdqu(xmm1, ptr[r1 - 0x11]); //load vertical   data [0 + 48] = pos 48...63.  15 -->  0
                movdqa(xmm2, ptr[r1]); //load horizontal data [0 + 64] = pos 64...79. (aligned)  0 --> 15
                movdqa(xmm3, ptr[r1 + 0x10]); //load horizontal data [0 + 80] = pos 80...95. (aligned) 16 --> 31
                movd(xmm4, ptr[r1 - 0x22]);   //Bottom Left data [0 + 31] (BL)
                movd(xmm5, ptr[r1 + 0x20]);   //Top Right   data [0 + 96] (TR)

                movdqa(xmm6, xmm0);                                                      /* Copy selected left pixels row */                                                                      \
                movdqa(xmm7, xmm1);                                                      /* Copy selected left pixels row */                                                                      \
                movdqa(xmm8, xmm2);                                                      /* Copy selected left pixels row */                                                                      \
                movdqa(xmm9, xmm3);                                                      /* Copy selected left pixels row */                                                                      \

                // Prepare constants
                punpcklbw(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts verticals samples 31 to 24 from byte to short
                punpckhbw(xmm6, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts verticals samples 23 to 16 from byte to short
                punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts verticals samples 15 to  8 from byte to short
                punpckhbw(xmm7, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts verticals samples  7 to  0 from byte to short

                punpcklbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts horizontals samples  0 to  7 from byte to short
                punpckhbw(xmm8, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts horizontals samples  8 to 15 from byte to short
                punpcklbw(xmm3, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts horizontals samples 16 to 23 from byte to short
                punpckhbw(xmm9, ptr[rip + constant_0x00000000000000000000000000000000]); // Converts horizontals samples 24 to 31 from byte to short

                pand(xmm4, ptr[rip + constant_0x00FF00FF00FF00FF00FF00FF00FF00FF]);      // Repeat bottom left (BL) p[-1][N]
                pshuflw(xmm4, xmm4, 0x00);                                               // Converts BL from byte to short
                pshufd(xmm4, xmm4, 0x44);                                                // Repeat bottom left (BL) p[-1][N]
                
                pand(xmm5, ptr[rip + constant_0x00FF00FF00FF00FF00FF00FF00FF00FF]);      // Repeat top right   (TR) p[N][-1]
                pshuflw(xmm5, xmm5, 0x00);                                               // Converts TR from byte to short
                pshufd(xmm5, xmm5, 0x44);                                                // Repeat top right   (TR) p[N][-1]

                movdqa(xmm10, xmm5);                                                     // Copy replicated top right   (TR)
                movdqa(xmm11, xmm5);                                                     // Copy replicated top right   (TR)
                movdqa(xmm12, xmm5);                                                     // Copy replicated top right   (TR)

                pmullw(xmm5,  ptr[rip + constant_0x00010002000300040005000600070008]);   // (TR = TR * ( 1, 2, 3, 4, 5, 6, 7, 8))
                pmullw(xmm10, ptr[rip + constant_0x00090010001100120013001400150016]);   // (TR = TR * ( 9,10,11,12,13,14,15,16))
                pmullw(xmm11, ptr[rip + constant_0x00170018001900200021002200230024]);   // (TR = TR * (17,18,19,20,21,22,23,24))
                pmullw(xmm12, ptr[rip + constant_0x00250026002700280029003000310032]);   // (TR = TR * (25,26,27,28,29,30,31,32))

                paddw (xmm5,  ptr[rip + constant_0x00320032003200320032003200320032]);   // (TR = TR + (32,32,32,32,32,32,32,32))
                paddw (xmm10, ptr[rip + constant_0x00320032003200320032003200320032]);   // (TR = TR + (32,32,32,32,32,32,32,32))
                paddw (xmm11, ptr[rip + constant_0x00320032003200320032003200320032]);   // (TR = TR + (32,32,32,32,32,32,32,32))
                paddw (xmm12, ptr[rip + constant_0x00320032003200320032003200320032]);   // (TR = TR + (32,32,32,32,32,32,32,32))

#define INSERT_LINE32x32(n_pixel)                                                                                                                                                      \
                {                                                                                                                                                                      \
                    movdqa(xmm14, xmm13);                                                  /* Copy selected left pixels row p[-1][0] */                                                \
                    pmullw(xmm14, ptr[rip + constant_0x00310030002900280027002600250024]); /* (N - 1 - x)p[-1][0] (x = 0 to  7) */                                                     \
                    movdqa(xmm15, xmm2);                                                   /* Save horizontal samples 0 to  7 */                                                       \
                    pmullw(xmm15, ptr[g5 + ((31 - n_pixel)*16)]);                          /* Multiply horizontals by (N - 1 - y)p[x][-1] (x = 0 to  7)*/                              \
                    paddw(xmm15,  xmm14);                                                  /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] samples 0 to  7 */                             \
                    movdqa(xmm14, xmm4);                                                   /* Save BL p[-1][N] */                                                                      \
                    pmullw(xmm14, ptr[g5 + ((n_pixel + 1)*16)]);                           /* (y + 1)p([-1][N]) samples 0 to  7 */                                                     \
                    paddw(xmm15,  xmm14);                                                  /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (y + 1)p([-1][N]) */                         \
                    paddw(xmm15,  xmm5);                                                   /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (y + 1)p([-1][N]) + (x + 1)p[N][-1] + 32) */ \
                    psraw(xmm15, 6);                                                       /* Shifting right by 6 (k + 1) samples 0 to  7 */                                           \
                    packuswb(xmm15,  xmm15);                                               /* Repack to bytes samples 0 to 7 */                                                        \
                    pextrq(ptr[r0], xmm15, 0);                                             /* Copy 8 pixel to memory */                                                                \
                    lea(r0, ptr[r0 + (0x8 * sizeof(Sample))]);                             /* Move the pointer of stride */                                                            \
                    movdqa(xmm14, xmm13);                                                  /* Copy selected left pixels row p[-1][0] */                                                \
                    pmullw(xmm14, ptr[rip + constant_0x00230022002100200019001800170016]); /* (N - 1 - x)p[-1][0] (x = 8 to 15) */                                                     \
                    movdqa(xmm15, xmm8);                                                   /* Save horizontal samples 8 to 15 */                                                       \
                    pmullw(xmm15, ptr[g5 + ((31 - n_pixel)*16)]);                          /* Multiply horizontals by (N - 1 - y)p[x][-1] (x = 8 to 15)*/                              \
                    paddw(xmm15,  xmm14);                                                  /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] samples 8 to 15 */                             \
                    movdqa(xmm14, xmm4);                                                   /* Save BL p[-1][N] */                                                                      \
                    pmullw(xmm14, ptr[g5 + ((n_pixel + 1)*16)]);                           /* (y + 1)p([-1][N]) samples 8 to 15 */                                                     \
                    paddw(xmm15,  xmm14);                                                  /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (y + 1)p([-1][N]) */                         \
                    paddw(xmm15,  xmm10);                                                  /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (y + 1)p([-1][N]) + (x + 1)p[N][-1] + 32) */ \
                    psraw(xmm15, 6);                                                       /* Shifting right by 6 (k + 1) samples 8 to 15 */                                           \
                    packuswb(xmm15,  xmm15);                                               /* Repack to bytes samples 8 to 15 */                                                       \
                    pextrq(ptr[r0], xmm15, 0);                                             /* Copy 8 pixel to memory */                                                                \
                    lea(r0, ptr[r0 + (0x8 * sizeof(Sample))]);                             /* Move the pointer of stride */                                                            \
                    movdqa(xmm14, xmm13);                                                  /* Copy selected left pixels row p[-1][0] */                                                \
                    pmullw(xmm14, ptr[rip + constant_0x00150014001300120011001000090008]); /* (N - 1 - x)p[-1][0] (x = 16 to 23) */                                                    \
                    movdqa(xmm15, xmm3);                                                   /* Save horizontal samples 8 to 15 */                                                       \
                    pmullw(xmm15, ptr[g5 + ((31 - n_pixel)*16)]);                          /* Multiply horizontals by (N - 1 - y)p[x][-1] (x = 16 to 23)*/                             \
                    paddw(xmm15,  xmm14);                                                  /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] samples 16 to 23 */                            \
                    movdqa(xmm14, xmm4);                                                   /* Save BL p[-1][N] */                                                                      \
                    pmullw(xmm14, ptr[g5 + ((n_pixel + 1)*16)]);                           /* (y + 1)p([-1][N]) samples 16 to 23 */                                                    \
                    paddw(xmm15,  xmm14);                                                  /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (y + 1)p([-1][N]) */                         \
                    paddw(xmm15,  xmm11);                                                  /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (y + 1)p([-1][N]) + (x + 1)p[N][-1] + 32) */ \
                    psraw(xmm15, 6);                                                       /* Shifting right by 6 (k + 1) samples 16 to 23 */                                          \
                    packuswb(xmm15,  xmm15);                                               /* Repack to bytes samples 16 to 23 */                                                      \
                    pextrq(ptr[r0], xmm15, 0);                                             /* Copy 8 pixel to memory */                                                                \
                    lea(r0, ptr[r0 + (0x8 * sizeof(Sample))]);                             /* Move the pointer of stride */                                                            \
                    movdqa(xmm14, xmm13);                                                  /* Copy selected left pixels row p[-1][0] */                                                \
                    pmullw(xmm14, ptr[rip + constant_0x00070006000500040003000200010000]); /* (N - 1 - x)p[-1][0] (x = 24 to 32) */                                                    \
                    movdqa(xmm15, xmm9);                                                   /* Save horizontal samples 24 to 32 */                                                      \
                    pmullw(xmm15, ptr[g5 + ((31 - n_pixel)*16)]);                          /* Multiply horizontals by (N - 1 - y)p[x][-1] (x = 24 to 32)*/                             \
                    paddw(xmm15,  xmm14);                                                  /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] samples 24 to 32 */                            \
                    movdqa(xmm14, xmm4);                                                   /* Save BL p[-1][N] */                                                                      \
                    pmullw(xmm14, ptr[g5 + ((n_pixel + 1)*16)]);                           /* (y + 1)p([-1][N]) samples 24 to 32 */                                                    \
                    paddw(xmm15,  xmm14);                                                  /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (y + 1)p([-1][N]) */                         \
                    paddw(xmm15,  xmm12);                                                  /* (N - 1 - x)p[-1][0] + (N - 1 - y)p[x][-1] + (y + 1)p([-1][N]) + (x + 1)p[N][-1] + 32) */ \
                    psraw(xmm15, 6);                                                       /* Shifting right by 6 (k + 1) samples 24 to 32 */                                          \
                    packuswb(xmm15,  xmm15);                                               /* Repack to bytes samples 24 to 32 */                                                      \
                    pextrq(ptr[r0], xmm15, 0);                                             /* Copy 8 pixel to memory */                                                                \
                    if (n_pixel != 31)                                                                                                                                                 \
                        lea(r0, ptr[r0 + (r3 * sizeof(Sample))]);                          /* Move the pointer of stride */                                                            \
                }



                pshufhw(xmm13, xmm7, 0xFF); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(0);
                pshufhw(xmm13, xmm7, 0xAA); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(1);
                pshufhw(xmm13, xmm7, 0x55); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(2);
                pshufhw(xmm13, xmm7, 0x00); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(3);

                pshuflw(xmm13, xmm7, 0xFF); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(4);
                pshuflw(xmm13, xmm7, 0xAA); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(5);
                pshuflw(xmm13, xmm7, 0x55); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(6);
                pshuflw(xmm13, xmm7, 0x00); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(7);

                pshufhw(xmm13, xmm1, 0xFF); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(8);
                pshufhw(xmm13, xmm1, 0xAA); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(9);
                pshufhw(xmm13, xmm1, 0x55); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(10);
                pshufhw(xmm13, xmm1, 0x00); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(11);

                pshuflw(xmm13, xmm1, 0xFF); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(12);
                pshuflw(xmm13, xmm1, 0xAA); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(13);
                pshuflw(xmm13, xmm1, 0x55); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(14);
                pshuflw(xmm13, xmm1, 0x00); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(15);

                pshufhw(xmm13, xmm6, 0xFF); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(16);
                pshufhw(xmm13, xmm6, 0xAA); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(17);
                pshufhw(xmm13, xmm6, 0x55); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(18);
                pshufhw(xmm13, xmm6, 0x00); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(19);

                pshuflw(xmm13, xmm6, 0xFF); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(20);
                pshuflw(xmm13, xmm6, 0xAA); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(21);
                pshuflw(xmm13, xmm6, 0x55); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(22);
                pshuflw(xmm13, xmm6, 0x00); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(23);

                pshufhw(xmm13, xmm0, 0xFF); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(24);
                pshufhw(xmm13, xmm0, 0xAA); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(25);
                pshufhw(xmm13, xmm0, 0x55); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(26);
                pshufhw(xmm13, xmm0, 0x00); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0xAA); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(27);

                pshuflw(xmm13, xmm0, 0xFF); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(28);
                pshuflw(xmm13, xmm0, 0xAA); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(29);
                pshuflw(xmm13, xmm0, 0x55); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(30);
                pshuflw(xmm13, xmm0, 0x00); /* Extract the n_pixel vertical   */
                pshufd(xmm13, xmm13, 0x00); /* Replicate the n_pixel vertical */
                INSERT_LINE32x32(31);
                
#undef INSERT_LINE32x32
             }
        };

template <typename Sample>
struct IntraPredAng4x4_2to9_27to34_PosAng_SSE_8bits :
    Jit::Function
    {
        IntraPredAng4x4_2to9_27to34_PosAng_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label constant_0x0000000000000000;
        Label maskleft;
        Label maskposang;
        Label maskLine;
        Label maskshuffle8;
        Label add16;
        Label flip;
        Label dfm_hor;
        Label dfm_ver;

        int mode;
        int mode_mask;

        void data()
        {
            align(32);
            L(constant_0x00000000000000000000000000000000);
            dw({ 0 }, 8);

            align(32);
            L(constant_0x0000000000000000);
            dd({ 0 }, 2);

            align(32);
            L(add16);
            dw({16, 16, 16, 16, 16, 16, 16, 16}, 1);

            align(32);
            L(maskleft);
            db({7, 6, 5, 4, 3, 2, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8}); // invert the order of pixel as lefts are in opposite direction
           
            align(32);
            L(maskposang);
            db({8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15});
            
            align(32);
            L(maskLine);
            db({0, 1, 1, 2, 2, 3,  3,  4,  8, 9, 9, 10, 10, 11, 11, 12});

            align(32);
            L(maskshuffle8);
            db({0, 2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 0, 0, 0, 0, 0}); 

            align(32);
            L(flip);
            db({0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15});


            align(32);
            L(dfm_hor);
            db({32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 6, 26,  6, 26,  6, 26,  6, 26, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 3
            db({18, 14, 18, 14, 18, 14, 18, 14, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 3
            db({11, 21, 11, 21, 11, 21, 11, 21, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 4
            db({ 1, 31,  1, 31,  1, 31,  1, 31, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 4
            db({15, 17, 15, 17, 15, 17, 15, 17, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 5
            db({13, 19, 13, 19, 13, 19, 13, 19, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 5
            db({19, 13, 19, 13, 19, 13, 19, 13,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 6
            db({25,  7, 25,  7, 25,  7, 25,  7, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 6
            db({23,  9, 23,  9, 23,  9, 23,  9, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 7
            db({ 5, 27,  5, 27,  5, 27,  5, 27, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 7
            db({27,  5, 27,  5, 27,  5, 27,  5, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 8
            db({17, 15, 17, 15, 17, 15, 17, 15, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 8
            db({30,  2, 30,  2, 30,  2, 30,  2, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 9
            db({26,  6, 26,  6, 26,  6, 26,  6, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 9


            align(32);
            L(dfm_ver);
            db({30,  2, 30,  2, 30,  2, 30,  2, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 27 == 9
            db({26,  6, 26,  6, 26,  6, 26,  6, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 27 == 9
            db({27,  5, 27,  5, 27,  5, 27,  5, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 28 == 8
            db({17, 15, 17, 15, 17, 15, 17, 15, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 28 == 8
            db({23,  9, 23,  9, 23,  9, 23,  9, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 29 == 7
            db({ 5, 27,  5, 27,  5, 27,  5, 27, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 29 == 7
            db({19, 13, 19, 13, 19, 13, 19, 13,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 30 == 6
            db({25,  7, 25,  7, 25,  7, 25,  7, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 30 == 6
            db({15, 17, 15, 17, 15, 17, 15, 17, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 31 == 5
            db({13, 19, 13, 19, 13, 19, 13, 19, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 31 == 5
            db({11, 21, 11, 21, 11, 21, 11, 21, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 32 == 4
            db({ 1, 31,  1, 31,  1, 31,  1, 31, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 32 == 4
            db({ 6, 26,  6, 26,  6, 26,  6, 26, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 33 == 3
            db({18, 14, 18, 14, 18, 14, 18, 14, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 33 == 3
            db({32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2


        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); 
            auto &g5 = reg64(5);

            mov(ul, byte[r1 - 1]); // corner

            //Loading all the samples
            if (mode < 18)
            {
                // Need to read 2 int as we need the left and down left (dl) 
                movq(xmm0, ptr[r1 - 0x9]);        // load vertical   data [0 + 56] = pos 56, 57, 58, 59, 60, 61, 62, 63. (unaligned) 59 = dl
                pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                // Set the proper mask index
                mode_mask = mode;
                lea(g5, ptr[rip + dfm_hor]);
            }
            else
            {
                // Need to read 2 int as we need the up and up right (ur)
                movq(xmm0, ptr[r1]);        // load horizontal data [0 + 64] = pos 64, 65, 66, 67, 68, 69, 70, 71. (aligned) 68 = ur

                // Set the proper mask index
                mode_mask = mode - 27;
                lea(g5, ptr[rip + dfm_ver]);
            }
            
            // Read up right (ul = corner)
            //s1 = _mm_set_epi64(*ul, *(int64_t *)(l))
            movq(rax, xmm0);
            pinsrq(xmm1, rax, 0); 
            pinsrq(xmm1, ul,  1); // ul
            
            //s0 = m_shuffle_epi8(s0, s3);
            pshufb(xmm1, ptr[rip + maskposang]);  // put pixel in the right order UL, P0, P1, P2, P3, P4, P5, P6, P7, UL....

            switch (mode)
            {
                case 2:
                case 34:
                     //xmm2 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[1]), *(int64_t*)(main+1+angle_info->dint[0]));
                     psrldq(xmm1, 2);
                     movd(r8d, xmm1);
                     pinsrd(xmm5, r8d, 0);
                     psrldq(xmm1, 1);
                     movd(r8d, xmm1);
                     pinsrd(xmm5, r8d, 1);

                     //xmm3 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[3]), *(int64_t*)(main+1+angle_info->dint[2]));
                     psrldq(xmm1, 1);
                     movd(r8d, xmm1);
                     pinsrd(xmm5, r8d, 2);
                     psrldq(xmm1, 1);
                     movd(r8d, xmm1);
                     pinsrd(xmm5, r8d, 3);
                break;
                case 3:
                case 33:
                     //xmm2 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[1]), *(int64_t*)(main+1+angle_info->dint[0]));
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm2, rax, 0);
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm2, rax, 1);

                     //xmm3 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[3]), *(int64_t*)(main+1+angle_info->dint[2]));
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm3, rax, 0);
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm3, rax, 1);
                break;
                case 4:
                case 5:
                case 32:
                case 31:
                     //xmm2 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[1]), *(int64_t*)(main+1+angle_info->dint[0]));
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm2, rax, 0);
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm2, rax, 1);

                     //xmm3 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[3]), *(int64_t*)(main+1+angle_info->dint[2]));
                     pinsrq(xmm3, rax, 0);
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm3, rax, 1);
                break;
                case 6:
                case 30:
                     //xmm2 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[1]), *(int64_t*)(main+1+angle_info->dint[0]));
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm2, rax, 0);
                     pinsrq(xmm2, rax, 1);

                     //xmm3 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[3]), *(int64_t*)(main+1+angle_info->dint[2]));
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm3, rax, 0);
                     pinsrq(xmm3, rax, 1);
                break;
                case 7:
                case 29:
                     //xmm2 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[1]), *(int64_t*)(main+1+angle_info->dint[0]));
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm2, rax, 0);
                     pinsrq(xmm2, rax, 1);

                     //xmm3 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[3]), *(int64_t*)(main+1+angle_info->dint[2]));
                     pinsrq(xmm3, rax, 0);
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm3, rax, 1);
                break;
                case 8:
                case 9:
                case 28:
                case 27:
                     //xmm2 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[1]), *(int64_t*)(main+1+angle_info->dint[0]));
                     psrldq(xmm1, 1);
                     movq(rax, xmm1);
                     pinsrq(xmm2, rax, 0);
                     pinsrq(xmm2, rax, 1);

                     //xmm3 = _mm_set_epi64x (*(int64_t*)(main+1+angle_info->dint[3]), *(int64_t*)(main+1+angle_info->dint[2]));
                     pinsrq(xmm3, rax, 0);
                     pinsrq(xmm3, rax, 1);
                break;
                default: assert(0);
            }

            // Apply bilinear interpolation if not mode 2
            if ((mode != 2) && (mode != 34))
            {
                // line 0, 1
                //xmm2 = _mm_shuffle_epi8(xmm2, maskLine);
                pshufb(xmm2, ptr[rip + maskLine]);
                //pshufb(xmm2, ptr[rip + dfm]);
                //xmm2 = _mm_maddubs_epi16 (xmm2, dfm); 
                pmaddubsw(xmm2, ptr[g5 + ((mode_mask*2)*16)]);
                //xmm2 = _mm_add_epi16 (xmm2, 16);
                paddw(xmm2, ptr[rip + add16]);
                //xmm2 = _mm_srli_epi16 (xmm2, 5);
                psrlw(xmm2, 5);
                //xmm2 = _mm_shuffle_epi8(xmm2, maskshuffle8);
                pshufb(xmm2, ptr[rip + maskshuffle8]);

                // line 2, 3
                //xmm3 = _mm_shuffle_epi8(xmm3, maskLine);
                pshufb(xmm3, ptr[rip + maskLine]);
                //pshufb(xmm3, ptr[rip + dfm]);
                //xmm3 = _mm_maddubs_epi16 (xmm3, dfm); 
                pmaddubsw(xmm3, ptr[g5 + (((mode_mask*2) +  1)*16)]);
                //xmm3 = _mm_add_epi16 (xmm3, 16);
                paddw(xmm3, ptr[rip + add16]);
                //xmm3 = _mm_srli_epi16 (xmm3, 5);
                psrlw(xmm3, 5);
                //xmm3 = _mm_shuffle_epi8(xmm3, maskshuffle8);
                pshufb(xmm3, ptr[rip + maskshuffle8]);

                //s0  = _mm_set_epi32(*(uint32_t *)(d+3*dstride), *(uint32_t *)(d+2*dstride), *(uint32_t *)(d+1*dstride), *(uint32_t *)(d+0*dstride));
                //xmm5 = _mm_extract_epi32(xmm2, 0);
                pextrd(r8d, xmm2, 0);
                pinsrd(xmm5, r8d, 0);
                //xmm5 = _mm_extract_epi32(xmm2, 1);
                pextrd(r8d, xmm2, 1);
                pinsrd(xmm5, r8d, 1);

                //xmm5 = _mm_extract_epi32(xmm3, 0);
                pextrd(r8d, xmm3, 0);
                pinsrd(xmm5, r8d, 2);
                //xmm5 = _mm_extract_epi32(xmm3, 1);
                pextrd(r8d, xmm3, 1);
                pinsrd(xmm5, r8d, 3);
            }

            // Flip the pixels
            //xmm5 = _mm_shuffle_epi8(xmm5, flip);
            if (mode < 18)
                pshufb(xmm5, ptr[rip + flip]);

            // Store the pixels
            //*(d+0*dstride) = _mm_extract_epi32(s0, 0);
            pextrd(ptr[r0], xmm5, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            //*(d+1*dstride) = _mm_extract_epi32(s0, 1);
            pextrd(ptr[r0], xmm5, 1);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            //*(d+2*dstride) = _mm_extract_epi32(s0, 2);
            pextrd(ptr[r0], xmm5, 2);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            //*(d+3*dstride) = _mm_extract_epi32(s0, 3);
            pextrd(ptr[r0], xmm5, 3);
        }
    };

template <typename Sample>
struct IntraPredAng4x4_11to25_NegAng_SSE_8bits :
    Jit::Function
    {
        IntraPredAng4x4_11to25_NegAng_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label constant_0x0000000000000000;
        Label maskleft;
        Label masknegang;
        Label maskLine;
        Label maskshuffle8;
        Label add16;
        Label flip;
        Label dfm_hor;
        Label dfm_ver;

        int mode;
        int mode_mask;

        void data()
        {
            align(32);
            L(constant_0x00000000000000000000000000000000);
            dw({ 0 }, 8);

            align(32);
            L(constant_0x0000000000000000);
            dd({ 0 }, 2);

            align(32);
            L(add16);
            dw({16, 16, 16, 16, 16, 16, 16, 16}, 1);

            align(32);
            L(maskleft);
            db({7, 6, 5, 4, 3, 2, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8}); // invert the order of pixel as lefts are in opposite direction
           
            align(32);
            L(masknegang);
            db({8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15});
            
            align(32);
            L(maskLine);
            db({0, 1, 1, 2, 2, 3,  3,  4,  8, 9, 9, 10, 10, 11, 11, 12});

            align(32);
            L(maskshuffle8);
            db({0, 2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 0, 0, 0, 0, 0}); 

            align(32);
            L(flip);
            db({0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15});


            align(32);
            L(dfm_hor);
            db({ 2, 30,  2, 30,  2, 30,  2, 30,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 11
            db({ 6, 26,  6, 26,  6, 26,  6, 26,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 11
            db({ 5, 27,  5, 27,  5, 27,  5, 27, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 12
            db({15, 17, 15, 17, 15, 17, 15, 17, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 12
            db({ 9, 23,  9, 23,  9, 23,  9, 23, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 13
            db({27,  5, 27,  5, 27,  5, 27,  5,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 13
            db({13, 19, 13, 19, 13, 19, 13, 19, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 14
            db({ 7, 25,  7, 25,  7, 25,  7, 25, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 14
            db({17, 15, 17, 15, 17, 15, 17, 15,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 15
            db({19, 13, 19, 13, 19, 13, 19, 13,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 15
            db({21, 11, 21, 11, 21, 11, 21, 11, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 16
            db({31,  1, 31,  1, 31,  1, 31,  1, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 16
            db({26,  6, 26,  6, 26,  6, 26,  6, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 17
            db({14, 18, 14, 18, 14, 18, 14, 18,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 17


            align(32);
            L(dfm_ver);
            db({32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 18
            db({32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 18
            db({26,  6, 26,  6, 26,  6, 26,  6, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 19 == 17
            db({14, 18, 14, 18, 14, 18, 14, 18,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 19 == 17
            db({21, 11, 21, 11, 21, 11, 21, 11, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 20 == 16
            db({31,  1, 31,  1, 31,  1, 31,  1, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 20 == 16
            db({17, 15, 17, 15, 17, 15, 17, 15,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 21 == 15
            db({19, 13, 19, 13, 19, 13, 19, 13,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 21 == 15
            db({13, 19, 13, 19, 13, 19, 13, 19, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 22 == 14
            db({ 7, 25,  7, 25,  7, 25,  7, 25, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 22 == 14
            db({ 9, 23,  9, 23,  9, 23,  9, 23, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 23 == 13
            db({27,  5, 27,  5, 27,  5, 27,  5,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 23 == 13
            db({ 5, 27,  5, 27,  5, 27,  5, 27, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 24 == 12
            db({15, 17, 15, 17, 15, 17, 15, 17, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 24 == 12
            db({ 2, 30,  2, 30,  2, 30,  2, 30,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 25 == 11
            db({ 6, 26,  6, 26,  6, 26,  6, 26,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 25 == 11
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner
            auto &g5 = reg64(5);

            mov(ul, byte[r1 - 1]);

            // Set the correct masks
            if (mode < 18)
            {
                // Set the proper mask index
                mode_mask = mode - 11;
                lea(g5, ptr[rip + dfm_hor]);

                //Loading all the samples
                // Need to read 2 int as we need the left and down left (dl) 
                movq(xmm0, ptr[r1 - 0x9]);        // load vertical   data [0 + 56] = pos 56, 57, 58, 59, 60, 61, 62, 63. (unaligned) 59 = dl
                pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                // Need to read 2 int as we need the up and up right (ur)
                movq(xmm1, ptr[r1]);        // load horizontal data [0 + 64] = pos 64, 65, 66, 67, 68, 69, 70, 71. (aligned) 68 = ur

            }
            else
            {
                // Set the proper mask index
                mode_mask = mode - 18;
                lea(g5, ptr[rip + dfm_ver]);

                //Loading all the samples
                // Need to read 2 int as we need the left and down left (dl) 
                movq(xmm1, ptr[r1 - 0x9]);        // load vertical   data [0 + 56] = pos 56, 57, 58, 59, 60, 61, 62, 63. (unaligned) 59 = dl
                pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                // Need to read 2 int as we need the up and up right (ur)
                movq(xmm0, ptr[r1]);        // load horizontal data [0 + 64] = pos 64, 65, 66, 67, 68, 69, 70, 71. (aligned) 68 = ur
            }


            // Prepare left and up (ul = corner)
            //xmm2 = _mm_set_epi64(*ul, *(int64_t *)(l))
            //xmm3 = _mm_set_epi64(*ul, *(int64_t *)(u))
            movq(rax, xmm0);
            pinsrq(xmm2, rax, 0); 
            pinsrq(xmm2, ul,  1); // ul
            movq(rax, xmm1);
            pinsrq(xmm3, rax, 0); 
            pinsrq(xmm3, ul,  1); // ul

            //s0 = m_shuffle_epi8(s0, s3);
            pshufb(xmm2, ptr[rip + masknegang]);  // put pixel in the right order UL, L0, L1, L2, L3, L4, L5, L6, L7, UL....
            pshufb(xmm3, ptr[rip + masknegang]);  // put pixel in the right order UL, U0, U1, U2, U3, U4, U5, U6, U7, UL....

            switch (mode)
            {
                case 11:
                case 12:
                case 24:
                case 25:
                     // No shift or substitution required
                     movq(rax, xmm2);
                     pinsrq(xmm4, rax, 0);
                     pinsrq(xmm4, rax, 1);
                     pinsrq(xmm5, rax, 0);
                     pinsrq(xmm5, rax, 1);
                break;

                case 13:
                case 23:
                     //if (mode == 13)
                     //    db({ 0xcc });
                     movq(rax, xmm2);
                     pinsrq(xmm4, rax, 0);
                     pinsrq(xmm4, rax, 1);
                     pinsrq(xmm5, rax, 0);

                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 4); // Extract the U/L3 (Note that it is  posistion 4)
                     pinsrb(xmm2, r8d, 0); // Insert  the U/L3 in position 0
                     movq(rax, xmm2);
                     pinsrq(xmm5, rax, 1);
                break;

                case 14:
                case 22:
                     movq(rax, xmm2);
                     pinsrq(xmm4, rax, 0);
                     pinsrq(xmm4, rax, 1);

                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 2); // Extract the U/L1 (Note that it is  posistion 2)
                     pinsrb(xmm2, r8d, 0); // Insert  the U/L1 in position 0
                     movq(rax, xmm2);
                     pinsrq(xmm5, rax, 0);
                     pinsrq(xmm5, rax, 1);
                break;

                case 15:
                case 21:
                     movq(rax, xmm2);
                     pinsrq(xmm4, rax, 0);

                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 2); // Extract the U/L1 (Note that it is  posistion 2)
                     pinsrb(xmm2, r8d, 0); // Insert  the U/L1 in position 0
                     movq(rax, xmm2);
                     pinsrq(xmm4, rax, 1);
                     pinsrq(xmm5, rax, 0);

                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 4); // Extract the U/L3 (Note that it is  posistion 4)
                     pinsrb(xmm2, r8d, 0); // Insert  the U/L3 in position 0
                     movq(rax, xmm2);
                     pinsrq(xmm5, rax, 1);
                break;

                case 16:
                case 20:
                     movq(rax, xmm2);
                     pinsrq(xmm4, rax, 0);

                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 2); // Extract the U/L1 (Note that it is  posistion 2)
                     pinsrb(xmm2, r8d, 0); // Insert  the U/L1 in position 0
                     movq(rax, xmm2);
                     pinsrq(xmm4, rax, 1);
                     pinsrq(xmm5, rax, 0);

                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 3); // Extract the U/L2 (Note that it is  posistion 3)
                     pinsrb(xmm2, r8d, 0); // Insert  the U/L2 in position 0
                     movq(rax, xmm2);
                     pinsrq(xmm5, rax, 1);
                break;

                case 17:
                case 19:
                     movq(rax, xmm2);
                     pinsrq(xmm4, rax, 0);

                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 1); // Extract the U/L0 (Note that it is  posistion 1)
                     pinsrb(xmm2, r8d, 0); // Insert  the U0 in position 0
                     movq(rax, xmm2);
                     pinsrq(xmm4, rax, 1);

                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 2); // Extract the U/L1 (Note that it is  posistion 2)
                     pinsrb(xmm2, r8d, 0); // Insert  the U/L1 in position 0
                     movq(rax, xmm2);
                     pinsrq(xmm5, rax, 0);

                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 4); // Extract the U/L3 (Note that it is  posistion 4)
                     pinsrb(xmm2, r8d, 0); // Insert  the U/L1 in position 0
                     movq(rax, xmm2);
                     pinsrq(xmm5, rax, 1);
                break;

                case 18:
                     movd(r8d, xmm2);
                     pinsrd(xmm6, r8d, 0);
                     
                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 1); // Extract the U0 (Note that it is  posistion 1)
                     pinsrb(xmm2, r8d, 0); // Insert  the U0 in position 0
                     movd(r8d, xmm2);
                     pinsrd(xmm6, r8d, 1);
                     
                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 2); // Extract the U1 (Note that it is  posistion 2)
                     pinsrb(xmm2, r8d, 0); // Insert  the U1 in position 0
                     movd(r8d, xmm2);
                     pinsrd(xmm6, r8d, 2);
                     
                     pslldq(xmm2, 1);      // Shift to add a position
                     pextrb(r8d, xmm3, 3); // Extract the U2 (Note that it is  posistion 3)
                     pinsrb(xmm2, r8d, 0); // Insert  the U2 in position 0
                     movd(r8d, xmm2);
                     pinsrd(xmm6, r8d, 3);
                break;

                default: assert(0);
                break;
            }

            // Apply bilinear interpolation if not mode 18
            if (mode != 18)
            {
                // line 0, 1
                //xmm2 = _mm_shuffle_epi8(xmm2, maskLine);
                pshufb(xmm4, ptr[rip + maskLine]);
                //pshufb(xmm2, ptr[rip + dfm]);
                //xmm2 = _mm_maddubs_epi16 (xmm2, dfm); 
                pmaddubsw(xmm4, ptr[g5 + ((mode_mask*2)*16)]);
                //xmm2 = _mm_add_epi16 (xmm2, 16);
                paddw(xmm4, ptr[rip + add16]);
                //xmm2 = _mm_srli_epi16 (xmm2, 5);
                psrlw(xmm4, 5);
                //xmm2 = _mm_shuffle_epi8(xmm2, maskshuffle8);
                pshufb(xmm4, ptr[rip + maskshuffle8]);

                // line 2, 3
                //xmm3 = _mm_shuffle_epi8(xmm3, maskLine);
                pshufb(xmm5, ptr[rip + maskLine]);
                //pshufb(xmm3, ptr[rip + dfm]);
                //xmm3 = _mm_maddubs_epi16 (xmm3, dfm); 
                pmaddubsw(xmm5, ptr[g5 + (((mode_mask*2) +  1)*16)]);
                //xmm3 = _mm_add_epi16 (xmm3, 16);
                paddw(xmm5, ptr[rip + add16]);
                //xmm3 = _mm_srli_epi16 (xmm3, 5);
                psrlw(xmm5, 5);
                //xmm3 = _mm_shuffle_epi8(xmm3, maskshuffle8);
                pshufb(xmm5, ptr[rip + maskshuffle8]);

                //s0  = _mm_set_epi32(*(uint32_t *)(d+3*dstride), *(uint32_t *)(d+2*dstride), *(uint32_t *)(d+1*dstride), *(uint32_t *)(d+0*dstride));
                //xmm5 = _mm_extract_epi32(xmm2, 0);
                pextrd(r8d, xmm4, 0);
                pinsrd(xmm6, r8d, 0);
                //xmm5 = _mm_extract_epi32(xmm2, 1);
                pextrd(r8d, xmm4, 1);
                pinsrd(xmm6, r8d, 1);

                //xmm5 = _mm_extract_epi32(xmm3, 0);
                pextrd(r8d, xmm5, 0);
                pinsrd(xmm6, r8d, 2);
                //xmm5 = _mm_extract_epi32(xmm3, 1);
                pextrd(r8d, xmm5, 1);
                pinsrd(xmm6, r8d, 3);
            }

            // Flip the pixels
            //xmm5 = _mm_shuffle_epi8(xmm5, flip);
            if (mode < 18)
                pshufb(xmm6, ptr[rip + flip]);

            // Store the pixels
            //*(d+0*dstride) = _mm_extract_epi32(s0, 0);
            pextrd(ptr[r0], xmm6, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            //*(d+1*dstride) = _mm_extract_epi32(s0, 1);
            pextrd(ptr[r0], xmm6, 1);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            //*(d+2*dstride) = _mm_extract_epi32(s0, 2);
            pextrd(ptr[r0], xmm6, 2);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            //*(d+3*dstride) = _mm_extract_epi32(s0, 3);
            pextrd(ptr[r0], xmm6, 3);
        }
    };

template <typename Sample>
struct IntraPredAng4x4_10_filt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng4x4_10_filt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label maskleft;
        Label flip;

        int mode;
        
        void data()
        {
            align(32);
            L(constant_0x00000000000000000000000000000000);
            dw({ 0 }, 8);

            align(32);
            L(maskleft);
            db({7, 6, 5, 4, 3, 2, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(flip);
            db({0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15});
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner

            mov(ul, byte[r1 - 1]);

            //Loading all the samples
            // Need to read 2 int as we need the left and down left (dl) 
            movq(xmm0, ptr[r1 - 0x9]);        // load vertical   data [0 + 56] = pos 56, 57, 58, 59, 60, 61, 62, 63. (unaligned) 59 = dl
            pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
            // Need to read 2 int as we need the up and up right (ur)
            movd(xmm1, ptr[r1]);        // load horizontal data [0 + 64] = pos 64, 65, 66, 67, 68, 69, 70, 71. (aligned) 68 = ur

            //db({ 0xcc });
            // Repeat the same 4 pixel on all ther register
            pshufd(xmm3, xmm0, 0);

            // Filter
            // Prepare register with ul and L0 only
            pinsrb(xmm2, ul, 0);
            pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
            pshufb(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]);    // L0
            /// Prepare the l and ul unpacking them into 16bits
            punpcklbw(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]); // L0
            punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]); // up
            punpcklbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]); // ul 

            // Subtract the UL to from UPs
            psubw(xmm1, xmm2);
            // Shift right by 1
            psraw(xmm1, 1);
            // add left with up 1
            paddw(xmm0, xmm1);
            /// Packing them back tp 8bits
            packuswb(xmm0, xmm0); 

            // Flip the pixels
            //xmm5 = _mm_shuffle_epi8(xmm5, flip);
            pshufb(xmm3, ptr[rip + flip]);

            // Store the pixels
            // The first line is the filtered one
            pextrd(ptr[r0], xmm0, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrd(ptr[r0], xmm3, 1);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrd(ptr[r0], xmm3, 2);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrd(ptr[r0], xmm3, 3);
        }
    };

template <typename Sample>
struct IntraPredAng4x4_26_filt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng4x4_26_filt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label maskleft;

        int mode;
        
        void data()
        {
            align(32);
            L(constant_0x00000000000000000000000000000000);
            dw({ 0 }, 8);

            align(32);
            L(maskleft);
            db({3, 2, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8}); // invert the order of pixel as lefts are in opposite direction

        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner

            //db({ 0xcc });

            //Loading all the samples
            movd(xmm1, ptr[r1 - 0x5]);        //load vertical   data [0 + 60] = pos 60, 61, 62, 63. (unaligned)
            pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
            movd(xmm0, ptr[r1]);        // load horizontal data [0 + 64] = pos 64, 65, 66, 67 (aligned)

            mov(ul, byte[r1 - 1]);

            // Save UPs
            movdqa(xmm4, xmm0);


            // Filter
            // Prepare register with ul and L0 only
            pinsrb(xmm2, ul, 0);
            pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
            pshufb(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]);    // U0
            /// Prepare the l and ul unpacking them into 16bits
            punpcklbw(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]); // U0
            punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]); // left
            punpcklbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]); // ul 

            // Subtract the UL to from UPs
            psubw(xmm1, xmm2);
            // Shift right by 1
            psraw(xmm1, 1);
            // add left with up 1
            paddw(xmm0, xmm1);
            /// Packing them back tp 8bits
            packuswb(xmm0, xmm0); 

            // Store the pixels
#define INSERT_LINE(last)                               \
            pinsrb(xmm4, r8d, 0);                       \
            movd(ptr[r0], xmm4);                        \
            if (!last)                                  \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            // Extract the byte from the left filtered sample (sample 0)
            // --- Save the 1st row ----
            pextrb(r8d, xmm0, 0);
            INSERT_LINE(0);
            // Extract the byte from the left filtered sample (sample 1)
            // --- Save the 2nd row ----
            pextrb(r8d, xmm0, 1);
            INSERT_LINE(0);
            // --- Save the 3rd row ----
            // Extract the byte from the left filtered sample (sample 2)
            pextrb(r8d, xmm0, 2);
            INSERT_LINE(0);
            // --- Save the 4th row ----
            // Extract the byte from the left filtered sample (sample 3)
            pextrb(r8d, xmm0, 3);
            INSERT_LINE(1);
#undef INSERT_LINE
        }
    };

template <typename Sample>
struct IntraPredAng4x4_10_nofilt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng4x4_10_nofilt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label maskleft;
        Label flip;
        int mode;

        void data()
        {
            align(32);
            L(maskleft);
            db({3, 2, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(flip);
            db({0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15});
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours


            //Loading all the samples
            // Need to read 2 int as we need the left and down left (dl) 
            movd(xmm0, ptr[r1 - 0x5]);        // load vertical   data [0 + 56] = pos 60, 61, 62, 63.
            pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

            //db({ 0xcc });
            // Repeat the same 4 pixel on all ther register
            pshufd(xmm1, xmm0, 0);

            // Flip the pixels (transpose)
            pshufb(xmm1, ptr[rip + flip]);

            // Store the pixels
            // The first line is the filtered one
            pextrd(ptr[r0], xmm1, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            pextrd(ptr[r0], xmm1, 1);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            pextrd(ptr[r0], xmm1, 2);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            pextrd(ptr[r0], xmm1, 3);

            
        }
    };

template <typename Sample>
struct IntraPredAng4x4_26_nofilt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng4x4_26_nofilt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        int mode;
        
        void data()
        {
            align(32);
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner

            //Loading all the samples
            movd(xmm0, ptr[r1]);        // load horizontal data [0 + 64] = pos 64, 65, 66, 67 (aligned)

            //db({ 0xcc });

            // Store the pixels
#define INSERT_LINE(last)                               \
            movd(ptr[r0], xmm0);                        \
            if (!last)                                  \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            // --- Save the 1st row ----
            INSERT_LINE(0);
            // --- Save the 2nd row ----
            INSERT_LINE(0);
            // --- Save the 3rd row ----
            INSERT_LINE(0);
            // --- Save the 4th row ----
            INSERT_LINE(1);
#undef INSERT_LINE
        }
    };


/// =========================================================================================================
template <typename Sample>
struct IntraPredAng8x8_2to9_27to34_PosAng_SSE_8bits :
    Jit::Function
    {
        IntraPredAng8x8_2to9_27to34_PosAng_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label constant_0x0000000000000000;
        Label maskleft;
        Label maskLine;
        Label maskshuffle8;
        Label add16;
        Label flip0;
        Label flip1;
        Label flip2;
        Label flip3;
        Label dfm_hor;
        Label dfm_ver;

        int mode;
        int mode_mask;

        void data()
        {
            align(32);
            L(constant_0x00000000000000000000000000000000);
            dw({ 0 }, 8);

            align(32);
            L(constant_0x0000000000000000);
            dd({ 0 }, 2);

            align(32);
            L(add16);
            dw({16, 16, 16, 16, 16, 16, 16, 16}, 1);

            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction
           
            
            align(32);
            L(maskLine);
            db({0, 1, 1, 2, 2, 3,  3,  4,  4, 5, 5, 6, 6, 7, 7, 8});

            align(32);
            L(maskshuffle8);
            db({0, 2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 0, 0, 0, 0, 0}); 

            align(32);
            L(flip0);
            db({  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1});
            align(32);
            L(flip1);
            db({  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3});
            align(32);
            L(flip2);
            db({  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5});
            align(32);
            L(flip3);
            db({  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7});


            align(32);
            L(dfm_hor);
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 0
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 0
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 0
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 0
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 0
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 0
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 0
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 0
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 1
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 1
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 1
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 1
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 1
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 1
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 1
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 1
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 2
            db({  6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26}); // mode 3
            db({ 12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20}); // mode 3
            db({ 18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14}); // mode 3
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 3
            db({ 30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2}); // mode 3
            db({  4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28}); // mode 3
            db({ 10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22}); // mode 3
            db({ 16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16}); // mode 3
            db({ 11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21}); // mode 4
            db({ 22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10}); // mode 4
            db({  1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31}); // mode 4
            db({ 12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20}); // mode 4
            db({ 23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9}); // mode 4
            db({  2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30}); // mode 4
            db({ 13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19}); // mode 4
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 4
            db({ 15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17}); // mode 5
            db({ 30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2}); // mode 5
            db({ 13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19}); // mode 5
            db({ 28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4}); // mode 5
            db({ 11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21}); // mode 5
            db({ 26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6}); // mode 5
            db({  9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23}); // mode 5
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 5
            db({ 19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13}); // mode 6
            db({  6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26}); // mode 6
            db({ 25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7}); // mode 6
            db({ 12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20}); // mode 6
            db({ 31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1}); // mode 6
            db({ 18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14}); // mode 6
            db({  5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27}); // mode 6
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 6
            db({ 23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9}); // mode 7
            db({ 14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18}); // mode 7
            db({  5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27}); // mode 7
            db({ 28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4}); // mode 7
            db({ 19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13}); // mode 7
            db({ 10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22}); // mode 7
            db({  1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31}); // mode 7
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 7
            db({ 27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5}); // mode 8
            db({ 22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10}); // mode 8
            db({ 17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15}); // mode 8
            db({ 12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20}); // mode 8
            db({  7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25}); // mode 8
            db({  2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30}); // mode 8
            db({ 29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3}); // mode 8
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 8
            db({ 30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2}); // mode 9
            db({ 28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4}); // mode 9
            db({ 26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6}); // mode 9
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 9
            db({ 22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10}); // mode 9
            db({ 20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12}); // mode 9
            db({ 18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14}); // mode 6
            db({ 16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16}); // mode 9

            align(32);
            L(dfm_ver);
            db({ 30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2}); // mode 27 == 9
            db({ 28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4}); // mode 27 == 9
            db({ 26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6}); // mode 27 == 9
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 27 == 9
            db({ 22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10}); // mode 27 == 9
            db({ 20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12}); // mode 27 == 9
            db({ 18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14}); // mode 27 == 9
            db({ 16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16}); // mode 27 == 9
            db({ 27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5}); // mode 28 == 8
            db({ 22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10}); // mode 28 == 8
            db({ 17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15}); // mode 28 == 8
            db({ 12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20}); // mode 28 == 8
            db({  7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25}); // mode 28 == 8
            db({  2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30}); // mode 28 == 8
            db({ 29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3}); // mode 28 == 8
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 28 == 8
            db({ 23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9}); // mode 29 == 7
            db({ 14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18}); // mode 29 == 7
            db({  5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27}); // mode 29 == 7
            db({ 28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4}); // mode 29 == 7
            db({ 19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13}); // mode 29 == 7
            db({ 10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22}); // mode 29 == 7
            db({  1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31}); // mode 29 == 7
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 29 == 7
            db({ 19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13}); // mode 30 == 6
            db({  6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26}); // mode 30 == 6
            db({ 25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7}); // mode 30 == 6
            db({ 12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20}); // mode 30 == 6
            db({ 31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1}); // mode 30 == 6
            db({ 18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14}); // mode 30 == 6
            db({  5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27}); // mode 30 == 6
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 30 == 6
            db({ 15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17}); // mode 31 == 5
            db({ 30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2}); // mode 31 == 5
            db({ 13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19}); // mode 31 == 5
            db({ 28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4}); // mode 31 == 5
            db({ 11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21}); // mode 31 == 5
            db({ 26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6}); // mode 31 == 5
            db({  9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23}); // mode 31 == 5
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 31 == 5
            db({ 11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21}); // mode 32 == 4
            db({ 22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10}); // mode 32 == 4
            db({  1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31}); // mode 32 == 4
            db({ 12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20}); // mode 32 == 4
            db({ 23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9}); // mode 32 == 4
            db({  2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30}); // mode 32 == 4
            db({ 13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19}); // mode 32 == 4
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 32 == 4
            db({  6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26}); // mode 33 == 3
            db({ 12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20}); // mode 33 == 3
            db({ 18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14}); // mode 33 == 3
            db({ 24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8}); // mode 33 == 3
            db({ 30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2}); // mode 33 == 3
            db({  4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28}); // mode 33 == 3
            db({ 10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22}); // mode 33 == 3
            db({ 16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16}); // mode 33 == 3
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 34 == 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 34 == 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 34 == 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 34 == 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 34 == 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 34 == 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 34 == 2
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 34 == 2
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner
            auto &g5 = reg64(5);

            //db({ 0xcc });

            //Loading all the samples
            if (mode < 18)
            {
                // Need to read 4 int as we need the left and down left (dl) 
                movdqu(xmm0, ptr[r1 - 0x11]);      // load vertical   data (unaligned)
                pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                // Set the proper mask index
                mode_mask = mode;
                lea(g5, ptr[rip + dfm_hor]);
            }
            else
            {
                // Need to read 4 int as we need the up and up right (ur)
                movdqa(xmm0, ptr[r1]);      // load horizontal data (aligned)

                // Set the proper mask index
                mode_mask = mode - 27;
                lea(g5, ptr[rip + dfm_ver]);
            }

#define BILINEAR(n)                                               \
            pshufb(xmm1, ptr[rip + maskLine]);                    \
            pmaddubsw(xmm1, ptr[g5 + (((mode_mask*8) +  n)*16)]); \
            paddw(xmm1, ptr[rip + add16]);                        \
            psrlw(xmm1, 5);                                       \
            pshufb(xmm1, ptr[rip + maskshuffle8]);

            switch (mode)
            {
                case 2:
                case 34:
                    palignr(xmm1, xmm0, 1);
                    pextrq(ptr[r0], xmm1, 0);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    palignr(xmm1, xmm0, 2);
                    pextrq(ptr[r0], xmm1, 0);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    palignr(xmm1, xmm0, 3);
                    pextrq(ptr[r0], xmm1, 0);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    palignr(xmm1, xmm0, 4);
                    pextrq(ptr[r0], xmm1, 0);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    palignr(xmm1, xmm0, 5);
                    pextrq(ptr[r0], xmm1, 0);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    palignr(xmm1, xmm0, 6);
                    pextrq(ptr[r0], xmm1, 0);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    palignr(xmm1, xmm0, 7);
                    pextrq(ptr[r0], xmm1, 0);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    palignr(xmm1, xmm0, 8);
                    pextrq(ptr[r0], xmm1, 0);
                break;
                case 3:
                case 33:
                    movdqa(xmm1, xmm0);
                    BILINEAR(0);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm3, rax, 0);

                    palignr(xmm1, xmm0, 1);
                    BILINEAR(1);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm3, rax, 1);

                    palignr(xmm1, xmm0, 2);
                    BILINEAR(2);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm4, rax, 0);

                    palignr(xmm1, xmm0, 3);
                    BILINEAR(3);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm4, rax, 1);

                    palignr(xmm1, xmm0, 4);
                    BILINEAR(4);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm5, rax, 0);

                    palignr(xmm1, xmm0, 4);
                    BILINEAR(5);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm5, rax, 1);

                    palignr(xmm1, xmm0, 5);
                    BILINEAR(6);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm6, rax, 0);

                    palignr(xmm1, xmm0, 6);
                    BILINEAR(7);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm6, rax, 1);
                break;

                case 4:
                case 32:
                    movdqa(xmm1, xmm0);
                    BILINEAR(0);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm3, rax, 0);

                    palignr(xmm1, xmm0, 1);
                    BILINEAR(1);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm3, rax, 1);

                    palignr(xmm1, xmm0, 1);
                    BILINEAR(2);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm4, rax, 0);

                    palignr(xmm1, xmm0, 2);
                    BILINEAR(3);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm4, rax, 1);

                    palignr(xmm1, xmm0, 3);
                    BILINEAR(4);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm5, rax, 0);

                    palignr(xmm1, xmm0, 3);
                    BILINEAR(5);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm5, rax, 1);

                    palignr(xmm1, xmm0, 4);
                    BILINEAR(6);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm6, rax, 0);

                    palignr(xmm1, xmm0, 5);
                    BILINEAR(7);
                    pextrq(rax, xmm1, 0);
                    pinsrq(xmm6, rax, 1);
                break;
                
                case 5:
                case 31:
                     movdqa(xmm1, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm3, rax, 0);

                     palignr(xmm1, xmm0, 1);
                     BILINEAR(1);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm3, rax, 1);

                     palignr(xmm1, xmm0, 1);
                     BILINEAR(2);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm4, rax, 0);

                     palignr(xmm1, xmm0, 2);
                     BILINEAR(3);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm4, rax, 1);

                     palignr(xmm1, xmm0, 2);
                     BILINEAR(4);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm5, rax, 0);

                     palignr(xmm1, xmm0, 3);
                     BILINEAR(5);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm5, rax, 1);

                     palignr(xmm1, xmm0, 3);
                     BILINEAR(6);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm6, rax, 0);

                     palignr(xmm1, xmm0, 4);
                     BILINEAR(7);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                case 6:
                case 30:
                     movdqa(xmm1, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm3, rax, 0);

                     movdqa(xmm1, xmm0);
                     BILINEAR(1);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm3, rax, 1);

                     palignr(xmm1, xmm0, 1);
                     BILINEAR(2);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm4, rax, 0);

                     palignr(xmm1, xmm0, 1);
                     BILINEAR(3);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm4, rax, 1);

                     palignr(xmm1, xmm0, 2);
                     BILINEAR(4);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm5, rax, 0);

                     palignr(xmm1, xmm0, 2);
                     BILINEAR(5);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm5, rax, 1);

                     palignr(xmm1, xmm0, 2);
                     BILINEAR(6);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm6, rax, 0);

                     palignr(xmm1, xmm0, 3);
                     BILINEAR(7);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                case 7:
                case 29:
                     movdqa(xmm1, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm3, rax, 0);

                     movdqa(xmm1, xmm0);
                     BILINEAR(1);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm3, rax, 1);

                     movdqa(xmm1, xmm0);
                     BILINEAR(2);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm4, rax, 0);

                     palignr(xmm1, xmm0, 1);
                     BILINEAR(3);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm4, rax, 1);

                     palignr(xmm1, xmm0, 1);
                     BILINEAR(4);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm5, rax, 0);

                     palignr(xmm1, xmm0, 1);
                     BILINEAR(5);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm5, rax, 1);

                     palignr(xmm1, xmm0, 1);
                     BILINEAR(6);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm6, rax, 0);

                     palignr(xmm1, xmm0, 2);
                     BILINEAR(7);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                case 8:
                case 28:
                     movdqa(xmm1, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm3, rax, 0);

                     movdqa(xmm1, xmm0);
                     BILINEAR(1);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm3, rax, 1);

                     movdqa(xmm1, xmm0);
                     BILINEAR(2);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm4, rax, 0);

                     movdqa(xmm1, xmm0);
                     BILINEAR(3);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm4, rax, 1);

                     movdqa(xmm1, xmm0);
                     BILINEAR(4);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm5, rax, 0);

                     movdqa(xmm1, xmm0);
                     BILINEAR(5);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm5, rax, 1);

                     palignr(xmm1, xmm0, 1);
                     BILINEAR(6);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm6, rax, 0);

                     palignr(xmm1, xmm0, 1);
                     BILINEAR(7);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                case 9:
                case 27:
                     movdqa(xmm1, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm3, rax, 0);

                     movdqa(xmm1, xmm0);
                     BILINEAR(1);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm3, rax, 1);

                     movdqa(xmm1, xmm0);
                     BILINEAR(2);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm4, rax, 0);

                     movdqa(xmm1, xmm0);
                     BILINEAR(3);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm4, rax, 1);

                     movdqa(xmm1, xmm0);
                     BILINEAR(4);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm5, rax, 0);

                     movdqa(xmm1, xmm0);
                     BILINEAR(5);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm5, rax, 1);

                     movdqa(xmm1, xmm0);
                     BILINEAR(6);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm6, rax, 0);

                     movdqa(xmm1, xmm0);
                     BILINEAR(7);
                     pextrq(rax, xmm1, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                default: assert(0);
            }

#undef BILINEAR
            // transpose the pixels
            if ((mode < 18) && (mode != 2))
            {
                //db({ 0xcc });
                movdqa(xmm0, xmm3); 
                movdqa(xmm1, xmm4); 
                punpckhbw(xmm0, xmm1);
                punpcklbw(xmm3, xmm4);

                movdqa(xmm1, xmm0); 
                movdqa(xmm2, xmm3); 
                punpckhbw(xmm2, xmm1);
                punpcklbw(xmm3, xmm0);

                movdqa(xmm0, xmm5); 
                movdqa(xmm1, xmm6); 
                punpckhbw(xmm0, xmm1);
                punpcklbw(xmm5, xmm6);

                movdqa(xmm4, xmm0); 
                movdqa(xmm6, xmm5); 
                punpckhbw(xmm6, xmm4);
                punpcklbw(xmm5, xmm0);

                movdqa(xmm0, xmm3);  //  C | A 
                movdqa(xmm1, xmm2);  //  G | E
                movdqa(xmm4, xmm5);  //  D | B
                movdqa(xmm7, xmm6);  //  H | F
                
                punpckldq(xmm0, xmm4); // B | A
                punpckhdq(xmm3, xmm5); // D | C
                punpckldq(xmm1, xmm7); // F | E
                punpckhdq(xmm2, xmm6); // H | G

                // Store the pixels
                pextrq(ptr[r0], xmm0, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm0, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                pextrq(ptr[r0], xmm3, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm3, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                pextrq(ptr[r0], xmm1, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm1, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                pextrq(ptr[r0], xmm2, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm2, 1);

            }
            else if ((mode >= 18) && (mode != 34))
            {
                // Store the pixels
                pextrq(ptr[r0], xmm3, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm3, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm4, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm4, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm5, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm5, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm6, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm6, 1);
            }
        }
    };

template <typename Sample>
struct IntraPredAng8x8_11to25_NegAng_SSE_8bits :
    Jit::Function
    {
        IntraPredAng8x8_11to25_NegAng_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label constant_0x0000000000000000;
        Label maskleft;
        Label maskLine;
        Label maskshuffle8;
        Label add16;
        Label flip0;
        Label flip1;
        Label flip2;
        Label flip3;
        Label dfm_hor;
        Label dfm_ver;

        int mode;
        int mode_mask;

        void data()
        {
            align(32);
            L(constant_0x00000000000000000000000000000000);
            dw({ 0 }, 8);

            align(32);
            L(constant_0x0000000000000000);
            dd({ 0 }, 2);

            align(32);
            L(add16);
            dw({16, 16, 16, 16, 16, 16, 16, 16}, 1);

            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction
           
            
            align(32);
            L(maskLine);
            db({0, 1, 1, 2, 2, 3,  3,  4,  4, 5, 5, 6, 6, 7, 7, 8});

            align(32);
            L(maskshuffle8);
            db({0, 2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 0, 0, 0, 0, 0}); 

            align(32);
            L(flip0);
            db({  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1});
            align(32);
            L(flip1);
            db({  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3});
            align(32);
            L(flip2);
            db({  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5});
            align(32);
            L(flip3);
            db({  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7});


            align(32);
            L(dfm_hor);
            db({  2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30}); // mode 11
            db({  4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28}); // mode 11
            db({  6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26}); // mode 11
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 11
            db({ 10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22}); // mode 11
            db({ 12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20}); // mode 11
            db({ 14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18}); // mode 11
            db({ 16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16}); // mode 11
            db({  5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27}); // mode 12
            db({ 10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22}); // mode 12
            db({ 15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17}); // mode 12
            db({ 20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12}); // mode 12
            db({ 25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7}); // mode 12
            db({ 30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2}); // mode 12
            db({  3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29}); // mode 12
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 12
            db({  9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23}); // mode 13
            db({ 18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14}); // mode 13
            db({ 27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5}); // mode 13
            db({  4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28}); // mode 13
            db({ 13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19}); // mode 13
            db({ 22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10}); // mode 13
            db({ 31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1}); // mode 13
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 13
            db({ 13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19}); // mode 14
            db({ 26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6}); // mode 14
            db({  7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25}); // mode 14
            db({ 20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12}); // mode 14
            db({  1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31}); // mode 14
            db({ 14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18}); // mode 14
            db({ 27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5}); // mode 14
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 14
            db({ 17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15}); // mode 15
            db({  2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30}); // mode 15
            db({ 19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13}); // mode 15
            db({  4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28}); // mode 13
            db({ 21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11}); // mode 15
            db({  6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26}); // mode 15
            db({ 23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9}); // mode 15
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 15
            db({ 21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11}); // mode 16
            db({ 10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22}); // mode 16
            db({ 31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1}); // mode 16
            db({ 20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12}); // mode 16
            db({  9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23}); // mode 16
            db({ 30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2}); // mode 16
            db({ 19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13}); // mode 16
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 16
            db({ 26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6}); // mode 17
            db({ 20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12}); // mode 17
            db({ 14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18}); // mode 17
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 17
            db({  2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30}); // mode 17
            db({ 28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4}); // mode 17
            db({ 22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10}); // mode 17
            db({ 16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16}); // mode 17

            align(32);
            L(dfm_ver);
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 18
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 18
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 18
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 18
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 18
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 18
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 18
            db({ 32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32}); // mode 18
            db({ 26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6}); // mode 19 == 17
            db({ 20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12}); // mode 19 == 17
            db({ 14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18}); // mode 19 == 17
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 19 == 17
            db({  2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30}); // mode 19 == 17
            db({ 28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4}); // mode 19 == 17
            db({ 22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10}); // mode 19 == 17
            db({ 16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16}); // mode 19 == 17
            db({ 21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11}); // mode 20 == 16
            db({ 10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22}); // mode 20 == 16
            db({ 31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1}); // mode 20 == 16
            db({ 20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12}); // mode 20 == 16
            db({  9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23}); // mode 20 == 16
            db({ 30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2}); // mode 20 == 16
            db({ 19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13}); // mode 20 == 16
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 20 == 16
            db({ 17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15}); // mode 21 == 15
            db({  2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30}); // mode 21 == 15
            db({ 19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13}); // mode 21 == 15
            db({  4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28}); // mode 21 == 15
            db({ 21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11,  21,  11}); // mode 21 == 15
            db({  6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26}); // mode 21 == 15
            db({ 23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9}); // mode 21 == 15
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 21 == 15          
            db({ 13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19}); // mode 22 == 14
            db({ 26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6}); // mode 22 == 14
            db({  7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25}); // mode 22 == 14
            db({ 20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12}); // mode 22 == 14
            db({  1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31}); // mode 22 == 14
            db({ 14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18}); // mode 22 == 14
            db({ 27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5}); // mode 22 == 14
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 22 == 14
            db({  9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23,   9,  23}); // mode 23 == 13
            db({ 18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14}); // mode 23 == 13
            db({ 27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5}); // mode 23 == 13
            db({  4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28}); // mode 23 == 13
            db({ 13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19,  13,  19}); // mode 23 == 13
            db({ 22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10}); // mode 23 == 13
            db({ 31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1,  31,   1}); // mode 23 == 13
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 23 == 13
            db({  5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27,   5,  27}); // mode 24 == 12
            db({ 10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22}); // mode 24 == 12
            db({ 15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17,  15,  17}); // mode 24 == 12
            db({ 20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12}); // mode 24 == 12
            db({ 25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7,  25,   7}); // mode 24 == 12
            db({ 30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2}); // mode 24 == 12
            db({  3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29,   3,  29}); // mode 24 == 12
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 24 == 12
            db({  2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30,   2,  30}); // mode 25 == 11
            db({  4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28,   4,  28}); // mode 25 == 11
            db({  6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26,   6,  26}); // mode 25 == 11
            db({  8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24,   8,  24}); // mode 25 == 11
            db({ 10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22,  10,  22}); // mode 25 == 11
            db({ 12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20,  12,  20}); // mode 25 == 11
            db({ 14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18,  14,  18}); // mode 25 == 11
            db({ 16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16}); // mode 25 == 11
        }
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner
            auto &g5 = reg64(5);

            mov(ul, byte[r1 - 1]);

            // Set the correct masks
            if (mode < 18)
            {
                // Set the proper mask index
                mode_mask = mode - 11;
                lea(g5, ptr[rip + dfm_hor]);

                //Loading all the samples
                movdqu(xmm0, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                movdqa(xmm1, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)
            }
            else
            {
                // Set the proper mask index
                mode_mask = mode - 18;
                lea(g5, ptr[rip + dfm_ver]);

                //Loading all the samples
                movdqu(xmm1, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                movdqa(xmm0, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)
            }


            // Prepare left and up (ul = corner)
            pinsrq(xmm2, ul,  0); // ul
            pextrb(r8d, xmm2, 0); // Extract the UL
            pslldq(xmm0, 1);      // Shift to add a position
            pinsrb(xmm0, r8d, 0); // Insert  the UL in position 0

#define BILINEAR(n)                                               \
            pshufb(xmm2, ptr[rip + maskLine]);                    \
            pmaddubsw(xmm2, ptr[g5 + (((mode_mask*8) +  n)*16)]); \
            paddw(xmm2, ptr[rip + add16]);                        \
            psrlw(xmm2, 5);                                       \
            pshufb(xmm2, ptr[rip + maskshuffle8]);

            switch (mode)
            {
                case 11:
                case 25:
                     // No shift or substitution required
                     movdqa(xmm2, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(1);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(2);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(3);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(4);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(5);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(6);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(7);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                case 12:
                case 24:

                     pslldq(xmm1, 1);      // Shift to add a position
                     pinsrb(xmm1, r8d, 0); // Insert  the UL in position 0

                     movdqa(xmm2, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(1);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(2);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(3);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(4);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(5);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 1);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 6); // Extract the U/L1 (Note that it is  posistion 6)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(6);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(7);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                case 13:
                case 23:

                     pslldq(xmm1, 1);      // Shift to add a position
                     pinsrb(xmm1, r8d, 0); // Insert  the UL in position 0

                     movdqa(xmm2, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(1);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(2);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 0);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 4); // Extract the U/L1 (Note that it is  posistion 4)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(3);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(4);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(5);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(6);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 0);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 7); // Extract the U/L1 (Note that it is  posistion 7)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(7);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                case 14:
                case 22:
                     pslldq(xmm1, 1);      // Shift to add a position
                     pinsrb(xmm1, r8d, 0); // Insert  the UL in position 0

                     movdqa(xmm2, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(1);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 1);


                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 2); // Extract the U/L1 (Note that it is  posistion 2)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(2);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(3);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 1);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 5); // Extract the U/L1 (Note that it is  posistion 5)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(4);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(5);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(6);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 0);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 7); // Extract the U/L1 (Note that it is  posistion 7)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(7);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                case 15:
                case 21:
                     pslldq(xmm1, 1);      // Shift to add a position
                     pinsrb(xmm1, r8d, 0); // Insert  the UL in position 0

                     movdqa(xmm2, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 0);


                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 2); // Extract the U/L1 (Note that it is  posistion 2)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(1);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(2);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 0);


                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 4); // Extract the U/L1 (Note that it is  posistion 4)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(3);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(4);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 0);


                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 6); // Extract the U/L1 (Note that it is  posistion 6)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(5);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(6);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 0);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 8); // Extract the U/L1 (Note that it is  posistion 8)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(7);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                case 16:
                case 20:
                     pslldq(xmm1, 1);      // Shift to add a position
                     pinsrb(xmm1, r8d, 0); // Insert  the UL in position 0

                     movdqa(xmm2, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 0);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 2); // Extract the U/L1 (Note that it is  posistion 2)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(1);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 1);
                     movdqa(xmm2, xmm0);
                     BILINEAR(2);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 0);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 3); // Extract the U/L1 (Note that it is  posistion 3)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(3);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 1);


                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 5); // Extract the U/L1 (Note that it is  posistion 5)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(4);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(5);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 1);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 6); // Extract the U/L1 (Note that it is  posistion 6)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(6);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 0);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 8); // Extract the U/L1 (Note that it is  posistion 8)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(7);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                case 17:
                case 19:
                     pslldq(xmm1, 1);      // Shift to add a position
                     pinsrb(xmm1, r8d, 0); // Insert  the UL in position 0

                     movdqa(xmm2, xmm0);
                     BILINEAR(0);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 0);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 1); // Extract the U/L1 (Note that it is  posistion 1)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(1);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm3, rax, 1);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 2); // Extract the U/L1 (Note that it is  posistion 2)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(2);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 0);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1,4); // Extract the U/L1 (Note that it is  posistion 4)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(3);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm4, rax, 1);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 5); // Extract the U/L1 (Note that it is  posistion 5)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(4);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 0);
                     movdqa(xmm2, xmm0);
                     BILINEAR(5);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm5, rax, 1);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 6); // Extract the U/L1 (Note that it is  posistion 6)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(6);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 0);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 7); // Extract the U/L1 (Note that it is  posistion 7)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     movdqa(xmm2, xmm0);
                     BILINEAR(7);
                     pextrq(rax, xmm2, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                case 18:
                     pslldq(xmm1, 1);      // Shift to add a position
                     pinsrb(xmm1, r8d, 0); // Insert  the UL in position 0
                     
                     pextrq(rax, xmm0, 0);
                     pinsrq(xmm3, rax, 0);
                     
                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 1); // Extract the U/L1 (Note that it is  posistion 1)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     pextrq(rax, xmm0, 0);
                     pinsrq(xmm3, rax, 1);
                     
                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 2); // Extract the U/L1 (Note that it is  posistion 2)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     pextrq(rax, xmm0, 0);
                     pinsrq(xmm4, rax, 0);
                     
                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 3); // Extract the U/L1 (Note that it is  posistion 3)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     pextrq(rax, xmm0, 0);
                     pinsrq(xmm4, rax, 1);
                     
                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 4); // Extract the U/L1 (Note that it is  posistion 4)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     pextrq(rax, xmm0, 0);
                     pinsrq(xmm5, rax, 0);

                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 5); // Extract the U/L1 (Note that it is  posistion 5)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     pextrq(rax, xmm0, 0);
                     pinsrq(xmm5, rax, 1);
                     
                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 6); // Extract the U/L1 (Note that it is  posistion 6)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     pextrq(rax, xmm0, 0);
                     pinsrq(xmm6, rax, 0);
                     
                     pslldq(xmm0, 1);      // Shift to add a position
                     pextrb(r8d, xmm1, 7); // Extract the U/L1 (Note that it is  posistion 7)
                     pinsrb(xmm0, r8d, 0); // Insert  the U/L1 in position 0
                     pextrq(rax, xmm0, 0);
                     pinsrq(xmm6, rax, 1);
                break;

                default: assert(0);
                break;
            }
#undef BILINEAR

            // Apply bilinear interpolation if not mode 18
            // transpose the pixels
            if (mode < 18)
            {
                //db({ 0xcc });
                movdqa(xmm0, xmm3); 
                movdqa(xmm1, xmm4); 
                punpckhbw(xmm0, xmm1);
                punpcklbw(xmm3, xmm4);

                movdqa(xmm1, xmm0); 
                movdqa(xmm2, xmm3); 
                punpckhbw(xmm2, xmm1);
                punpcklbw(xmm3, xmm0);

                movdqa(xmm0, xmm5); 
                movdqa(xmm1, xmm6); 
                punpckhbw(xmm0, xmm1);
                punpcklbw(xmm5, xmm6);

                movdqa(xmm4, xmm0); 
                movdqa(xmm6, xmm5); 
                punpckhbw(xmm6, xmm4);
                punpcklbw(xmm5, xmm0);

                movdqa(xmm0, xmm3);  //  C | A 
                movdqa(xmm1, xmm2);  //  G | E
                movdqa(xmm4, xmm5);  //  D | B
                movdqa(xmm7, xmm6);  //  H | F
                
                punpckldq(xmm0, xmm4); // B | A
                punpckhdq(xmm3, xmm5); // D | C
                punpckldq(xmm1, xmm7); // F | E
                punpckhdq(xmm2, xmm6); // H | G

                // Store the pixels
                pextrq(ptr[r0], xmm0, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm0, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                pextrq(ptr[r0], xmm3, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm3, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                pextrq(ptr[r0], xmm1, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm1, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

                pextrq(ptr[r0], xmm2, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm2, 1);

            }
            else if (mode >= 18)
            {
                // Store the pixels
                pextrq(ptr[r0], xmm3, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm3, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm4, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm4, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm5, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm5, 1);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm6, 0);
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                pextrq(ptr[r0], xmm6, 1);
            }
        }
    };

template <typename Sample>
struct IntraPredAng8x8_10_filt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng8x8_10_filt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label maskleft;
        Label flip0;
        Label flip1;
        Label flip2;
        Label flip3;
        int mode;

        void data()
        {
            align(32);
            L(constant_0x00000000000000000000000000000000);
            dw({ 0 }, 8);
         
            align(32);
            L(maskleft);
            db({7, 6, 5, 4, 3, 2, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(flip0);
            db({  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1});
            align(32);
            L(flip1);
            db({  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3});
            align(32);
            L(flip2);
            db({  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5});
            align(32);
            L(flip3);
            db({  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7});
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner

            mov(ul, byte[r1 - 1]);

            // Loading all the samples
            movq(xmm0, ptr[r1 - 0x9]);        // load vertical   data [0 + 56] = pos 56, 57, 58, 59, 60, 61, 62, 63.
            pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
            movq(xmm1, ptr[r1]);        // load horizontal data [0 + 64] = pos 64, 65, 66, 67, 68, 69, 70, 71. (aligned)

            //db({ 0xcc });
            // Repeat the same 8 pixel on all ther register
            movdqa(xmm3, xmm0);
            movdqa(xmm4, xmm0);
            movdqa(xmm5, xmm0);
            movdqa(xmm6, xmm0);

            // Flip the pixels (transpose)
            pshufb(xmm3, ptr[rip + flip0]);
            pshufb(xmm4, ptr[rip + flip1]);
            pshufb(xmm5, ptr[rip + flip2]);
            pshufb(xmm6, ptr[rip + flip3]);

            // Filter
            // Prepare register with ul and L0 only
            pinsrb(xmm2, ul, 0);
            pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
            pshufb(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]);    // L0
            /// Prepare the l and ul unpacking them into 16bits
            punpcklbw(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]); // L0
            punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]); // up
            punpcklbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]); // ul 

            // Subtract the UL to from UPs
            psubw(xmm1, xmm2);
            // Shift right by 1
            psraw(xmm1, 1);
            // add left with up 1
            paddw(xmm0, xmm1);
            /// Packing them back tp 8bits
            packuswb(xmm0, xmm0); 

            // Store the pixels
            pextrq(ptr[r0], xmm0, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm3, 1);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm4, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm4, 1);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm5, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm5, 1);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm6, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm6, 1);
        }
    };

template <typename Sample>
struct IntraPredAng8x8_26_filt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng8x8_26_filt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label maskleft;

        int mode;
        
        void data()
        {
            align(32);
            L(constant_0x00000000000000000000000000000000);
            dw({ 0 }, 8);

            align(32);
            L(maskleft);
            db({7, 6, 5, 4, 3, 2, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8}); // invert the order of pixel as lefts are in opposite direction
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner

            mov(ul, byte[r1 - 1]);

            //db({ 0xcc });

            //Loading all the samples
            movq(xmm1, ptr[r1 - 0x9]);        //load vertical   data [0 + 56] = pos 56, 57, 58, 59, 60, 61, 62, 63. (unaligned)
            pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
            movq(xmm0, ptr[r1]);        // load horizontal data [0 + 64] = pos 64, 65, 66, 67 (aligned)

            // Save UPs
            movdqa(xmm4, xmm0);


            // Filter
            // Prepare register with ul and L0 only
            pinsrb(xmm2, ul, 0);
            pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
            pshufb(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]);    // U0
            /// Prepare the l and ul unpacking them into 16bits
            punpcklbw(xmm0, ptr[rip + constant_0x00000000000000000000000000000000]); // U0
            punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]); // left
            punpcklbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]); // ul 

            // Subtract the UL to from UPs
            psubw(xmm1, xmm2);
            // Shift right by 1
            psraw(xmm1, 1);
            // add left with up 1
            paddw(xmm0, xmm1);
            /// Packing them back tp 8bits
            packuswb(xmm0, xmm0); 

            // Store the pixels
#define INSERT_LINE(last)                               \
            pinsrb(xmm4, r8d, 0);                       \
            movq(ptr[r0], xmm4);                        \
            if (!last)                                  \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            // Extract the byte from the left filtered sample (sample 0)
            // --- Save the 1st row ----
            pextrb(r8d, xmm0, 0);
            INSERT_LINE(0);
            // Extract the byte from the left filtered sample (sample 1)
            // --- Save the 2nd row ----
            pextrb(r8d, xmm0, 1);
            INSERT_LINE(0);
            // --- Save the 3rd row ----
            // Extract the byte from the left filtered sample (sample 2)
            pextrb(r8d, xmm0, 2);
            INSERT_LINE(0);
            // --- Save the 4th row ----
            // Extract the byte from the left filtered sample (sample 3)
            pextrb(r8d, xmm0, 3);
            INSERT_LINE(0);
            // --- Save the 5th row ----
            // Extract the byte from the left filtered sample (sample 4)
            pextrb(r8d, xmm0, 4);
            INSERT_LINE(0);
            // --- Save the 6th row ----
            // Extract the byte from the left filtered sample (sample 5)
            pextrb(r8d, xmm0, 5);
            INSERT_LINE(0);
            // --- Save the 7th row ----
            // Extract the byte from the left filtered sample (sample 7)
            pextrb(r8d, xmm0, 6);
            INSERT_LINE(0);
            // --- Save the 8th row ----
            // Extract the byte from the left filtered sample (sample 7)
            pextrb(r8d, xmm0, 7);
            INSERT_LINE(1);
#undef INSERT_LINE
        }
    };

template <typename Sample>
struct IntraPredAng8x8_10_nofilt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng8x8_10_nofilt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label maskleft;
        Label flip0;
        Label flip1;
        Label flip2;
        Label flip3;
        int mode;

        void data()
        {
            align(32);
            L(maskleft);
            db({7, 6, 5, 4, 3, 2, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(flip0);
            db({  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1});
            align(32);
            L(flip1);
            db({  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3});
            align(32);
            L(flip2);
            db({  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5});
            align(32);
            L(flip3);
            db({  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7});
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours


            // Loading all the samples
            // Need to read 2 int as we need the left and down left (dl) 
            movq(xmm0, ptr[r1 - 0x9]);        // load vertical   data [0 + 56] = pos 56, 57, 58, 59, 60, 61, 62, 63, .
            pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

            //db({ 0xcc });
            // Repeat the same 8 pixel on all ther register
            movdqa(xmm1, xmm0);
            movdqa(xmm2, xmm0);
            movdqa(xmm3, xmm0);

            // Flip the pixels (transpose)
            pshufb(xmm0, ptr[rip + flip0]);
            pshufb(xmm1, ptr[rip + flip1]);
            pshufb(xmm2, ptr[rip + flip2]);
            pshufb(xmm3, ptr[rip + flip3]);
            // Store the pixels
            pextrq(ptr[r0], xmm0, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm0, 1);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm1, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm1, 1);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm2, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm2, 1);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm3, 0);
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
            pextrq(ptr[r0], xmm3, 1);
        }
    };


template <typename Sample>
struct IntraPredAng8x8_26_nofilt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng8x8_26_nofilt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        int mode;
        
        void data()
        {
            align(32);
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner

            //Loading all the samples
            movq(xmm0, ptr[r1]); // load horizontal data [0 + 64] = pos 64, 65, 66, 67, 68, 69, 70, 71 (aligned)

            //db({ 0xcc });

            // Store the pixels
#define INSERT_LINE(last)                               \
            movq(ptr[r0], xmm0);                        \
            if (!last)                                  \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(1);
#undef INSERT_LINE
        }
    };

/// ============================================================================================================================
template <typename Sample>
struct IntraPredAng16x16_2to9_27to34_PosAng_SSE_8bits :
    Jit::Function
    {
        IntraPredAng16x16_2to9_27to34_PosAng_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }
        Label add16;
        Label maskleft;
        Label maskLine;
        Label maskshuffle8;
        Label dfm_hor;
        Label dfm_ver;

        int mode;
        int mode_mask;

        void data()
        {
            align(32);
            L(add16);
            dw({16, 16, 16, 16, 16, 16, 16, 16}, 1);

            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(maskLine);
            db({0, 1, 1, 2, 2, 3,  3,  4,  4, 5, 5, 6, 6, 7, 7, 8});

            align(32);
            L(maskshuffle8);
            db({0, 2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 0, 0, 0, 0, 0}); 



            align(32);
            L(dfm_hor);
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 0
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 1
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 2
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 3
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 3
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 3
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 3
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 3
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 3
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 3
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 3
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 3
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 3
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 3
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 3
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 3
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 3
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 3
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 3
            dw({5387, 5387, 5387, 5387, 5387, 5387, 5387, 5387}); // mode 4
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 4
            dw({7937, 7937, 7937, 7937, 7937, 7937, 7937, 7937}); // mode 4
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 4
            dw({2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327}); // mode 4
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 4
            dw({4877, 4877, 4877, 4877, 4877, 4877, 4877, 4877}); // mode 4
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 4
            dw({7427, 7427, 7427, 7427, 7427, 7427, 7427, 7427}); // mode 4
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 4
            dw({1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817}); // mode 4
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 4
            dw({4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367}); // mode 4
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 4
            dw({6917, 6917, 6917, 6917, 6917, 6917, 6917, 6917}); // mode 4
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 4
            dw({4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367}); // mode 5
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 5
            dw({4877, 4877, 4877, 4877, 4877, 4877, 4877, 4877}); // mode 5
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 5
            dw({5387, 5387, 5387, 5387, 5387, 5387, 5387, 5387}); // mode 5
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 5
            dw({5897, 5897, 5897, 5897, 5897, 5897, 5897, 5897}); // mode 5
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 5
            dw({6407, 6407, 6407, 6407, 6407, 6407, 6407, 6407}); // mode 5
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 5
            dw({6917, 6917, 6917, 6917, 6917, 6917, 6917, 6917}); // mode 5
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 5
            dw({7427, 7427, 7427, 7427, 7427, 7427, 7427, 7427}); // mode 5
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 5
            dw({7937, 7937, 7937, 7937, 7937, 7937, 7937, 7937}); // mode 5
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 5
            dw({3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347}); // mode 6
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 6
            dw({1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817}); // mode 6
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 6
            dw({ 287,  287,  287,  287,  287,  287,  287,  287}); // mode 6
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 6
            dw({6917, 6917, 6917, 6917, 6917, 6917, 6917, 6917}); // mode 6
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 6
            dw({5387, 5387, 5387, 5387, 5387, 5387, 5387, 5387}); // mode 6
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 6
            dw({3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857}); // mode 6
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 6
            dw({2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327}); // mode 6
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 6
            dw({ 797,  797,  797,  797,  797,  797,  797,  797}); // mode 6
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 6
            dw({2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327}); // mode 7
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 7
            dw({6917, 6917, 6917, 6917, 6917, 6917, 6917, 6917}); // mode 7
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 7
            dw({3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347}); // mode 7
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 7
            dw({7937, 7937, 7937, 7937, 7937, 7937, 7937, 7937}); // mode 7
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 7
            dw({4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367}); // mode 7
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 7
            dw({ 797,  797,  797,  797,  797,  797,  797,  797}); // mode 7
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 7
            dw({5387, 5387, 5387, 5387, 5387, 5387, 5387, 5387}); // mode 7
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 7
            dw({1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817}); // mode 7
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 7
            dw({1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307}); // mode 8
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 8
            dw({3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857}); // mode 8
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 8
            dw({6407, 6407, 6407, 6407, 6407, 6407, 6407, 6407}); // mode 8
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 8
            dw({ 797,  797,  797,  797,  797,  797,  797,  797}); // mode 8
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 8
            dw({3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347}); // mode 8
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 8
            dw({5897, 5897, 5897, 5897, 5897, 5897, 5897, 5897}); // mode 8
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 8
            dw({ 287,  287,  287,  287,  287,  287,  287,  287}); // mode 8
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 8
            dw({2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837}); // mode 8
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 8
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 9
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 9
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 9
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 9
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 9
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 9
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 9
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 9
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 9
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 9
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 9
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 9
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 9
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 9
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 9
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 9


            align(32);
            L(dfm_ver);
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 27 == 9
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 27 == 9
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 27 == 9
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 27 == 9
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 27 == 9
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 27 == 9
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 27 == 9
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 27 == 9
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 27 == 9 
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 27 == 9
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 27 == 9
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 27 == 9
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 27 == 9
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 27 == 9
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 27 == 9
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 27 == 9
            dw({1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307}); // mode 28 == 8
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 28 == 8
            dw({3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857}); // mode 28 == 8
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 28 == 8
            dw({6407, 6407, 6407, 6407, 6407, 6407, 6407, 6407}); // mode 28 == 8
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 28 == 8
            dw({ 797,  797,  797,  797,  797,  797,  797,  797}); // mode 28 == 8
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 28 == 8
            dw({3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347}); // mode 28 == 8
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 28 == 8
            dw({5897, 5897, 5897, 5897, 5897, 5897, 5897, 5897}); // mode 28 == 8
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 28 == 8
            dw({ 287,  287,  287,  287,  287,  287,  287,  287}); // mode 28 == 8
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 28 == 8
            dw({2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837}); // mode 28 == 8
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 28 == 8
            dw({2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327}); // mode 29 == 7
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 29 == 7
            dw({6917, 6917, 6917, 6917, 6917, 6917, 6917, 6917}); // mode 29 == 7
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 29 == 7
            dw({3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347}); // mode 29 == 7
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 29 == 7
            dw({7937, 7937, 7937, 7937, 7937, 7937, 7937, 7937}); // mode 29 == 7
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 29 == 7
            dw({4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367}); // mode 29 == 7
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 29 == 7
            dw({ 797,  797,  797,  797,  797,  797,  797,  797}); // mode 29 == 7
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 29 == 7
            dw({5387, 5387, 5387, 5387, 5387, 5387, 5387, 5387}); // mode 29 == 7
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 29 == 7
            dw({1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817}); // mode 29 == 7
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 29 == 7
            dw({3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347}); // mode 30 == 6
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 30 == 6
            dw({1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817}); // mode 30 == 6
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 30 == 6
            dw({ 287,  287,  287,  287,  287,  287,  287,  287}); // mode 30 == 6
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 30 == 6
            dw({6917, 6917, 6917, 6917, 6917, 6917, 6917, 6917}); // mode 30 == 6
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 30 == 6
            dw({5387, 5387, 5387, 5387, 5387, 5387, 5387, 5387}); // mode 30 == 6
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 30 == 6
            dw({3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857}); // mode 30 == 6
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 30 == 6
            dw({2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327}); // mode 30 == 6
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 30 == 6
            dw({ 797,  797,  797,  797,  797,  797,  797,  797}); // mode 30 == 6
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 30 == 6
            dw({4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367}); // mode 31 == 5
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 31 == 5
            dw({4877, 4877, 4877, 4877, 4877, 4877, 4877, 4877}); // mode 31 == 5
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 31 == 5
            dw({5387, 5387, 5387, 5387, 5387, 5387, 5387, 5387}); // mode 31 == 5
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 31 == 5
            dw({5897, 5897, 5897, 5897, 5897, 5897, 5897, 5897}); // mode 31 == 5
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 31 == 5
            dw({6407, 6407, 6407, 6407, 6407, 6407, 6407, 6407}); // mode 31 == 5
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 31 == 5
            dw({6917, 6917, 6917, 6917, 6917, 6917, 6917, 6917}); // mode 31 == 5
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 31 == 5
            dw({7427, 7427, 7427, 7427, 7427, 7427, 7427, 7427}); // mode 31 == 5
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 31 == 5
            dw({7937, 7937, 7937, 7937, 7937, 7937, 7937, 7937}); // mode 31 == 5
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 31 == 5
            dw({5387, 5387, 5387, 5387, 5387, 5387, 5387, 5387}); // mode 32 == 4
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 32 == 4
            dw({7937, 7937, 7937, 7937, 7937, 7937, 7937, 7937}); // mode 32 == 4
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 32 == 4
            dw({2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327}); // mode 32 == 4
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 32 == 4
            dw({4877, 4877, 4877, 4877, 4877, 4877, 4877, 4877}); // mode 32 == 4
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 32 == 4
            dw({7427, 7427, 7427, 7427, 7427, 7427, 7427, 7427}); // mode 32 == 4
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 32 == 4
            dw({1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817}); // mode 32 == 4
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 32 == 4
            dw({4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367}); // mode 32 == 4
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 32 == 4
            dw({6917, 6917, 6917, 6917, 6917, 6917, 6917, 6917}); // mode 32 == 4
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 32 == 4
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 33 == 3
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 33 == 3
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 33 == 3
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 33 == 3
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 33 == 3
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 33 == 3
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 33 == 3
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 33 == 3
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 33 == 3
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 33 == 3
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 33 == 3
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 33 == 3
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 33 == 3
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 33 == 3
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 33 == 3
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 33 == 3
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 34 == 2
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0  = arg64(0); // Sample *dst
            auto &r3  = arg64(1); // dst_stride
            auto &r1  = arg64(2); // const Sample *neighbours
            auto ul   = arg64(3); // neigh_corner
            auto &g4  = reg64(4);

            auto &g6  = reg64(5);
            auto &g7  = reg64(11);
            auto &g8  = reg64(12);
            auto &g9  = reg64(13);
            auto &g10 = reg64(14);

            int size_1 =   sizeof(Sample);
            int size_2 = 2*sizeof(Sample);
           
            if ((mode != 2) && (mode != 34))
            {
                lea(g6,  ptr[r3 * size_1]); // stride
                lea(g7,  ptr[r3 * size_2]); // stride * 2
                lea(g8,  ptr[g7 + g6]);     // stride * 3
                lea(g9,  ptr[g8 + g6]);     // stride * 4
                lea(g10, ptr[r0 + g9]);     // stride * 4
            }

            //Loading all the samples
            if (mode < 18)
            {
                 // Set the proper mask index
                mode_mask = mode;
                lea(g4, ptr[rip + dfm_hor]);
            }
            else
            {
                // Set the proper mask index
                mode_mask = mode - 27;
                lea(g4, ptr[rip + dfm_ver]);
            }

#define TRANSPOSE_AND_COPY_8x8(mode_in, stride, last)              \
            if ((mode_in < 18) && (mode_in != 2))                  \
            {                                                      \
                movdqa(xmm8, xmm3);                                \
                movdqa(xmm9, xmm4);                                \
                punpckhbw(xmm8, xmm9);                             \
                punpcklbw(xmm3, xmm4);                             \
                movdqa(xmm9, xmm8);                                \
                movdqa(xmm10, xmm3);                               \
                punpckhbw(xmm10, xmm9);                            \
                punpcklbw(xmm3, xmm8);                             \
                movdqa(xmm8, xmm5);                                \
                movdqa(xmm9, xmm6);                                \
                punpckhbw(xmm8, xmm9);                             \
                punpcklbw(xmm5, xmm6);                             \
                movdqa(xmm4, xmm8);                                \
                movdqa(xmm6, xmm5);                                \
                punpckhbw(xmm6, xmm4);                             \
                punpcklbw(xmm5, xmm8);                             \
                movdqa(xmm8, xmm3);     /* C | A */                \
                movdqa(xmm9, xmm10);    /* G | E */                \
                movdqa(xmm4, xmm5);     /* D | B */                \
                movdqa(xmm7, xmm6);     /* H | F */                \
                punpckldq(xmm8, xmm4);  /* B | A */                \
                punpckhdq(xmm3, xmm5);  /* D | C */                \
                punpckldq(xmm9, xmm7);  /* F | E */                \
                punpckhdq(xmm10, xmm6); /* H | G */                \
                pextrq(ptr[r0  +       (stride*8) ], xmm8, 0);     \
                pextrq(ptr[r0  + (g6 + (stride*8))], xmm8, 1);     \
                pextrq(ptr[r0  + (g7 + (stride*8))], xmm3, 0);     \
                pextrq(ptr[r0  + (g8 + (stride*8))], xmm3, 1);     \
                pextrq(ptr[g10 +       (stride*8) ], xmm9, 0);     \
                pextrq(ptr[g10 + (g6 + (stride*8))], xmm9, 1);     \
                pextrq(ptr[g10 + (g7 + (stride*8))], xmm10, 0);    \
                pextrq(ptr[g10 + (g8 + (stride*8))], xmm10, 1);    \
            }                                                      \
            else if ((mode_in >= 18) && (mode_in != 34))           \
            {                                                      \
                pextrq(ptr[r0  +       (stride*8) ], xmm3, 0);     \
                pextrq(ptr[r0  + (g6 + (stride*8))], xmm3, 1);     \
                pextrq(ptr[r0  + (g7 + (stride*8))], xmm4, 0);     \
                pextrq(ptr[r0  + (g8 + (stride*8))], xmm4, 1);     \
                pextrq(ptr[g10 +       (stride*8) ], xmm5, 0);     \
                pextrq(ptr[g10 + (g6 + (stride*8))], xmm5, 1);     \
                pextrq(ptr[g10 + (g7 + (stride*8))], xmm6, 0);     \
                pextrq(ptr[g10 + (g8 + (stride*8))], xmm6, 1);     \
            }                                                      \
            if ((stride == 1) && (!last))                          \
            {                                                      \
                lea(r0, ptr[r0 + g6*8]); /* Move 8 lines */        \
                lea(g10, ptr[r0 + g9]);  /* stride * 4   */        \
            }

#define BILINEARN(n, output, posout)                               \
            pshufb(xmm7, ptr[rip + maskLine]);                     \
            pmaddubsw(xmm7, ptr[g4 + (((mode_mask*16) +  n)*16)]); \
            paddw(xmm7, ptr[rip + add16]);                         \
            psrlw(xmm7, 5);                                        \
            pshufb(xmm7, ptr[rip + maskshuffle8]);                 \
            pextrq(rax, xmm7, 0);                                  \
            pinsrq(output, rax, posout);

            switch (mode)
            {
                case 2:
                case 34:
                {
                    //Loading all the samples
                    if (mode == 2)
                    {
                        movdqu(xmm1, ptr[r1 - 0x21]); //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                        movdqu(xmm0, ptr[r1 - 0x11]); //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                        pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                        pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    }
                    else
                    {
                        movdqa(xmm0, ptr[r1]); //load horizontal data [0 + 64] = pos 64...79. (aligned)  0 --> 15
                        movdqa(xmm1, ptr[r1 + 0x10]); //load horizontal data [0 + 80] = pos 80...95. (aligned) 16 --> 31
                    }

                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 1);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 2);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 3);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 4);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 5);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 6);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 7);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 8);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 9);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 10);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 11);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 12);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 13);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 14);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 15);
                    movdqa(ptr[r0], xmm3);
                    lea(r0, ptr[r0 + r3 * sizeof(Sample)]);
                    movdqa(xmm3, xmm1);
                    palignr(xmm3, xmm0, 16);
                    movdqa(ptr[r0], xmm3);
                }
                break;
                case 3:
                {
                    //Loading all the samples
                    movdqu(xmm0, ptr[r1 - 0x11]); //load vertical   data [0 + 32] = pos 48...64. (aligned) 15 --> 0
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    movdqu(xmm1, ptr[r1 - 0x21]); //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    lddqu(xmm1, ptr[r1 + 0x18 - 0x41]); //load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 25
                    lddqu(xmm0, ptr[r1 + 0x28 - 0x41]); //load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                }
                break;
                case 33:
                {
                    //Loading all the samples
                    movdqa(xmm0, ptr[r1]); //load horizontal data [0 + 64] = pos 64...79. (aligned)  0 --> 15
                    movdqa(xmm1, ptr[r1 + 0x10]); //load horizontal data [0 + 80] = pos 80...95. (aligned) 16 --> 31

                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    lddqu(xmm11, ptr[r1 + 0x8]); //load horizontal data [0 + 72] = pos 72...87 (aligned)   8 --> 23
                    lddqu(xmm12, ptr[r1 + 0x18]); //load horizontal data [0 + 88] = pos 88..103 (aligned)  23 --> 38
                    
                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 13);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                }
                break;
                case 4:
                    //Loading all the samples
                    movdqu(xmm0, ptr[r1 - 0x11]); //load vertical   data [0 + 32] = pos 48...64. (aligned) 15 --> 0
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    movdqu(xmm1, ptr[r1 - 0x21]); //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    lddqu(xmm1, ptr[r1 + 0x18 - 0x41]); //load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 25
                    lddqu(xmm0, ptr[r1 + 0x28 - 0x41]); //load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 32:
                    //Loading all the samples
                    movdqa(xmm0, ptr[r1]); //load horizontal data [0 + 64] = pos 64...79. (aligned)  0 --> 15

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    lddqu(xmm11, ptr[r1 + 0x8]); //load horizontal data [0 + 72] = pos 72...87 (aligned)   8 --> 23
                    lddqu(xmm12, ptr[r1 + 0x18]); //load horizontal data [0 + 88] = pos 88..103 (aligned)  23 --> 38

                    movdqa(xmm7, xmm12);
                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    movdqa(xmm1, ptr[r1 + 0x10]); //load horizontal data [0 + 80] = pos 80...95. (aligned) 16 --> 31

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 10);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 5:
                    //Loading all the samples
                    movdqu(xmm0, ptr[r1 - 0x11]); //load vertical   data [0 + 32] = pos 48...64. (aligned) 15 --> 0
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    movdqu(xmm1, ptr[r1 - 0x21]); //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    lddqu(xmm1, ptr[r1 + 0x18 - 0x41]); //load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 25
                    lddqu(xmm0, ptr[r1 + 0x28 - 0x41]); //load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 31:
                    //Loading all the samples
                    movdqa(xmm0, ptr[r1]); //load horizontal data [0 + 64] = pos 64...79. (aligned)  0 --> 15

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    lddqu(xmm11, ptr[r1 + 0x8]); //load horizontal data [0 + 72] = pos 72...87 (aligned)   8 --> 23
                    lddqu(xmm12, ptr[r1 + 0x18]); //load horizontal data [0 + 88] = pos 88..103 (aligned)  23 --> 38

                    movdqa(xmm7, xmm12);
                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    movdqa(xmm1, ptr[r1 + 0x10]); //load horizontal data [0 + 80] = pos 80...95. (aligned) 16 --> 31

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 6:
                    //Loading all the samples
                    movdqu(xmm0, ptr[r1 - 0x11]); //load vertical   data [0 + 32] = pos 48...64. (aligned) 15 --> 0
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0,xmm3, 0);
                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    movdqu(xmm1, ptr[r1 + 0x20 - 0x41]); //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    lddqu(xmm1, ptr[r1 + 0x18 - 0x41]); //load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 25
                    lddqu(xmm0, ptr[r1 + 0x28 - 0x41]); //load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 30:
                    //Loading all the samples
                    movdqa(xmm0, ptr[r1]); //load horizontal data [0 + 64] = pos 64...79. (aligned)  0 --> 15

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    lddqu(xmm11, ptr[r1 + 0x8]); //load horizontal data [0 + 72] = pos 72...87 (aligned)   8 --> 23
                    lddqu(xmm12, ptr[r1 + 0x18]); //load horizontal data [0 + 88] = pos 88..103 (aligned)  23 --> 38

                    movdqa(xmm7, xmm12);
                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    movdqa(xmm7, xmm11);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    movdqa(xmm1, ptr[r1 + 0x10]); //load horizontal data [0 + 80] = pos 80...95. (aligned) 16 --> 31

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    //db({ 0xcc });
                    //lddqu(xmm0, ptr[r1 + 0x48]); //load horizontal data [0 + 72] = pos 72...87 (aligned)   8 --> 23
                    //lddqu(xmm1, ptr[r1 + 0x58]); //load horizontal data [0 + 88] = pos 88..103 (aligned)  23 --> 38

                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 7:
                    //Loading all the samples
                    movdqu(xmm0, ptr[r1 - 0x11]); //load vertical   data [0 + 32] = pos 48...64. (aligned) 15 --> 0
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    movdqa(xmm1, ptr[r1 + 0x20]); //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    lddqu(xmm1, ptr[r1 + 0x18 - 0x41]); //load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 25
                    lddqu(xmm0, ptr[r1 + 0x28 - 0x41]); //load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    palignr(xmm7, xmm0, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 29:
                    //Loading all the samples
                    movdqa(xmm0, ptr[r1]); //load horizontal data [0 + 64] = pos 64...79. (aligned)  0 --> 15

                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    lddqu(xmm11, ptr[r1 + 0x8]); //load horizontal data [0 + 72] = pos 72...87 (aligned)   8 --> 23
                    lddqu(xmm12, ptr[r1 + 0x18]); //load horizontal data [0 + 88] = pos 88..103 (aligned)  23 --> 38

                    movdqa(xmm7, xmm12);
                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    movdqa(xmm7, xmm11);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    movdqa(xmm7, xmm11);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    movdqa(xmm1, ptr[r1 + 0x10]); //load horizontal data [0 + 80] = pos 80...95. (aligned) 16 --> 31

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);


                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 8:
                    //Loading all the samples
                    movdqu(xmm0, ptr[r1 - 0x11]); //load vertical   data [0 + 32] = pos 48...64. (aligned) 15 --> 0
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    movdqu(xmm1, ptr[r1 + 0x20 - 0x41]); //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    lddqu(xmm1, ptr[r1 + 0x18 - 0x41]); //load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 25
                    lddqu(xmm0, ptr[r1 + 0x28 - 0x41]); //load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 28:
                    //Loading all the samples
                    movdqa(xmm0, ptr[r1]); //load horizontal data [0 + 64] = pos 64...79. (aligned)  0 --> 15

                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    lddqu(xmm11, ptr[r1 + 0x8]); //load horizontal data [0 + 72] = pos 72...87 (aligned)   8 --> 23
                    lddqu(xmm12, ptr[r1 + 0x18]); //load horizontal data [0 + 88] = pos 88..103 (aligned)  23 --> 38

                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    movdqa(xmm1, ptr[r1 + 0x10]); //load horizontal data [0 + 80] = pos 80...95. (aligned) 16 --> 31

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 9:
                    //Loading all the samples
                    movdqu(xmm0, ptr[r1 - 0x11]); //load vertical   data [0 + 32] = pos 48...64. (aligned) 15 --> 0
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    movdqu(xmm1, ptr[r1 - 0x21]); //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm0);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(13,xmm5, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    //lddqu(xmm0, ptr[r1 + 0x28]); //load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    //pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    //Loading all the samples
                    //db({ 0xcc });
                    lddqu(xmm1, ptr[r1 + 0x18 - 0x41]); //load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 25
                    lddqu(xmm0, ptr[r1 + 0x28 - 0x41]); //load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction


                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    movdqa(xmm7, xmm0);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 27:
                    //Loading all the samples
                    movdqa(xmm0, ptr[r1]); //load horizontal data [0 + 64] = pos 64...79. (aligned)  0 --> 15

                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //Loading all the samples
                    lddqu(xmm11, ptr[r1 + 0x8]); //load horizontal data [0 + 72] = pos 72...87 (aligned)   8 --> 23
                    lddqu(xmm12, ptr[r1 + 0x18]); //load horizontal data [0 + 88] = pos 88..103 (aligned)  23 --> 38

                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(7, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //Loading all the samples
                    movdqa(xmm1, ptr[r1 + 0x10]); //load horizontal data [0 + 80] = pos 80...95. (aligned) 16 --> 31

                    movdqa(xmm7, xmm0);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(13,xmm5, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    movdqa(xmm7, xmm11);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;

                default: assert(0);
            }
#undef TRANSPOSE_AND_COPY_8x8
#undef BILINEARN
        }
    };

template <typename Sample>
struct IntraPredAng16x16_11to25_NegAng_SSE_8bits :
    Jit::Function
    {
        IntraPredAng16x16_11to25_NegAng_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label constant_0x0000000000000000;
        Label maskleft;
        Label maskLine;
        Label maskshuffle8;
        Label add16;
        Label flip0;
        Label flip1;
        Label flip2;
        Label flip3;
        Label dfm_hor;
        Label dfm_ver;

        int mode;
        int mode_mask;

        void data()
        {
            align(32);
            L(add16);
            dw({16, 16, 16, 16, 16, 16, 16, 16}, 1);

            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(maskLine);
            db({0, 1, 1, 2, 2, 3,  3,  4,  4, 5, 5, 6, 6, 7, 7, 8});

            align(32);
            L(maskshuffle8);
            db({0, 2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 0, 0, 0, 0, 0}); 

            align(32);
            L(dfm_hor);
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 11
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 11
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 11
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 11
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 11
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 11
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 11
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 11
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 11
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 11
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 11
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 11
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 11
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 11
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 11
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 11
            dw({6917, 6917, 6917, 6917, 6917, 6917, 6917, 6917}); // mode 12
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 12
            dw({4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367}); // mode 12
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 12
            dw({1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817}); // mode 12
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 12
            dw({7427, 7427, 7427, 7427, 7427, 7427, 7427, 7427}); // mode 12
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 12
            dw({4877, 4877, 4877, 4877, 4877, 4877, 4877, 4877}); // mode 12
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 12
            dw({2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327}); // mode 12
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 12
            dw({7937, 7937, 7937, 7937, 7937, 7937, 7937, 7937}); // mode 12
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 12
            dw({5387, 5387, 5387, 5387, 5387, 5387, 5387, 5387}); // mode 12
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 12
            dw({5897, 5897, 5897, 5897, 5897, 5897, 5897, 5897}); // mode 13
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 13
            dw({1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307}); // mode 13
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 13
            dw({4877, 4877, 4877, 4877, 4877, 4877, 4877, 4877}); // mode 13
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 13
            dw({ 287,  287,  287,  287,  287,  287,  287,  287}); // mode 13
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 13
            dw({3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857}); // mode 13
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 13
            dw({7427, 7427, 7427, 7427, 7427, 7427, 7427, 7427}); // mode 13
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 13
            dw({2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837}); // mode 13
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 13
            dw({6407, 6407, 6407, 6407, 6407, 6407, 6407, 6407}); // mode 13
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 13
            dw({4877, 4877, 4877, 4877, 4877, 4877, 4877, 4877}); // mode 14
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 14
            dw({6407, 6407, 6407, 6407, 6407, 6407, 6407, 6407}); // mode 14
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 14
            dw({7937, 7937, 7937, 7937, 7937, 7937, 7937, 7937}); // mode 14
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 14
            dw({1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307}); // mode 14
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 14
            dw({2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837}); // mode 14
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 14
            dw({4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367}); // mode 14
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 14
            dw({5897, 5897, 5897, 5897, 5897, 5897, 5897, 5897}); // mode 14
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 14
            dw({7427, 7427, 7427, 7427, 7427, 7427, 7427, 7427}); // mode 14
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 14
            dw({3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857}); // mode 15
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 15
            dw({3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347}); // mode 15
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 15
            dw({2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837}); // mode 15
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 15
            dw({2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327}); // mode 15
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 15
            dw({1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817}); // mode 15
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 15
            dw({1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307}); // mode 15
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 15
            dw({ 797,  797,  797,  797,  797,  797,  797,  797}); // mode 15
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 15
            dw({ 287,  287,  287,  287,  287,  287,  287,  287}); // mode 15
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 15
            dw({2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837}); // mode 16
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 16
            dw({ 287,  287,  287,  287,  287,  287,  287,  287}); // mode 16
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 16
            dw({5897, 5897, 5897, 5897, 5897, 5897, 5897, 5897}); // mode 16
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 16
            dw({3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347}); // mode 16
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 16
            dw({ 797,  797,  797,  797,  797,  797,  797,  797}); // mode 16
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 16
            dw({6407, 6407, 6407, 6407, 6407, 6407, 6407, 6407}); // mode 16
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 16
            dw({3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857}); // mode 16
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 16
            dw({1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307}); // mode 16
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 16
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 17
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 17
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 17
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 17
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 17
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 17
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 17
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 17
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 17
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 17
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 17
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 17
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 17
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 17
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 17
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 17

            align(32);
            L(dfm_ver);
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 18
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 19 == 17
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 19 == 17
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 19 == 17
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 19 == 17
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 19 == 17
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 19 == 17
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 19 == 17
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 19 == 17
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 19 == 17 
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 19 == 17
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 19 == 17
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 19 == 17
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 19 == 17
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 19 == 17
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 19 == 17
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 19 == 17
            dw({2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837}); // mode 20 == 16
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 20 == 16
            dw({ 287,  287,  287,  287,  287,  287,  287,  287}); // mode 20 == 16
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 20 == 16
            dw({5897, 5897, 5897, 5897, 5897, 5897, 5897, 5897}); // mode 20 == 16
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 20 == 16
            dw({3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347}); // mode 20 == 16
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 20 == 16
            dw({ 797,  797,  797,  797,  797,  797,  797,  797}); // mode 20 == 16
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 20 == 16
            dw({6407, 6407, 6407, 6407, 6407, 6407, 6407, 6407}); // mode 20 == 16
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 20 == 16
            dw({3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857}); // mode 20 == 16
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 20 == 16
            dw({1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307}); // mode 20 == 16
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 20 == 16
            dw({3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857}); // mode 21 == 15
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 21 == 15
            dw({3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347}); // mode 21 == 15
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 21 == 15
            dw({2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837}); // mode 21 == 15
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 21 == 15
            dw({2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327}); // mode 21 == 15
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 21 == 15
            dw({1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817}); // mode 21 == 15
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 21 == 15
            dw({1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307}); // mode 21 == 15
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 21 == 15
            dw({ 797,  797,  797,  797,  797,  797,  797,  797}); // mode 21 == 15
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 21 == 15
            dw({ 287,  287,  287,  287,  287,  287,  287,  287}); // mode 21 == 15
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 21 == 15
            dw({4877, 4877, 4877, 4877, 4877, 4877, 4877, 4877}); // mode 22 == 14
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 22 == 14
            dw({6407, 6407, 6407, 6407, 6407, 6407, 6407, 6407}); // mode 22 == 14
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 22 == 14
            dw({7937, 7937, 7937, 7937, 7937, 7937, 7937, 7937}); // mode 22 == 14
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 22 == 14
            dw({1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307}); // mode 22 == 14
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 22 == 14
            dw({2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837}); // mode 22 == 14
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 22 == 14
            dw({4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367}); // mode 22 == 14
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 22 == 14
            dw({5897, 5897, 5897, 5897, 5897, 5897, 5897, 5897}); // mode 22 == 14
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 22 == 14
            dw({7427, 7427, 7427, 7427, 7427, 7427, 7427, 7427}); // mode 22 == 14
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 22 == 14
            dw({5897, 5897, 5897, 5897, 5897, 5897, 5897, 5897}); // mode 23 == 13
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 23 == 13
            dw({1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307}); // mode 23 == 13
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 23 == 13
            dw({4877, 4877, 4877, 4877, 4877, 4877, 4877, 4877}); // mode 23 == 13
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 23 == 13
            dw({ 287,  287,  287,  287,  287,  287,  287,  287}); // mode 23 == 13
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 23 == 13
            dw({3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857}); // mode 23 == 13
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 23 == 13
            dw({7427, 7427, 7427, 7427, 7427, 7427, 7427, 7427}); // mode 23 == 13
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 23 == 13
            dw({2837, 2837, 2837, 2837, 2837, 2837, 2837, 2837}); // mode 23 == 13
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 23 == 13
            dw({6407, 6407, 6407, 6407, 6407, 6407, 6407, 6407}); // mode 23 == 13
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 23 == 13
            dw({6917, 6917, 6917, 6917, 6917, 6917, 6917, 6917}); // mode 24 == 12
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 24 == 12
            dw({4367, 4367, 4367, 4367, 4367, 4367, 4367, 4367}); // mode 24 == 12
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 24 == 12
            dw({1817, 1817, 1817, 1817, 1817, 1817, 1817, 1817}); // mode 24 == 12
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 24 == 12
            dw({7427, 7427, 7427, 7427, 7427, 7427, 7427, 7427}); // mode 24 == 12
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 24 == 12
            dw({4877, 4877, 4877, 4877, 4877, 4877, 4877, 4877}); // mode 24 == 12
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 24 == 12
            dw({2327, 2327, 2327, 2327, 2327, 2327, 2327, 2327}); // mode 24 == 12
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 24 == 12
            dw({7937, 7937, 7937, 7937, 7937, 7937, 7937, 7937}); // mode 24 == 12
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 24 == 12
            dw({5387, 5387, 5387, 5387, 5387, 5387, 5387, 5387}); // mode 24 == 12
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 24 == 12
            dw({7682, 7682, 7682, 7682, 7682, 7682, 7682, 7682}); // mode 25 == 11
            dw({7172, 7172, 7172, 7172, 7172, 7172, 7172, 7172}); // mode 25 == 11
            dw({6662, 6662, 6662, 6662, 6662, 6662, 6662, 6662}); // mode 25 == 11
            dw({6152, 6152, 6152, 6152, 6152, 6152, 6152, 6152}); // mode 25 == 11
            dw({5642, 5642, 5642, 5642, 5642, 5642, 5642, 5642}); // mode 25 == 11
            dw({5132, 5132, 5132, 5132, 5132, 5132, 5132, 5132}); // mode 25 == 11
            dw({4622, 4622, 4622, 4622, 4622, 4622, 4622, 4622}); // mode 25 == 11
            dw({4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112}); // mode 25 == 11
            dw({3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602}); // mode 25 == 11
            dw({3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092}); // mode 25 == 11
            dw({2582, 2582, 2582, 2582, 2582, 2582, 2582, 2582}); // mode 25 == 11
            dw({2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072}); // mode 25 == 11
            dw({1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562}); // mode 25 == 11
            dw({1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052}); // mode 25 == 11
            dw({ 542,  542,  542,  542,  542,  542,  542,  542}); // mode 25 == 11
            dw({  32,   32,   32,   32,   32,   32,   32,   32}); // mode 25 == 11
        }
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner
            auto &g4  = reg64(4);

            auto &g6  = reg64(5);
            auto &g7  = reg64(11);
            auto &g8  = reg64(12);
            auto &g9  = reg64(13);
            auto &g10 = reg64(14);

            int size_1 =   sizeof(Sample);
            int size_2 = 2*sizeof(Sample);

            mov(ul, byte[r1 - 1]);

            //db({ 0xcc });
           
            lea(g6,  ptr[r3 * size_1]); // stride
            lea(g7,  ptr[r3 * size_2]); // stride * 2
            lea(g8,  ptr[g7 + g6]);     // stride * 3
            lea(g9,  ptr[g8 + g6]);     // stride * 4
            lea(g10, ptr[r0 + g9]);     // stride * 4

            // Set the correct masks
            if (mode < 18)
            {
                // Set the proper mask index
                mode_mask = mode - 11;
                lea(g4, ptr[rip + dfm_hor]);
            }
            else
            {
                // Set the proper mask index
                mode_mask = mode - 18;
                lea(g4, ptr[rip + dfm_ver]);
            }


#define TRANSPOSE_AND_COPY_8x8(mode_in, stride, last)              \
            if (mode_in < 18)                                      \
            {                                                      \
                movdqa(xmm8, xmm3);                                \
                movdqa(xmm9, xmm4);                                \
                punpckhbw(xmm8, xmm9);                             \
                punpcklbw(xmm3, xmm4);                             \
                movdqa(xmm9, xmm8);                                \
                movdqa(xmm10, xmm3);                               \
                punpckhbw(xmm10, xmm9);                            \
                punpcklbw(xmm3, xmm8);                             \
                movdqa(xmm8, xmm5);                                \
                movdqa(xmm9, xmm6);                                \
                punpckhbw(xmm8, xmm9);                             \
                punpcklbw(xmm5, xmm6);                             \
                movdqa(xmm4, xmm8);                                \
                movdqa(xmm6, xmm5);                                \
                punpckhbw(xmm6, xmm4);                             \
                punpcklbw(xmm5, xmm8);                             \
                movdqa(xmm8, xmm3);     /* C | A */                \
                movdqa(xmm9, xmm10);    /* G | E */                \
                movdqa(xmm4, xmm5);     /* D | B */                \
                movdqa(xmm7, xmm6);     /* H | F */                \
                punpckldq(xmm8, xmm4);  /* B | A */                \
                punpckhdq(xmm3, xmm5);  /* D | C */                \
                punpckldq(xmm9, xmm7);  /* F | E */                \
                punpckhdq(xmm10, xmm6); /* H | G */                \
                pextrq(ptr[r0  +       (stride*8) ], xmm8, 0);     \
                pextrq(ptr[r0  + (g6 + (stride*8))], xmm8, 1);     \
                pextrq(ptr[r0  + (g7 + (stride*8))], xmm3, 0);     \
                pextrq(ptr[r0  + (g8 + (stride*8))], xmm3, 1);     \
                pextrq(ptr[g10 +       (stride*8) ], xmm9, 0);     \
                pextrq(ptr[g10 + (g6 + (stride*8))], xmm9, 1);     \
                pextrq(ptr[g10 + (g7 + (stride*8))], xmm10, 0);    \
                pextrq(ptr[g10 + (g8 + (stride*8))], xmm10, 1);    \
            }                                                      \
            else if (mode_in >= 18)                                \
            {                                                      \
                pextrq(ptr[r0  +       (stride*8) ], xmm3, 0);     \
                pextrq(ptr[r0  + (g6 + (stride*8))], xmm3, 1);     \
                pextrq(ptr[r0  + (g7 + (stride*8))], xmm4, 0);     \
                pextrq(ptr[r0  + (g8 + (stride*8))], xmm4, 1);     \
                pextrq(ptr[g10 +       (stride*8) ], xmm5, 0);     \
                pextrq(ptr[g10 + (g6 + (stride*8))], xmm5, 1);     \
                pextrq(ptr[g10 + (g7 + (stride*8))], xmm6, 0);     \
                pextrq(ptr[g10 + (g8 + (stride*8))], xmm6, 1);     \
            }                                                      \
            if ((stride == 1) && (!last))                          \
            {                                                      \
                lea(r0, ptr[r0 + g6*8]); /* Move 8 lines */        \
                lea(g10, ptr[r0 + g9]);  /* stride * 4   */        \
            }

#define BILINEAR(n, input, output, posout)                         \
            movdqa(xmm7, input);                                   \
            pshufb(xmm7, ptr[rip + maskLine]);                     \
            pmaddubsw(xmm7, ptr[g4 + (((mode_mask*16) +  n)*16)]); \
            paddw(xmm7, ptr[rip + add16]);                         \
            psrlw(xmm7, 5);                                        \
            pshufb(xmm7, ptr[rip + maskshuffle8]);                 \
            pextrq(rax, xmm7, 0);                                  \
            pinsrq(output, rax, posout);

#define INSERT_PIXEL_RIGHT(input, output, posin, posout)                                     \
            pslldq(output, 1);           /* Shift to add a position                       */ \
            pextrb(rax, input, posin);   /* Extract the U/L1 (Note that it is position 6) */ \
            pinsrb(output, rax, posout); /* Insert  the U/L1 in position 0                */

            switch (mode)
            {
                case 11:
                     //Loading all the samples
                    movdqu(xmm0, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     
                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     //Loading all the samples
                     lddqu(xmm0, ptr[r1 + 0x29 - 0x41]);       // load vertical   data [0 + 40] = pos 40...56. (aligned)
                     pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     // No shift or substitution required
                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 25:
                     //Loading all the samples
                     movdqa(xmm0, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)
                     lddqu(xmm1, ptr[r1 + 0x7]);      // load horizontal data [0 + 72] = pos 72...88. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm1, xmm3, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     BILINEAR(2, xmm1, xmm4, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     BILINEAR(6, xmm1, xmm6, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm1, xmm3, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     BILINEAR(10, xmm1, xmm4, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     BILINEAR(12, xmm1, xmm5, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     BILINEAR(14, xmm1, xmm6, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 12:
                     //Loading all the samples
                     movdqu(xmm0, ptr[r1 - 0x11]);      // load vertical   data (unaligned)
                     pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm1, ptr[r1]);      // load horizontal data (aligned)
                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 13, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     //Loading all the samples
                     lddqu(xmm2, ptr[r1 + 0x29 - 0x41]);       // load vertical   data [0 + 40] = pos 40...56. (aligned)
                     pshufb(xmm2, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     BILINEAR(0, xmm2, xmm3, 0);
                     BILINEAR(1, xmm2, xmm3, 1);
                     BILINEAR(2, xmm2, xmm4, 0);
                     BILINEAR(3, xmm2, xmm4, 1);
                     BILINEAR(4, xmm2, xmm5, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(6, xmm2, xmm6, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm2, xmm3, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     BILINEAR(10, xmm2, xmm4, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(12, xmm2, xmm5, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     BILINEAR(14, xmm2, xmm6, 0);
                     BILINEAR(15, xmm2, xmm6, 1);
                     
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 24:
                     //Loading all the samples
                    movdqu(xmm1, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm0, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...80. (aligned)
                     lddqu(xmm2, ptr[r1 + 0x7]);       // load horizontal data [0 + 72] = pos 72...88. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(0, xmm2, xmm3, 0);
                     BILINEAR(1, xmm2, xmm3, 1);
                     BILINEAR(2, xmm2, xmm4, 0);
                     BILINEAR(3, xmm2, xmm4, 1);
                     BILINEAR(4, xmm2, xmm5, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(6, xmm2, xmm6, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 13, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm2, xmm3, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     BILINEAR(10, xmm2, xmm4, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(12, xmm2, xmm5, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     BILINEAR(14, xmm2, xmm6, 0);
                     BILINEAR(15, xmm2, xmm6, 1);
                     
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 13:
                     //Loading all the samples
                    movdqu(xmm0, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm1, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)
                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 11, 0);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 14, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     //Loading all the samples
                     lddqu(xmm2, ptr[r1 + 0x29 - 0x41]);       // load vertical   data [0 + 42] = pos 42...58. (aligned)
                     pshufb(xmm2, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     BILINEAR(0, xmm2, xmm3, 0);
                     BILINEAR(1, xmm2, xmm3, 1);
                     BILINEAR(2, xmm2, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 11, 0);
                     BILINEAR(3, xmm2, xmm4, 1);
                     BILINEAR(4, xmm2, xmm5, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     BILINEAR(6, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm2, xmm3, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(10, xmm2, xmm4, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     BILINEAR(12, xmm2, xmm5, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(14, xmm2, xmm6, 0);
                     BILINEAR(15, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 23:
                     //Loading all the samples
                    movdqu(xmm1, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm0, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...80. (aligned)
                     lddqu(xmm2, ptr[r1 + 0x7]);       // load horizontal data [0 + 70] = pos 70...86. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(0, xmm2, xmm3, 0);
                     BILINEAR(1, xmm2, xmm3, 1);
                     BILINEAR(2, xmm2, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(3, xmm2, xmm4, 1);
                     BILINEAR(4, xmm2, xmm5, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     BILINEAR(6, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 11, 0);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 14, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm2, xmm3, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(10, xmm2, xmm4, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     BILINEAR(12, xmm2, xmm5, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(14, xmm2, xmm6, 0);
                     BILINEAR(15, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 14:
                     //Loading all the samples
                     movdqu(xmm0, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm1, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);
                     
                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 2, 0);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 10, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 15, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     //Loading all the samples
                     lddqu(xmm2, ptr[r1 + 0x29 - 0x41]);       // load vertical   data [0 + 42] = pos 42...58. (aligned)
                     pshufb(xmm2, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     BILINEAR(0, xmm2, xmm3, 0);
                     BILINEAR(1, xmm2, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 13, 0);
                     BILINEAR(2, xmm2, xmm4, 0);
                     BILINEAR(3, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 12, 0);
                     BILINEAR(4, xmm2, xmm5, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     BILINEAR(6, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 11, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     BILINEAR(10, xmm2, xmm4, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(12, xmm2, xmm5, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(14, xmm2, xmm6, 0);
                     BILINEAR(15, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 22:
                     //Loading all the samples
                    movdqu(xmm1, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm0, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...80. (aligned)
                     lddqu(xmm2, ptr[r1 + 0x7]);       // load horizontal data [0 + 70] = pos 70...86. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);
                     
                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 2, 0);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(0, xmm2, xmm3, 0);
                     BILINEAR(1, xmm2, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(2, xmm2, xmm4, 0);
                     BILINEAR(3, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(4, xmm2, xmm5, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     BILINEAR(6, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 10, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 15, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     BILINEAR(10, xmm2, xmm4, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(12, xmm2, xmm5, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(14, xmm2, xmm6, 0);
                     BILINEAR(15, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 15:
                     //Loading all the samples
                     movdqu(xmm0, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm1, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 2, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 6, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 8, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 9, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 11, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 13, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 15, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     //Loading all the samples
                     lddqu(xmm2, ptr[r1 + 0x29 - 0x41]);       // load vertical   data [0 + 42] = pos 42...58. (aligned)
                     pshufb(xmm2, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     BILINEAR(0, xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 15, 0);
                     BILINEAR(1, xmm2, xmm3, 1);
                     BILINEAR(2, xmm2, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 14, 0);
                     BILINEAR(3, xmm2, xmm4, 1);
                     BILINEAR(4, xmm2, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 13, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     BILINEAR(6, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 12, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 11, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     BILINEAR(10, xmm2, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     BILINEAR(12, xmm2, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     BILINEAR(14, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(15, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 21:
                     //Loading all the samples
                    movdqu(xmm1, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm0, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...80. (aligned)
                     lddqu(xmm2, ptr[r1 + 0x7]);       // load horizontal data [0 + 70] = pos 70...86. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 2, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 6, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 8, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(0, xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 11, 0);
                     BILINEAR(1, xmm2, xmm3, 1);
                     BILINEAR(2, xmm2, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(3, xmm2, xmm4, 1);
                     BILINEAR(4, xmm2, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     BILINEAR(6, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 9, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 11, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 13, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 15, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 11, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     BILINEAR(10, xmm2, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     BILINEAR(12, xmm2, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     BILINEAR(14, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(15, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 16:
                     //Loading all the samples
                     movdqu(xmm0, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm1, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 2, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 3, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 8, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 9, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 11, 0);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 14, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 15, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     //Loading all the samples
                     lddqu(xmm2, ptr[r1 + 0x2b - 0x41]);       // load vertical   data [0 + 42] = pos 42...58. (aligned)
                     pshufb(xmm2, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm11, xmm2);

                     palignr(xmm11, xmm2, 2);
                     BILINEAR(0, xmm11, xmm3, 0);
                     palignr(xmm11, xmm2, 1);
                     BILINEAR(1, xmm11, xmm3, 1);
                     BILINEAR(2, xmm11, xmm4, 0);
                     BILINEAR(3, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 15, 0);
                     BILINEAR(4, xmm2, xmm5, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 14, 0);
                     BILINEAR(6, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 13, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                     
                     BILINEAR(8,  xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 12, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 11, 0);
                     BILINEAR(10, xmm2, xmm4, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(12, xmm2, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     BILINEAR(14, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(15, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 20:
                     //Loading all the samples
                    movdqu(xmm1, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm0, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...80. (aligned)
                     lddqu(xmm2, ptr[r1 + 0x7]);       // load horizontal data [0 + 70] = pos 70...86. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 2, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 3, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 8, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(0, xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 12, 0);
                     BILINEAR(1, xmm2, xmm3, 1);
                     BILINEAR(2, xmm2, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 11, 0);
                     BILINEAR(3, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(4, xmm2, xmm5, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(6, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 9, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 11, 0);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 14, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 15, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                     
                     BILINEAR(8,  xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 12, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 11, 0);
                     BILINEAR(10, xmm2, xmm4, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(12, xmm2, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     BILINEAR(14, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(15, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 17:
                     //Loading all the samples
                     movdqu(xmm0, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm1, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 1, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 2, 0);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 9, 0);
                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 10, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 11, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 14, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 15, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     //Loading all the samples
                     lddqu(xmm2, ptr[r1 + 0x2d - 0x41]);       // load vertical   data [0 + 42] = pos 42...58. (aligned)
                     pshufb(xmm2, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm11, xmm2);

                     palignr(xmm11, xmm2, 4);
                     BILINEAR(0, xmm11, xmm3, 0);
                     palignr(xmm11, xmm2, 3);
                     BILINEAR(1, xmm11, xmm3, 1);
                     palignr(xmm11, xmm2, 2);
                     BILINEAR(2, xmm11, xmm4, 0);
                     palignr(xmm11, xmm2, 1);
                     BILINEAR(3, xmm11, xmm4, 1);
                     BILINEAR(4, xmm2, xmm5, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 15, 0);
                     BILINEAR(6, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 14, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 13, 0);
                     BILINEAR(8,  xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 12, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     BILINEAR(10, xmm2, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 11, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(12, xmm2, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(14, xmm2, xmm6, 0);
                     BILINEAR(15, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;
                case 19:
                     //Loading all the samples
                    movdqu(xmm1, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm0, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...80. (aligned)
                     lddqu(xmm2, ptr[r1 + 0x3]);       // load horizontal data [0 + 70] = pos 70...86. (aligned)
                     movdqa(xmm11, xmm2);

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 1, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 2, 0);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     palignr(xmm11, xmm2, 4);
                     BILINEAR(0, xmm11, xmm3, 0);
                     palignr(xmm11, xmm2, 3);
                     BILINEAR(1, xmm11, xmm3, 1);
                     palignr(xmm11, xmm2, 2);
                     BILINEAR(2, xmm11, xmm4, 0);
                     palignr(xmm11, xmm2, 1);
                     BILINEAR(3, xmm11, xmm4, 1);
                     BILINEAR(4, xmm2, xmm5, 0);
                     BILINEAR(5, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(6, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 9, 0);
                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 10, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 11, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 14, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 15, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 13, 0);
                     BILINEAR(8,  xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 12, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     BILINEAR(10, xmm2, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 11, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(12, xmm2, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 9, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 8, 0);
                     BILINEAR(14, xmm2, xmm6, 0);
                     BILINEAR(15, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;

                case 18:
                     //Loading all the samples
                    movdqu(xmm1, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
                     pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     movdqa(xmm0, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...80. (aligned)
                     //Loading all the samples
                     lddqu(xmm2, ptr[r1]);       // load horizontal data [0 + 70] = pos 70...86. (aligned)
                     movdqa(xmm11, xmm2);

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm3, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm3, xmm0, 0, 0);
                     INSERT_PIXEL_RIGHT(xmm3, xmm1, 0, 0);

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 1, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 2, 0);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 3, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 4, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     palignr(xmm11, xmm2, 7);
                     BILINEAR(0, xmm11, xmm3, 0);
                     palignr(xmm11, xmm2, 6);
                     BILINEAR(1, xmm11, xmm3, 1);
                     palignr(xmm11, xmm2, 5);
                     BILINEAR(2, xmm11, xmm4, 0);
                     palignr(xmm11, xmm2, 4);
                     BILINEAR(3, xmm11, xmm4, 1);
                     palignr(xmm11, xmm2, 3);
                     BILINEAR(4, xmm11, xmm5, 0);
                     palignr(xmm11, xmm2, 2);
                     BILINEAR(5, xmm11, xmm5, 1);
                     palignr(xmm11, xmm2, 1);
                     BILINEAR(6, xmm11, xmm6, 0);
                     BILINEAR(7, xmm2, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
                     
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 8, 0);
                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 9, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 10, 0);
                     BILINEAR(10, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 11, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 13, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 14, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm0, 15, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 15, 0);
                     BILINEAR(8,  xmm2, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 14, 0);
                     BILINEAR(9,  xmm2, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 13, 0);
                     BILINEAR(10, xmm2, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 12, 0);
                     BILINEAR(11, xmm2, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 11, 0);
                     BILINEAR(12, xmm2, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2, 10, 0);
                     BILINEAR(13, xmm2, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2,  9, 0);
                     BILINEAR(14, xmm2, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm2,  8, 0);
                     BILINEAR(15, xmm2, xmm6, 1);
                     
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 1);
                break;

                default: assert(0);
                break;
            }
#undef TRANSPOSE_AND_COPY_8x8
#undef BILINEAR
#undef INSERT_PIXEL_RIGHT
        }
    };

template <typename Sample>
struct IntraPredAng16x16_10_filt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng16x16_10_filt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label maskleft;
        Label flip;
        int mode;

        void data()
        {
            align(32);
            L(constant_0x00000000000000000000000000000000);
            dw({ 0 }, 8);

            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(flip);
            for (int sh = 0; sh < 16; sh++)
            {
                db({ sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh });
            }
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r1 = arg64(2); // const Sample *neighbours
            auto &r3 = arg64(1); // dst_stride
            auto ul  = arg64(3); // neigh_corner
            auto &g5 = reg64(5);

            mov(ul, byte[r1 - 1]);

            // Loading all the samples
            movdqu(xmm0, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
            pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
            movdqu(xmm1, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)
            lea(g5, ptr[rip + flip]);

            //db({ 0xcc });

            // Filter line 0
            // Save Left
            movdqa(xmm3, xmm0);
            // Prepare register with ul and L0 only
            pinsrb(xmm2, ul, 0);
            pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
            pshufb(xmm3, ptr[rip + constant_0x00000000000000000000000000000000]);    // L0
            /// Prepare the l and ul unpacking them into 16bits
            punpcklbw(xmm3, ptr[rip + constant_0x00000000000000000000000000000000]); // L0
            punpcklbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]); // ul 

            movdqa(xmm4, xmm1);
            punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]); // up (lower  8 pixels)
            punpckhbw(xmm4, ptr[rip + constant_0x00000000000000000000000000000000]); // up (higher 8 pixels)

            // Subtract the UL to from UP lower  pixels
            psubw(xmm1, xmm2); 
            // Subtract the UL to from UP higher pixels
            psubw(xmm4, xmm2); 

            // Shift right by 1 lower  pixels
            psraw(xmm1, 1);
            // Shift right by 1 higher pixels
            psraw(xmm4, 1);

            // add left with up 1 lower pixels
            paddw(xmm1, xmm3);
            // add left with up 1 higher pixels
            paddw(xmm4, xmm3);

            /// Packing them back tp 8bits higher pixels
            packuswb(xmm1, xmm4); 

            movdqa(ptr[r0], xmm1);                        // save lower  pixels 
            lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

#define FLIP_AND_COPY(n)                                \
            movdqa(xmm1, xmm0);                         \
            pshufb(xmm1,  ptr[g5 + (n*16)]);            \
            movdqa(ptr[r0], xmm1);                      \
            if (n != 15)                                \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            FLIP_AND_COPY(1);
            FLIP_AND_COPY(2);
            FLIP_AND_COPY(3);
            FLIP_AND_COPY(4);
            FLIP_AND_COPY(5);
            FLIP_AND_COPY(6);
            FLIP_AND_COPY(7);
            FLIP_AND_COPY(8);
            FLIP_AND_COPY(9);
            FLIP_AND_COPY(10);
            FLIP_AND_COPY(11);
            FLIP_AND_COPY(12);
            FLIP_AND_COPY(13);
            FLIP_AND_COPY(14);
            FLIP_AND_COPY(15);
#undef FLIP_AND_COPY
        }
    };

template <typename Sample>
struct IntraPredAng16x16_26_filt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng16x16_26_filt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label constant_0x00000000000000000000000000000000;
        Label maskleft;
        int mode;
        
        void data()
        {
            align(32);
            L(constant_0x00000000000000000000000000000000);
            dw({ 0 }, 8);

            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner

            mov(ul, byte[r1 - 1]);
            //db({ 0xcc });

            //Loading all the samples
            movdqu(xmm1, ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
            pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
            movdqa(xmm0, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

            //db({ 0xcc });
            // Filter line 0
            // Save UP
            movdqa(xmm3, xmm0);
            // Prepare register with ul and L0 only
            pinsrb(xmm2, ul, 0);
            pshufb(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]);
            pshufb(xmm3, ptr[rip + constant_0x00000000000000000000000000000000]);    // U0
            /// Prepare the l and ul unpacking them into 16bits
            punpcklbw(xmm3, ptr[rip + constant_0x00000000000000000000000000000000]); // U0
            punpcklbw(xmm2, ptr[rip + constant_0x00000000000000000000000000000000]); // ul 

            movdqa(xmm4, xmm1);
            punpcklbw(xmm1, ptr[rip + constant_0x00000000000000000000000000000000]); // left (lower  8 pixels)
            punpckhbw(xmm4, ptr[rip + constant_0x00000000000000000000000000000000]); // left (higher 8 pixels)

            // Subtract the UL to from LEFT lower  pixels
            psubw(xmm1, xmm2); 
            // Subtract the UL to from LEFT higher pixels
            psubw(xmm4, xmm2); 

            // Shift right by 1 lower  pixels
            psraw(xmm1, 1);
            // Shift right by 1 higher pixels
            psraw(xmm4, 1);

            // add UP with up 1 lower pixels
            paddw(xmm1, xmm3);
            // add UP with up 1 higher pixels
            paddw(xmm4, xmm3);

            /// Packing them back tp 8bits higher pixels
            packuswb(xmm1, xmm4); 

            // Store the pixels
#define INSERT_LINE(last)                               \
            pinsrb(xmm0, r8d, 0);                       \
            movdqa(ptr[r0], xmm0);                      \
            if (!last)                                  \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            // Extract the byte from the left filtered sample (sample 0)
            // --- Save the 1st row ----
            pextrb(r8d, xmm1, 0);
            INSERT_LINE(0);
            // Extract the byte from the left filtered sample (sample 1)
            // --- Save the 2nd row ----
            pextrb(r8d, xmm1, 1);
            INSERT_LINE(0);
            // --- Save the 3rd row ----
            // Extract the byte from the left filtered sample (sample 2)
            pextrb(r8d, xmm1, 2);
            INSERT_LINE(0);
            // --- Save the 4th row ----
            // Extract the byte from the left filtered sample (sample 3)
            pextrb(r8d, xmm1, 3);
            INSERT_LINE(0);
            // --- Save the 5th row ----
            // Extract the byte from the left filtered sample (sample 4)
            pextrb(r8d, xmm1, 4);
            INSERT_LINE(0);
            // --- Save the 6th row ----
            // Extract the byte from the left filtered sample (sample 5)
            pextrb(r8d, xmm1, 5);
            INSERT_LINE(0);
            // --- Save the 7th row ----
            // Extract the byte from the left filtered sample (sample 7)
            pextrb(r8d, xmm1, 6);
            INSERT_LINE(0);
            // --- Save the 8th row ----
            // Extract the byte from the left filtered sample (sample 7)
            pextrb(r8d, xmm1, 7);
            INSERT_LINE(0);

            // Extract the byte from the left filtered sample (sample 8)
            // --- Save the 9th row ----
            pextrb(r8d, xmm1, 8);
            INSERT_LINE(0);
            // Extract the byte from the left filtered sample (sample 9)
            // --- Save the 10th row ----
            pextrb(r8d, xmm1, 9);
            INSERT_LINE(0);
            // --- Save the 11th row ----
            // Extract the byte from the left filtered sample (sample 10)
            pextrb(r8d, xmm1, 10);
            INSERT_LINE(0);
            // --- Save the 12th row ----
            // Extract the byte from the left filtered sample (sample 11)
            pextrb(r8d, xmm1, 11);
            INSERT_LINE(0);
            // --- Save the 13th row ----
            // Extract the byte from the left filtered sample (sample 12)
            pextrb(r8d, xmm1, 12);
            INSERT_LINE(0);
            // --- Save the 14th row ----
            // Extract the byte from the left filtered sample (sample 13)
            pextrb(r8d, xmm1, 13);
            INSERT_LINE(0);
            // --- Save the 15th row ----
            // Extract the byte from the left filtered sample (sample 14)
            pextrb(r8d, xmm1, 14);
            INSERT_LINE(0);
            // --- Save the 16th row ----
            // Extract the byte from the left filtered sample (sample 15)
            pextrb(r8d, xmm1, 15);
            INSERT_LINE(1);
#undef INSERT_LINE
        }
    };


template <typename Sample>
struct IntraPredAng16x16_10_nofilt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng16x16_10_nofilt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Label maskleft;
        Label flip;
        int mode;

        void data()
        {
            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(flip);
            for (int sh = 0; sh < 16; sh++)
            {
                db({ sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh });
            }
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r1 = arg64(2); // const Sample *neighbours
            auto &r3 = arg64(1); // dst_stride
            auto &g5 = reg64(5);

            // Loading all the samples
            movdqu(xmm0, ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...63. (aligned)
            pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
            lea(g5, ptr[rip + flip]);

            //db({ 0xcc });
#define FLIP_AND_COPY(n)                                \
            movdqa(xmm1, xmm0);                         \
            pshufb(xmm1,  ptr[g5 + (n*16)]);            \
            movdqa(ptr[r0], xmm1);                      \
            if (n != 15)                                \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            FLIP_AND_COPY(0);
            FLIP_AND_COPY(1);
            FLIP_AND_COPY(2);
            FLIP_AND_COPY(3);
            FLIP_AND_COPY(4);
            FLIP_AND_COPY(5);
            FLIP_AND_COPY(6);
            FLIP_AND_COPY(7);
            FLIP_AND_COPY(8);
            FLIP_AND_COPY(9);
            FLIP_AND_COPY(10);
            FLIP_AND_COPY(11);
            FLIP_AND_COPY(12);
            FLIP_AND_COPY(13);
            FLIP_AND_COPY(14);
            FLIP_AND_COPY(15);
#undef FLIP_AND_COPY
        }
    };

template <typename Sample>
struct IntraPredAng16x16_26_nofilt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng16x16_26_nofilt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        int mode;
        
        void data()
        {
            align(32);
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours

            //Loading all the samples
            movdqa(xmm0, ptr[r1]); // load horizontal data [0 + 64] = pos 64...78. (aligned)

            //db({ 0xcc });

            // Store the pixels
#define INSERT_LINE(last)                               \
            movdqa(ptr[r0], xmm0);                      \
            if (!last)                                  \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(0);
            INSERT_LINE(1);
#undef INSERT_LINE
        }
    };

/// ============================================================================================================================

template <typename Sample>
struct IntraPredAng32x32_2to9_PosAng_SSE_8bits :
    Jit::Function
    {
        IntraPredAng32x32_2to9_PosAng_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }
        Xbyak::Label add16;
        Xbyak::Label maskleft;
        Xbyak::Label maskLine;
        Xbyak::Label maskshuffle8;
        Xbyak::Label dfm_hor;
        Xbyak::Label dfm_ver;

        int mode;
        int mode_mask;

        void data()
        {
            align(32);
            L(add16);
            dw({16, 16, 16, 16, 16, 16, 16, 16}, 1);

            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(maskLine);
            db({0, 1, 1, 2, 2, 3,  3,  4,  4, 5, 5, 6, 6, 7, 7, 8});
        
            align(32);
            L(maskshuffle8);
            db({0, 2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 0, 0, 0, 0, 0}); 

            align(32);
            L(dfm_hor);
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 0
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 1
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 2
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 3
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 3
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 3
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 3
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 3
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 3
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 3
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 3
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 3
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 3
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 3
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 3
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 3
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 3
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 3
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 3
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 3
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 3
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 3
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 3
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 3
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 3
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 3
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 3
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 3
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 3
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 3
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 3
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 3
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 3
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 3
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 3
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 4
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 4
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 4
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 4
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 4
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 4
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 4
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 4
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 4
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 4
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 4
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 4
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 4
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 4
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 4
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 4
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 4
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 4
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 4
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 4
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 4
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 4
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 4
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 4
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 4
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 4
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 4
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 4
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 4
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 4
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 4
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 4
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 5
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 5
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 5
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 5
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 5
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 5
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 5
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 5
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 5
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 5
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 5
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 5
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 5
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 5
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 5
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 5
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 5
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 5
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 5
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 5
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 5
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 5
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 5
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 5
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 5
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 5
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 5
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 5
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 5
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 5
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 5
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 5
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 6
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 6
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 6
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 6
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 6
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 6
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 6
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 6
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 6
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 6
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 6
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 6
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 6
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 6
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 6
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 6
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 6
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 6
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 6
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 6
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 6
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 6
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 6
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 6
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 6
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 6
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 6
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 6
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 6
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 6
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 6
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 6
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 7
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 7
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 7
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 7
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 7
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 7
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 7
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 7
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 7
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 7
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 7
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 7
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 7
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 7
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 7
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 7
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 7
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 7
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 7
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 7
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 7
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 7
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 7
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 7
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 7
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 7
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 7
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 7
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 7
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 7
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 7
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 7
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 8
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 8
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 8
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 8
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 8
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 8
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 8
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 8
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 8
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 8
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 8
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 8
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 8
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 8
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 8
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 8
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 8
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 8
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 8
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 8
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 8
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 8
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 8
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 8
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 8
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 8
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 8
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 8
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 8
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 8
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 8
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 8
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 9
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 9
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 9
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 9
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 9
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 9
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 9
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 9
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 9
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 9
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 9
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 9
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 9
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 9
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 9
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 9
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 9
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 9
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 9
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 9
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 9
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 9
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 9
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 9
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 9
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 9
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 9
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 9
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 9
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 9
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 9
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 9
         }
        
         void assemble()
         {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0  = arg64(0); // Sample *dst
            auto &r3  = arg64(1); // dst_stride
            auto &r1  = arg64(2); // const Sample *neighbours
            auto ul   = arg64(3); // neigh_corner
            auto &g4  = reg64(4);

            auto &g6  = reg64(5);
            auto &g7  = reg64(11);
            auto &g8  = reg64(12);
            auto &g9  = reg64(13);
            auto &g10 = reg64(14);

            int size_1 =   sizeof(Sample);
            int size_2 = 2*sizeof(Sample);
           
            if (mode != 2)
            {
                lea(g6,  ptr[r3 * size_1]); // stride
                lea(g7,  ptr[r3 * size_2]); // stride * 2
                lea(g8,  ptr[g7 + g6]);     // stride * 3
                lea(g9,  ptr[g8 + g6]);     // stride * 4
                lea(g10, ptr[r0 + g9]);     // stride * 4
            }

            mov(ul, byte[r1 - 1]);

            // Set the proper mask index
            mode_mask = mode;
            lea(g4, ptr[rip + dfm_hor]);

#define TRANSPOSE_AND_COPY_8x8(mode_in, stride, last)              \
            if (mode_in != 2)                                      \
            {                                                      \
                movdqa(xmm8, xmm3);                                \
                movdqa(xmm9, xmm4);                                \
                punpckhbw(xmm8, xmm9);                             \
                punpcklbw(xmm3, xmm4);                             \
                movdqa(xmm9, xmm8);                                \
                movdqa(xmm10, xmm3);                               \
                punpckhbw(xmm10, xmm9);                            \
                punpcklbw(xmm3, xmm8);                             \
                movdqa(xmm8, xmm5);                                \
                movdqa(xmm9, xmm6);                                \
                punpckhbw(xmm8, xmm9);                             \
                punpcklbw(xmm5, xmm6);                             \
                movdqa(xmm4, xmm8);                                \
                movdqa(xmm6, xmm5);                                \
                punpckhbw(xmm6, xmm4);                             \
                punpcklbw(xmm5, xmm8);                             \
                movdqa(xmm8, xmm3);     /* C | A */                \
                movdqa(xmm9, xmm10);    /* G | E */                \
                movdqa(xmm4, xmm5);     /* D | B */                \
                movdqa(xmm7, xmm6);     /* H | F */                \
                punpckldq(xmm8, xmm4);  /* B | A */                \
                punpckhdq(xmm3, xmm5);  /* D | C */                \
                punpckldq(xmm9, xmm7);  /* F | E */                \
                punpckhdq(xmm10, xmm6); /* H | G */                \
                pextrq(ptr[r0  +       (stride*8) ], xmm8, 0);     \
                pextrq(ptr[r0  + (g6 + (stride*8))], xmm8, 1);     \
                pextrq(ptr[r0  + (g7 + (stride*8))], xmm3, 0);     \
                pextrq(ptr[r0  + (g8 + (stride*8))], xmm3, 1);     \
                pextrq(ptr[g10 +       (stride*8) ], xmm9, 0);     \
                pextrq(ptr[g10 + (g6 + (stride*8))], xmm9, 1);     \
                pextrq(ptr[g10 + (g7 + (stride*8))], xmm10, 0);    \
                pextrq(ptr[g10 + (g8 + (stride*8))], xmm10, 1);    \
            }                                                      \
            if ((stride == 3) && (!last))                          \
            {                                                      \
                lea(r0, ptr[r0 + g6*8]); /* Move 8 lines */        \
                lea(g10, ptr[r0 + g9]);  /* stride * 4   */        \
            }

#define BILINEARN(n, output, posout)                               \
            pshufb(xmm7, ptr[rip + maskLine]);                     \
            pmaddubsw(xmm7, ptr[g4 + (((mode_mask*32) +  n)*16)]); \
            paddw(xmm7, ptr[rip + add16]);                         \
            psrlw(xmm7, 5);                                        \
            pshufb(xmm7, ptr[rip + maskshuffle8]);                 \
            pextrq(rax, xmm7, 0);                                  \
            pinsrq(output, rax, posout);

#define INSERT_LINE(line, pixels_0, pixels_1, pixels_2, pixels_3, last) \
            movdqa(xmm4, pixels_1);                                     \
            palignr(xmm4, pixels_0, line);                              \
            movdqa(ptr[r0], xmm4);                                      \
            movdqa(xmm5, pixels_3);                                     \
            palignr(xmm5, pixels_2, line);                              \
            movdqa(ptr[r0 + (16 * sizeof(Sample))], xmm5);              \
            if (!last)                                                  \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            switch (mode)
            {
                case 2:
                {
                    //Loading all the samples
                    movdqu(xmm3, ptr[r1 - 0x41]); //load vertical data  (unaligned) 
                    movdqu(xmm2, ptr[r1 - 0x31]); //load vertical data  (unaligned) 
                    movdqu(xmm1, ptr[r1 - 0x21]); //load vertical data  (unaligned) 
                    movdqu(xmm0, ptr[r1 - 0x11]); //load vertical data  (unaligned) 
                    pshufb(xmm3, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm2, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //db({ 0xcc });

                    INSERT_LINE( 1, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 2, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 3, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 4, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 5, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 6, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 7, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 8, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 9, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(10, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(11, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(12, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(13, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(14, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(15, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(16, xmm0, xmm1, xmm1, xmm2, 0);

                    INSERT_LINE( 1, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 2, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 3, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 4, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 5, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 6, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 7, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 8, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 9, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(10, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(11, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(12, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(13, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(14, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(15, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(16, xmm1, xmm2, xmm2, xmm3, 1);
                }
                break;
                case 3:
                {
                    //Loading all the samples
                    movdqu(xmm0,  ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                    movdqu(xmm1,  ptr[r1 - 0x21]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    movdqu(xmm11, ptr[r1 - 0x31]);      // load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    lddqu(xmm12,  ptr[r1 + 0x28 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    lddqu(xmm13,  ptr[r1 + 0x18 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    lddqu(xmm14,  ptr[r1 + 0x08 - 0x41]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    //db({ 0xcc });
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 14);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 15);
                    BILINEARN(18, xmm4, 0);

                    movdqa(xmm7, xmm1);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 14);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 15);
                    BILINEARN(18, xmm4, 0);

                    movdqa(xmm7, xmm13);
                    BILINEARN(19, xmm4, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(20, xmm5, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(21, xmm5, 1);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(22, xmm6, 0);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 9);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 10);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                    
                    //movdqa(xmm1,  ptr[r1 + 0x20]);      //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    //movdqa(xmm11, ptr[r1 + 0x10]);      //load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    movdqu(xmm0,  ptr[r1 - 0x41]);      //load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 14);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 15);
                    BILINEARN(18, xmm4, 0);
                    
                    movdqa(xmm7, xmm11);
                    BILINEARN(19, xmm4, 1);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(20, xmm5, 0);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(21, xmm5, 1);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(22, xmm6, 0);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm11, 10);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    //lddqu(xmm13,  ptr[r1 + 0x18]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    //lddqu(xmm14,  ptr[r1 + 0x08]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    //movdqa(xmm0,  ptr[r1 + 0x00]);      // load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    //pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    psrldq(xmm0, 8);

                    movdqa(xmm7, xmm13);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 13);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 13);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 14);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 15);
                    BILINEARN(18, xmm4, 0);
                    
                    movdqa(xmm7, xmm14);
                    BILINEARN(19, xmm4, 1);
                    palignr(xmm7, xmm14, 1);
                    BILINEARN(20, xmm5, 0);
                    palignr(xmm7, xmm14, 1);
                    BILINEARN(21, xmm5, 1);
                    palignr(xmm7, xmm14, 2);
                    BILINEARN(22, xmm6, 0);
                    palignr(xmm7, xmm14, 3);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm14, 4);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm14, 5);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm14, 5);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm14, 6);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm14, 7);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm14, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm14, 9);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm14, 10);
                    BILINEARN(31, xmm6, 1);
                    
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);

                }
                break;
                case 4:
                {
                    //Loading all the samples
                    lddqu(xmm0,  ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                    lddqu(xmm1,  ptr[r1 - 0x21]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    lddqu(xmm11, ptr[r1 - 0x31]);      // load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    lddqu(xmm12,  ptr[r1 + 0x28 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    lddqu(xmm13,  ptr[r1 + 0x18 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    lddqu(xmm14,  ptr[r1 + 0x08 - 0x41]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    //db({ 0xcc });
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 14);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 15);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 15);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm1);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 14);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 15);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 15);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm13);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                    
                    //movdqa(xmm1,  ptr[r1 + 0x20]);      //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    //movdqa(xmm11, ptr[r1 + 0x10]);      //load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    movdqa(xmm0,  ptr[r1 + 0x00]);      //load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 14);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 15);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 15);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm11);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    //lddqu(xmm13,  ptr[r1 + 0x18]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    //lddqu(xmm14,  ptr[r1 + 0x08]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    //movdqa(xmm0,  ptr[r1 + 0x00]);      // load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    //pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    psrldq(xmm0, 8);

                    movdqa(xmm7, xmm13);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 10);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 11);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 11);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 12);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 13);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 13);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 14);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 15);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 15);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm14);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm14, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm14, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm14, 2);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm14, 3);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm14, 3);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm14, 4);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm14, 5);
                    BILINEARN(31, xmm6, 1);
                    
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);

                }
                break;
                case 5:
                {
                    //Loading all the samples
                    movdqu(xmm0,  ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                    movdqu(xmm1,  ptr[r1 + 0x20 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    movdqu(xmm11, ptr[r1 + 0x10 - 0x41]);      // load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    lddqu(xmm12,  ptr[r1 + 0x28 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    lddqu(xmm13,  ptr[r1 + 0x18 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    lddqu(xmm14,  ptr[r1 + 0x08 - 0x41]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    //db({ 0xcc });
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 14);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 14);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 15);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 15);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 14);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 14);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 15);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 15);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                    
                    //movdqa(xmm1,  ptr[r1 + 0x20]);      //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    //movdqa(xmm11, ptr[r1 + 0x10]);      //load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    movdqa(xmm0,  ptr[r1 + 0x00]);      //load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 14);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 14);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 15);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 15);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    //lddqu(xmm13,  ptr[r1 + 0x18]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    //lddqu(xmm14,  ptr[r1 + 0x08]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    //movdqa(xmm0,  ptr[r1 + 0x00]);      // load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    //pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm13);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 9);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 9);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 10);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 10);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 11);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 11);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 12);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 12);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 13);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 13);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 14);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 14);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 15);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 15);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm14, 1);
                    BILINEARN(31, xmm6, 1);
                    
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 6:
                {
                    //Loading all the samples
                    movdqu(xmm0,  ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                    movdqu(xmm1,  ptr[r1 + 0x20 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    movdqu(xmm11, ptr[r1 + 0x10 - 0x41]);      // load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    lddqu(xmm12,  ptr[r1 + 0x28 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    lddqu(xmm13,  ptr[r1 + 0x18 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    lddqu(xmm14,  ptr[r1 + 0x08 - 0x41]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    //db({ 0xcc });
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(31, xmm6, 1);   

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                    
                    //movdqa(xmm1,  ptr[r1 + 0x20]);      //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    //movdqa(xmm11, ptr[r1 + 0x10]);      //load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    movdqa(xmm0,  ptr[r1 + 0x00]);      //load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    //lddqu(xmm13,  ptr[r1 + 0x18]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    //lddqu(xmm14,  ptr[r1 + 0x08]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    //movdqa(xmm0,  ptr[r1 + 0x00]);      // load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    //pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm13);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 9);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 9);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 10);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 10);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 10);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 11);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 11);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 12);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 12);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 13);
                    BILINEARN(31, xmm6, 1);
                    
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 7:
                {
                    //Loading all the samples
                    lddqu(xmm0,  ptr[r1 - 0x11]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                    lddqu(xmm1,  ptr[r1 - 0x21]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    lddqu(xmm11, ptr[r1 - 0x31]);      // load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    lddqu(xmm12,  ptr[r1 + 0x28 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    lddqu(xmm13,  ptr[r1 + 0x18 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    lddqu(xmm14,  ptr[r1 + 0x08 - 0x41]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    //db({ 0xcc });
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(31, xmm6, 1);   

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                    
                    //movdqa(xmm1,  ptr[r1 + 0x20]);      //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    //movdqa(xmm11, ptr[r1 + 0x10]);      //load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    movdqa(xmm0,  ptr[r1 + 0x00]);      //load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    //lddqu(xmm13,  ptr[r1 + 0x18]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    //lddqu(xmm14,  ptr[r1 + 0x08]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    //movdqa(xmm0,  ptr[r1 + 0x00]);      // load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    //pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm13);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 9);
                    BILINEARN(31, xmm6, 1);
                    
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 8:
                {
                    //Loading all the samples
                    lddqu(xmm0,  ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                    lddqu(xmm1,  ptr[r1 + 0x20 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    lddqu(xmm11, ptr[r1 + 0x10 - 0x41]);      // load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    lddqu(xmm12,  ptr[r1 + 0x28 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    lddqu(xmm13,  ptr[r1 + 0x18 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    lddqu(xmm14,  ptr[r1 + 0x08 - 0x41]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    //db({ 0xcc });
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(31, xmm6, 1);   

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                    
                    //movdqa(xmm1,  ptr[r1 + 0x20]);      //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    //movdqa(xmm11, ptr[r1 + 0x10]);      //load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    movdqa(xmm0,  ptr[r1 + 0x00]);      //load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm11);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    //lddqu(xmm13,  ptr[r1 + 0x18]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    //lddqu(xmm14,  ptr[r1 + 0x08]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    //movdqa(xmm0,  ptr[r1 + 0x00]);      // load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    //pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm13);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(31, xmm6, 1);
                    
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 9:
                {
                    //Loading all the samples
                    lddqu(xmm0,  ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                    lddqu(xmm1,  ptr[r1 + 0x20 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    lddqu(xmm11, ptr[r1 + 0x10 - 0x41]);      // load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    lddqu(xmm12,  ptr[r1 + 0x28 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                    lddqu(xmm13,  ptr[r1 + 0x18 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    lddqu(xmm14,  ptr[r1 + 0x08 - 0x41]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    //db({ 0xcc });
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm0);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    palignr(xmm7, xmm0, 1);
                    BILINEARN(16, xmm3, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(17, xmm3, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(18, xmm4, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(19, xmm4, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(20, xmm5, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(21, xmm5, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(22, xmm6, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    palignr(xmm7, xmm0, 1);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(31, xmm6, 1);   

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm12);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(14, xmm6, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    palignr(xmm7, xmm12, 1);
                    BILINEARN(16, xmm3, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(17, xmm3, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(18, xmm4, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(19, xmm4, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(20, xmm5, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(21, xmm5, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(22, xmm6, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    palignr(xmm7, xmm12, 1);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                    
                    //movdqa(xmm1,  ptr[r1 + 0x20]);      //load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                    //movdqa(xmm11, ptr[r1 + 0x10]);      //load vertical   data [0 + 16] = pos 16...31. (aligned) 48 --> 32
                    movdqa(xmm0,  ptr[r1 + 0x00]);      //load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm11, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(14, xmm6, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    palignr(xmm7, xmm1, 1);
                    BILINEARN(16, xmm3, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(17, xmm3, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(18, xmm4, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(19, xmm4, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(20, xmm5, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(21, xmm5, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(22, xmm6, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    palignr(xmm7, xmm1, 1);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    //lddqu(xmm13,  ptr[r1 + 0x18]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                    //lddqu(xmm14,  ptr[r1 + 0x08]);      // load vertical   data [0 +  8] = pos  8...23. (aligned) 56 --> 41
                    //movdqa(xmm0,  ptr[r1 + 0x00]);      // load vertical   data [0 + 16] = pos 48...64. (aligned) 64 --> 48
                    //pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm14, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                    //pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                    movdqa(xmm7, xmm13);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(5, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    BILINEARN(6, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm13);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    BILINEARN(14, xmm6, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(15, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    palignr(xmm7, xmm13, 1);
                    BILINEARN(16, xmm3, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(17, xmm3, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(18, xmm4, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(19, xmm4, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(20, xmm5, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(21, xmm5, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(22, xmm6, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(23, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    palignr(xmm7, xmm13, 1);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(31, xmm6, 1);
                    
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                default: assert(0);
            }
#undef TRANSPOSE_AND_COPY_8x8
#undef BILINEARN
#undef INSERT_LINE
        }
    };

template <typename Sample>
struct IntraPredAng32x32_27to34_PosAng_SSE_8bits :
    Jit::Function
    {
        IntraPredAng32x32_27to34_PosAng_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }
        Xbyak::Label add16;
        Xbyak::Label maskleft;
        Xbyak::Label maskLine;
        Xbyak::Label maskshuffle8;
        Xbyak::Label dfm_hor;
        Xbyak::Label dfm_ver;

        int mode;
        int mode_mask;

        void data()
        {
            align(32);
            L(add16);
            dw({16, 16, 16, 16, 16, 16, 16, 16}, 1);

            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(maskLine);
            db({0, 1, 1, 2, 2, 3,  3,  4,  4, 5, 5, 6, 6, 7, 7, 8});
        
            align(32);
            L(maskshuffle8);
            db({0, 2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 0, 0, 0, 0, 0}); 

            align(32);
            L(dfm_ver);
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 27 == 9
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 27 == 9
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 27 == 9
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 27 == 9
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 27 == 9
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 27 == 9
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 27 == 9
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 27 == 9
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 27 == 9
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 27 == 9
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 27 == 9
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 27 == 9
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 27 == 9
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 27 == 9
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 27 == 9
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 27 == 9
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 27 == 9
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 27 == 9
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 27 == 9
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 27 == 9
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 27 == 9
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 27 == 9
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 27 == 9
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 27 == 9
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 27 == 9
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 27 == 9
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 27 == 9
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 27 == 9
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 27 == 9
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 27 == 9
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 27 == 9
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 27 == 9
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 28 == 8
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 28 == 8
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 28 == 8
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 28 == 8
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 28 == 8
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 28 == 8
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 28 == 8
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 28 == 8
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 28 == 8
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 28 == 8
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 28 == 8
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 28 == 8
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 28 == 8
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 28 == 8
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 28 == 8
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 28 == 8
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 28 == 8
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 28 == 8
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 28 == 8
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 28 == 8
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 28 == 8
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 28 == 8
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 28 == 8
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 28 == 8
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 28 == 8
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 28 == 8
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 28 == 8
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 28 == 8
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 28 == 8
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 28 == 8
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 28 == 8
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 28 == 8
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 29 == 7
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 29 == 7
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 29 == 7
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 29 == 7
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 29 == 7
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 29 == 7
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 29 == 7
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 29 == 7
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 29 == 7
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 29 == 7
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 29 == 7
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 29 == 7
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 29 == 7
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 29 == 7
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 29 == 7
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 29 == 7
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 29 == 7
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 29 == 7
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 29 == 7
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 29 == 7
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 29 == 7
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 29 == 7
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 29 == 7
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 29 == 7
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 29 == 7
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 29 == 7
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 29 == 7
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 29 == 7
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 29 == 7
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 29 == 7
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 29 == 7
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 29 == 7
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 30 == 6
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 30 == 6
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 30 == 6
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 30 == 6
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 30 == 6
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 30 == 6
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 30 == 6
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 30 == 6
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 30 == 6
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 30 == 6
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 30 == 6
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 30 == 6
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 30 == 6
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 30 == 6
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 30 == 6
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 30 == 6
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 30 == 6
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 30 == 6
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 30 == 6
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 30 == 6
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 30 == 6
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 30 == 6
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 30 == 6
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 30 == 6
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 30 == 6
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 30 == 6
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 30 == 6
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 30 == 6
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 30 == 6
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 30 == 6
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 30 == 6
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 30 == 6
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 31 == 5
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 31 == 5
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 31 == 5
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 31 == 5
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 31 == 5
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 31 == 5
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 31 == 5
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 31 == 5
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 31 == 5
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 31 == 5
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 31 == 5
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 31 == 5
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 31 == 5
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 31 == 5
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 31 == 5
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 31 == 5
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 31 == 5
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 31 == 5
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 31 == 5
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 31 == 5
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 31 == 5
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 31 == 5
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 31 == 5
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 31 == 5
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 31 == 5
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 31 == 5
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 31 == 5
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 31 == 5
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 31 == 5
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 31 == 5
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 31 == 5
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 31 == 5
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 32 == 4
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 32 == 4
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 32 == 4
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 32 == 4
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 32 == 4
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 32 == 4
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 32 == 4
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 32 == 4
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 32 == 4
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 32 == 4
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 32 == 4
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 32 == 4
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 32 == 4
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 32 == 4
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 32 == 4
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 32 == 4
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 32 == 4
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 32 == 4
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 32 == 4
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 32 == 4
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 32 == 4
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 32 == 4
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 32 == 4
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 32 == 4
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 32 == 4
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 32 == 4
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 32 == 4
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 32 == 4
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 32 == 4
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 32 == 4
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 32 == 4
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 32 == 4
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 33 == 3
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 33 == 3
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 33 == 3
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 33 == 3
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 33 == 3
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 33 == 3
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 33 == 3
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 33 == 3
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 33 == 3
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 33 == 3
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 33 == 3
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 33 == 3
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 33 == 3
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 33 == 3
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 33 == 3
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 33 == 3
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 33 == 3
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 33 == 3
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 33 == 3
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 33 == 3
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 33 == 3
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 33 == 3
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 33 == 3
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 33 == 3
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 33 == 3
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 33 == 3
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 33 == 3
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 33 == 3
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 33 == 3
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 33 == 3
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 33 == 3
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 33 == 3
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
            db({ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}); // mode 34 == 2
         }
        
         void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0  = arg64(0); // Sample *dst
            auto &r3  = arg64(1); // dst_stride
            auto &r1  = arg64(2); // const Sample *neighbours
            auto ul   = arg64(3); // neigh_corner
            auto &g4  = reg64(4);

            auto &g6  = reg64(5);
            auto &g7  = reg64(11);
            auto &g8  = reg64(12);
            auto &g9  = reg64(13);
            auto &g10 = reg64(14);

            int size_1 =   sizeof(Sample);
            int size_2 = 2*sizeof(Sample);

             if (mode != 34)
            {
                lea(g6,  ptr[r3 * size_1]); // stride
                lea(g7,  ptr[r3 * size_2]); // stride * 2
                lea(g8,  ptr[g7 + g6]);     // stride * 3
                lea(g9,  ptr[g8 + g6]);     // stride * 4
                lea(g10, ptr[r0 + g9]);     // stride * 4
            }

            mov(ul, byte[r1 - 1]);

            //Loading all the samples
            mode_mask = mode - 27;
            lea(g4, ptr[rip + dfm_ver]);
 
#define TRANSPOSE_AND_COPY_8x8(mode_in, stride, last)              \
            if  (mode_in != 34)                                    \
            {                                                      \
                pextrq(ptr[r0  +       (stride*8) ], xmm3, 0);     \
                pextrq(ptr[r0  + (g6 + (stride*8))], xmm3, 1);     \
                pextrq(ptr[r0  + (g7 + (stride*8))], xmm4, 0);     \
                pextrq(ptr[r0  + (g8 + (stride*8))], xmm4, 1);     \
                pextrq(ptr[g10 +       (stride*8) ], xmm5, 0);     \
                pextrq(ptr[g10 + (g6 + (stride*8))], xmm5, 1);     \
                pextrq(ptr[g10 + (g7 + (stride*8))], xmm6, 0);     \
                pextrq(ptr[g10 + (g8 + (stride*8))], xmm6, 1);     \
            }                                                      \
            if ((stride == 3) && (!last))                          \
            {                                                      \
                lea(r0, ptr[r0 + g6*8]); /* Move 8 lines */        \
                lea(g10, ptr[r0 + g9]);  /* stride * 4   */        \
            }

#define BILINEARN(n, output, posout)                               \
            pshufb(xmm7, ptr[rip + maskLine]);                     \
            pmaddubsw(xmm7, ptr[g4 + (((mode_mask*32) +  n)*16)]); \
            paddw(xmm7, ptr[rip + add16]);                         \
            psrlw(xmm7, 5);                                        \
            pshufb(xmm7, ptr[rip + maskshuffle8]);                 \
            pextrq(rax, xmm7, 0);                                  \
            pinsrq(output, rax, posout);

#define INSERT_LINE(line, pixels_0, pixels_1, pixels_2, pixels_3, last) \
            movdqa(xmm4, pixels_1);                                     \
            palignr(xmm4, pixels_0, line);                              \
            movdqa(ptr[r0], xmm4);                                      \
            movdqa(xmm5, pixels_3);                                     \
            palignr(xmm5, pixels_2, line);                              \
            movdqa(ptr[r0 + (16 * sizeof(Sample))], xmm5);              \
            if (!last)                                                  \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            switch (mode)
            {
                case 34:
                {
                    //Loading all the samples
                    movdqa(xmm0, ptr[r1]); //load horizontal data (aligned)  0 --> 15
                    movdqa(xmm1, ptr[r1 + 0x10]); //load horizontal data (aligned) 16 --> 31
                    movdqa(xmm2, ptr[r1 + 0x20]); //load horizontal data (aligned) 31 --> 47
                    movdqa(xmm3, ptr[r1 + 0x30]); //load horizontal data (aligned) 48 --> 64
                    //db({ 0xcc });

                    INSERT_LINE( 1, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 2, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 3, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 4, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 5, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 6, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 7, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 8, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE( 9, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(10, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(11, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(12, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(13, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(14, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(15, xmm0, xmm1, xmm1, xmm2, 0);
                    INSERT_LINE(16, xmm0, xmm1, xmm1, xmm2, 0);

                    INSERT_LINE( 1, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 2, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 3, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 4, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 5, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 6, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 7, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 8, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE( 9, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(10, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(11, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(12, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(13, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(14, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(15, xmm1, xmm2, xmm2, xmm3, 0);
                    INSERT_LINE(16, xmm1, xmm2, xmm2, xmm3, 1);
                }
                break;
                case 33:
                {
                    //Loading all the samples
                    movdqa(xmm0,  ptr[r1]); //load horizontal data [0 +  64] = pos 64....79. (aligned)  0 --> 15
                    movdqa(xmm1,  ptr[r1 + 0x10]); //load horizontal data [0 +  80] = pos 80....95. (aligned) 16 --> 31
                    movdqa(xmm2,  ptr[r1 + 0x20]); //load horizontal data [0 +  96] = pos 96...111. (aligned) 31 --> 47
                    movdqa(xmm14, ptr[r1 + 0x30]); //load horizontal data [0 + 112] = pos 112..127. (aligned) 48 --> 64
                    //Loading all the samples
                    lddqu(xmm11,  ptr[r1 + 0x8]); //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                    lddqu(xmm12,  ptr[r1 + 0x18]); //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39
                    lddqu(xmm13,  ptr[r1 + 0x28]); //load horizontal data [0 + 104] = pos 104..119 (aligned)  40 --> 55

                    /// First 4 top row 8x8
                    
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                   
                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                    
                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// ------------------->>  Second 4 rows of 8x8s

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 13);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    /// Third 4 rows of 8x8s-------------------------------------->
                    
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 14);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 15);
                    BILINEARN(18, xmm4, 0);
                    
                    movdqa(xmm7, xmm1);
                    BILINEARN(19, xmm4, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(20, xmm5, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(21, xmm5, 1);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(22, xmm6, 0);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                    
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 13);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 14);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 15);
                    BILINEARN(18, xmm4, 0);
                    
                    movdqa(xmm7, xmm12);
                    BILINEARN(19, xmm4, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(20, xmm5, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(21, xmm5, 1);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(22, xmm6, 0);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(23, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
                    
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 14);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 15);
                    BILINEARN(18, xmm4, 0);
                    
                    movdqa(xmm7, xmm2);
                    BILINEARN(19, xmm4, 1);
                    palignr(xmm7, xmm2, 1);
                    BILINEARN(20, xmm5, 0);
                    palignr(xmm7, xmm2, 1);
                    BILINEARN(21, xmm5, 1);
                    palignr(xmm7, xmm2, 2);
                    BILINEARN(22, xmm6, 0);
                    palignr(xmm7, xmm2, 3);
                    BILINEARN(23, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 14);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 15);
                    BILINEARN(18, xmm4, 0);
                    
                    movdqa(xmm7, xmm13);
                    BILINEARN(19, xmm4, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(20, xmm5, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(21, xmm5, 1);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(22, xmm6, 0);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(23, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    /// ------------------> Fourth 4 rows of 8x8s

                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(31, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm2, 4);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm2, 5);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm2, 5);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm2, 6);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm2, 7);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm2, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm2, 9);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm2, 10);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    psrldq(xmm14, 8);
                
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 6);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 7);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 9);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm14);
                    palignr(xmm7, xmm13, 10);
                    BILINEARN(31, xmm6, 1);
             
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);

                }
                break;
                case 32:
                {
                    //Loading all the samples
                    movdqa(xmm0,  ptr[r1]); //load horizontal data [0 +  64] = pos 64....79. (aligned)  0 --> 15
                    movdqa(xmm1,  ptr[r1 + 0x10]); //load horizontal data [0 +  80] = pos 80....95. (aligned) 16 --> 31
                    movdqa(xmm2,  ptr[r1 + 0x20]); //load horizontal data [0 +  96] = pos 96...111. (aligned) 31 --> 47
                    movdqa(xmm14, ptr[r1 + 0x30]); //load horizontal data [0 + 112] = pos 112..127. (aligned) 48 --> 64
                    //Loading all the samples
                    lddqu(xmm11,  ptr[r1 + 0x8]); //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                    lddqu(xmm12,  ptr[r1 + 0x18]); //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39
                    lddqu(xmm13,  ptr[r1 + 0x28]); //load horizontal data [0 + 104] = pos 104..119 (aligned)  40 --> 55

                    /// First 4 top row 8x8
                    
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(7, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                   
                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                    
                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// ------------------->>  Second 4 rows of 8x8s

                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 10);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    //db({ 0xcc });
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(15, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    /// Third 4 rows of 8x8s-------------------------------------->
                    
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 14);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 15);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 15);
                    BILINEARN(23, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                    
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 11);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 11);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 12);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 13);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 13);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 14);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 15);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 15);
                    BILINEARN(23, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
                    
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 14);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 15);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 15);
                    BILINEARN(23, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 14);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 15);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 15);
                    BILINEARN(23, xmm6, 1);

                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                    /// ------------------> Fourth 4 rows of 8x8s

                    movdqa(xmm7, xmm1);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                    movdqa(xmm7, xmm12);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(31, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                    movdqa(xmm7, xmm2);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm2, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm2, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm2, 2);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm2, 3);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm2, 3);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm2, 4);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm2, 5);
                    BILINEARN(31, xmm6, 1);

                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                
                    movdqa(xmm7, xmm13);
                    BILINEARN(24, xmm3, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(25, xmm3, 1);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(26, xmm4, 0);
                    palignr(xmm7, xmm13, 2);
                    BILINEARN(27, xmm4, 1);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(28, xmm5, 0);
                    palignr(xmm7, xmm13, 3);
                    BILINEARN(29, xmm5, 1);
                    palignr(xmm7, xmm13, 4);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm13, 5);
                    BILINEARN(31, xmm6, 1);
             
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 31:
                {
                    //Loading all the samples
                    movdqa(xmm0,  ptr[r1]); //load horizontal data [0 +  64] = pos 64....79. (aligned)  0 --> 15
                    movdqa(xmm1,  ptr[r1 + 0x10]); //load horizontal data [0 +  80] = pos 80....95. (aligned) 16 --> 31
                    movdqa(xmm2,  ptr[r1 + 0x20]); //load horizontal data [0 +  96] = pos 96...111. (aligned) 31 --> 47
                    movdqa(xmm14, ptr[r1 + 0x30]); //load horizontal data [0 + 112] = pos 112..127. (aligned) 48 --> 64
                    //Loading all the samples
                    lddqu(xmm11,  ptr[r1 + 0x8]); //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                    lddqu(xmm12,  ptr[r1 + 0x18]); //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39
                    lddqu(xmm13,  ptr[r1 + 0x28]); //load horizontal data [0 + 104] = pos 104..119 (aligned)  40 --> 55
  
                    /// First 4 top row 8x8
                    
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(7, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                   
                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                    
                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// ------------------->>  Second 4 rows of 8x8s
  
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(15, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    //db({ 0xcc });
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(15, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// Third 4 rows of 8x8s-------------------------------------->
                    
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                    
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 10);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 10);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 11);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 11);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 12);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 12);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
                    
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
  
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// ------------------> Fourth 4 rows of 8x8s
  
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 14);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 14);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 15);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 15);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(31, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
  
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 13);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 13);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 14);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 14);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 15);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 15);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(31, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 14);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 14);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 15);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 15);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm2, 1);
                    BILINEARN(31, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 14);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 14);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 15);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 15);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    BILINEARN(30, xmm6, 0);
                    palignr(xmm7, xmm13, 1);
                    BILINEARN(31, xmm6, 1);
             
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 30:
                {
                    //Loading all the samples
                    movdqa(xmm0,  ptr[r1]); //load horizontal data [0 +  64] = pos 64....79. (aligned)  0 --> 15
                    movdqa(xmm1,  ptr[r1 + 0x10]); //load horizontal data [0 +  80] = pos 80....95. (aligned) 16 --> 31
                    movdqa(xmm2,  ptr[r1 + 0x20]); //load horizontal data [0 +  96] = pos 96...111. (aligned) 31 --> 47
                    movdqa(xmm14, ptr[r1 + 0x30]); //load horizontal data [0 + 112] = pos 112..127. (aligned) 48 --> 64
                    //Loading all the samples
                    lddqu(xmm11,  ptr[r1 + 0x8]); //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                    lddqu(xmm12,  ptr[r1 + 0x18]); //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39
                    lddqu(xmm13,  ptr[r1 + 0x28]); //load horizontal data [0 + 104] = pos 104..119 (aligned)  40 --> 55
  
                    /// First 4 top row 8x8
                    
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(7, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                   
                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                    
                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(1, xmm3, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// ------------------->>  Second 4 rows of 8x8s
  
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(15, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    //db({ 0xcc });
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(15, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// Third 4 rows of 8x8s-------------------------------------->
                    
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                    
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
                    
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
  
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// ------------------> Fourth 4 rows of 8x8s
  
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 10);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 11);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 12);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 13);
                    BILINEARN(31, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
  
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 10);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 10);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 10);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 11);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 11);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 12);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 12);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 13);
                    BILINEARN(31, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 10);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 11);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 12);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 13);
                    BILINEARN(31, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 10);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 11);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 12);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 13);
                    BILINEARN(31, xmm6, 1);
             
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 29:
                {
                    //Loading all the samples
                    movdqa(xmm0,  ptr[r1]); //load horizontal data [0 +  64] = pos 64....79. (aligned)  0 --> 15
                    movdqa(xmm1,  ptr[r1 + 0x10]); //load horizontal data [0 +  80] = pos 80....95. (aligned) 16 --> 31
                    movdqa(xmm2,  ptr[r1 + 0x20]); //load horizontal data [0 +  96] = pos 96...111. (aligned) 31 --> 47
                    movdqa(xmm14, ptr[r1 + 0x30]); //load horizontal data [0 + 112] = pos 112..127. (aligned) 48 --> 64
                    //Loading all the samples
                    lddqu(xmm11,  ptr[r1 + 0x8]); //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                    lddqu(xmm12,  ptr[r1 + 0x18]); //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39
                    lddqu(xmm13,  ptr[r1 + 0x28]); //load horizontal data [0 + 104] = pos 104..119 (aligned)  40 --> 55
  
                    /// First 4 top row 8x8
                    
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(7, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                   
                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                    
                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(2, xmm4, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(3, xmm4, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(4, xmm5, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// ------------------->>  Second 4 rows of 8x8s
  
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(15, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    //db({ 0xcc });
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(15, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// Third 4 rows of 8x8s-------------------------------------->
                    
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 6);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                    
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 6);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
                    
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 6);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
  
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 6);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// ------------------> Fourth 4 rows of 8x8s
  
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 7);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 8);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 9);
                    BILINEARN(31, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
  
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 7);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 8);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 9);
                    BILINEARN(31, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 7);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 8);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 9);
                    BILINEARN(31, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 7);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 8);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 9);
                    BILINEARN(31, xmm6, 1);
             
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 28:
                {
                    //Loading all the samples
                    movdqa(xmm0,  ptr[r1]); //load horizontal data [0 +  64] = pos 64....79. (aligned)  0 --> 15
                    movdqa(xmm1,  ptr[r1 + 0x10]); //load horizontal data [0 +  80] = pos 80....95. (aligned) 16 --> 31
                    movdqa(xmm2,  ptr[r1 + 0x20]); //load horizontal data [0 +  96] = pos 96...111. (aligned) 31 --> 47
                    movdqa(xmm14, ptr[r1 + 0x30]); //load horizontal data [0 + 112] = pos 112..127. (aligned) 48 --> 64
                    //Loading all the samples
                    lddqu(xmm11,  ptr[r1 + 0x8]); //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                    lddqu(xmm12,  ptr[r1 + 0x18]); //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39
                    lddqu(xmm13,  ptr[r1 + 0x28]); //load horizontal data [0 + 104] = pos 104..119 (aligned)  40 --> 55
  
                    /// First 4 top row 8x8
                    
                    movdqa(xmm7, xmm0);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm0);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm0);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(7, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                   
                    movdqa(xmm7, xmm11);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm11);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm11);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    movdqa(xmm7, xmm1);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                    
                    movdqa(xmm7, xmm12);
                    BILINEARN(0, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(1, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(2, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(3, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    BILINEARN(4, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    BILINEARN(5, xmm5, 1);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(6, xmm6, 0);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(7, xmm6, 1);
                        
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// ------------------->>  Second 4 rows of 8x8s
  
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(15, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    //db({ 0xcc });
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(15, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(8, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(9, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(10, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 1);
                    BILINEARN(11, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(12, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(13, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(14, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(15, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// Third 4 rows of 8x8s-------------------------------------->
                    
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 2);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                    
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 2);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
                    
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 2);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
  
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(16, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(17, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 2);
                    BILINEARN(18, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(19, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(20, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(21, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(22, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(23, xmm6, 1);
  
                    //db({ 0xcc });
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
  
                    /// ------------------> Fourth 4 rows of 8x8s
  
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 3);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 4);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm1);
                    palignr(xmm7, xmm0, 5);
                    BILINEARN(31, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
  
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 3);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 4);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm12);
                    palignr(xmm7, xmm11, 5);
                    BILINEARN(31, xmm6, 1);
                
                    TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
  
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 3);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 4);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm2);
                    palignr(xmm7, xmm1, 5);
                    BILINEARN(31, xmm6, 1);
  
                    TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 3);
                    BILINEARN(24, xmm3, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(25, xmm3, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(26, xmm4, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(27, xmm4, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(28, xmm5, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(29, xmm5, 1);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 4);
                    BILINEARN(30, xmm6, 0);
                    movdqa(xmm7, xmm13);
                    palignr(xmm7, xmm12, 5);
                    BILINEARN(31, xmm6, 1);
             
                    TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 27:
                {
                     //Loading all the samples
                     movdqa(xmm0,  ptr[r1]); //load horizontal data [0 +  64] = pos 64....79. (aligned)  0 --> 15
                     movdqa(xmm1,  ptr[r1 + 0x10]); //load horizontal data [0 +  80] = pos 80....95. (aligned) 16 --> 31
                     movdqa(xmm2,  ptr[r1 + 0x20]); //load horizontal data [0 +  96] = pos 96...111. (aligned) 31 --> 47
                     movdqa(xmm14, ptr[r1 + 0x30]); //load horizontal data [0 + 112] = pos 112..127. (aligned) 48 --> 64
                     //Loading all the samples
                     lddqu(xmm11,  ptr[r1 + 0x8]); //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                     lddqu(xmm12,  ptr[r1 + 0x18]); //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39
                     lddqu(xmm13,  ptr[r1 + 0x28]); //load horizontal data [0 + 104] = pos 104..119 (aligned)  40 --> 55
                 
                     /// First 4 top row 8x8
                     
                     movdqa(xmm7, xmm0);
                     BILINEARN(0, xmm3, 0);
                     movdqa(xmm7, xmm0);
                     BILINEARN(1, xmm3, 1);
                     movdqa(xmm7, xmm0);
                     BILINEARN(2, xmm4, 0);
                     movdqa(xmm7, xmm0);
                     BILINEARN(3, xmm4, 1);
                     movdqa(xmm7, xmm0);
                     BILINEARN(4, xmm5, 0);
                     movdqa(xmm7, xmm0);
                     BILINEARN(5, xmm5, 1);
                     movdqa(xmm7, xmm0);
                     BILINEARN(6, xmm6, 0);
                     movdqa(xmm7, xmm0);
                     BILINEARN(7, xmm6, 1);
                 
                     //db({ 0xcc });
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                    
                     movdqa(xmm7, xmm11);
                     BILINEARN(0, xmm3, 0);
                     movdqa(xmm7, xmm11);
                     BILINEARN(1, xmm3, 1);
                     movdqa(xmm7, xmm11);
                     BILINEARN(2, xmm4, 0);
                     movdqa(xmm7, xmm11);
                     BILINEARN(3, xmm4, 1);
                     movdqa(xmm7, xmm11);
                     BILINEARN(4, xmm5, 0);
                     movdqa(xmm7, xmm11);
                     BILINEARN(5, xmm5, 1);
                     movdqa(xmm7, xmm11);
                     BILINEARN(6, xmm6, 0);
                     movdqa(xmm7, xmm11);
                     BILINEARN(7, xmm6, 1);
                         
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
                 
                     movdqa(xmm7, xmm1);
                     BILINEARN(0, xmm3, 0);
                     movdqa(xmm7, xmm1);
                     BILINEARN(1, xmm3, 1);
                     movdqa(xmm7, xmm1);
                     BILINEARN(2, xmm4, 0);
                     movdqa(xmm7, xmm1);
                     BILINEARN(3, xmm4, 1);
                     movdqa(xmm7, xmm1);
                     BILINEARN(4, xmm5, 0);
                     movdqa(xmm7, xmm1);
                     BILINEARN(5, xmm5, 1);
                     movdqa(xmm7, xmm1);
                     BILINEARN(6, xmm6, 0);
                     movdqa(xmm7, xmm1);
                     BILINEARN(7, xmm6, 1);
                         
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                     
                     movdqa(xmm7, xmm12);
                     BILINEARN(0, xmm3, 0);
                     movdqa(xmm7, xmm12);
                     BILINEARN(1, xmm3, 1);
                     movdqa(xmm7, xmm12);
                     BILINEARN(2, xmm4, 0);
                     movdqa(xmm7, xmm12);
                     BILINEARN(3, xmm4, 1);
                     movdqa(xmm7, xmm12);
                     BILINEARN(4, xmm5, 0);
                     movdqa(xmm7, xmm12);
                     BILINEARN(5, xmm5, 1);
                     movdqa(xmm7, xmm12);
                     BILINEARN(6, xmm6, 0);
                     movdqa(xmm7, xmm12);
                     BILINEARN(7, xmm6, 1);
                         
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                 
                     /// ------------------->>  Second 4 rows of 8x8s
                 
                     movdqa(xmm7, xmm0);
                     BILINEARN(8, xmm3, 0);
                     movdqa(xmm7, xmm0);
                     BILINEARN(9, xmm3, 1);
                     movdqa(xmm7, xmm0);
                     BILINEARN(10, xmm4, 0);
                     movdqa(xmm7, xmm0);
                     BILINEARN(11, xmm4, 1);
                     movdqa(xmm7, xmm0);
                     BILINEARN(12, xmm5, 0);
                     movdqa(xmm7, xmm0);
                     BILINEARN(13, xmm5, 1);
                     movdqa(xmm7, xmm0);
                     BILINEARN(14, xmm6, 0);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(15, xmm6, 1);
                 
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                 
                     movdqa(xmm7, xmm11);
                     BILINEARN(8, xmm3, 0);
                     movdqa(xmm7, xmm11);
                     BILINEARN(9, xmm3, 1);
                     movdqa(xmm7, xmm11);
                     BILINEARN(10, xmm4, 0);
                     movdqa(xmm7, xmm11);
                     BILINEARN(11, xmm4, 1);
                     movdqa(xmm7, xmm11);
                     BILINEARN(12, xmm5, 0);
                     movdqa(xmm7, xmm11);
                     BILINEARN(13, xmm5, 1);
                     movdqa(xmm7, xmm11);
                     BILINEARN(14, xmm6, 0);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(15, xmm6, 1);
                 
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
                 
                     //db({ 0xcc });
                     movdqa(xmm7, xmm1);
                     BILINEARN(8, xmm3, 0);
                     movdqa(xmm7, xmm1);
                     BILINEARN(9, xmm3, 1);
                     movdqa(xmm7, xmm1);
                     BILINEARN(10, xmm4, 0);
                     movdqa(xmm7, xmm1);
                     BILINEARN(11, xmm4, 1);
                     movdqa(xmm7, xmm1);
                     BILINEARN(12, xmm5, 0);
                     movdqa(xmm7, xmm1);
                     BILINEARN(13, xmm5, 1);
                     movdqa(xmm7, xmm1);
                     BILINEARN(14, xmm6, 0);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(15, xmm6, 1);
                 
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                 
                     movdqa(xmm7, xmm12);
                     BILINEARN(8, xmm3, 0);
                     movdqa(xmm7, xmm12);
                     BILINEARN(9, xmm3, 1);
                     movdqa(xmm7, xmm12);
                     BILINEARN(10, xmm4, 0);
                     movdqa(xmm7, xmm12);
                     BILINEARN(11, xmm4, 1);
                     movdqa(xmm7, xmm12);
                     BILINEARN(12, xmm5, 0);
                     movdqa(xmm7, xmm12);
                     BILINEARN(13, xmm5, 1);
                     movdqa(xmm7, xmm12);
                     BILINEARN(14, xmm6, 0);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(15, xmm6, 1);
                 
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                 
                     /// Third 4 rows of 8x8s-------------------------------------->
                     
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(16, xmm3, 0);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(17, xmm3, 1);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(18, xmm4, 0);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(19, xmm4, 1);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(20, xmm5, 0);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(21, xmm5, 1);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(22, xmm6, 0);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(23, xmm6, 1);
                 
                     //db({ 0xcc });
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                     
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(16, xmm3, 0);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(17, xmm3, 1);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(18, xmm4, 0);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(19, xmm4, 1);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(20, xmm5, 0);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(21, xmm5, 1);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(22, xmm6, 0);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(23, xmm6, 1);
                 
                     //db({ 0xcc });
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
                     
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(16, xmm3, 0);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(17, xmm3, 1);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(18, xmm4, 0);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(19, xmm4, 1);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(20, xmm5, 0);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(21, xmm5, 1);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(22, xmm6, 0);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(23, xmm6, 1);
                 
                     //db({ 0xcc });
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                 
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(16, xmm3, 0);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(17, xmm3, 1);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(18, xmm4, 0);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(19, xmm4, 1);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(20, xmm5, 0);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(21, xmm5, 1);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(22, xmm6, 0);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(23, xmm6, 1);
                 
                     //db({ 0xcc });
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                 
                     /// ------------------> Fourth 4 rows of 8x8s
                 
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(24, xmm3, 0);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(25, xmm3, 1);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(26, xmm4, 0);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(27, xmm4, 1);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(28, xmm5, 0);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(29, xmm5, 1);
                     palignr(xmm7, xmm0, 1);
                     BILINEARN(30, xmm6, 0);
                     palignr(xmm7, xmm0, 2);
                     BILINEARN(31, xmm6, 1);
                 
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
                 
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(24, xmm3, 0);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(25, xmm3, 1);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(26, xmm4, 0);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(27, xmm4, 1);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(28, xmm5, 0);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(29, xmm5, 1);
                     palignr(xmm7, xmm11, 1);
                     BILINEARN(30, xmm6, 0);
                     palignr(xmm7, xmm11, 2);
                     BILINEARN(31, xmm6, 1);
                 
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
                 
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(24, xmm3, 0);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(25, xmm3, 1);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(26, xmm4, 0);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(27, xmm4, 1);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(28, xmm5, 0);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(29, xmm5, 1);
                     palignr(xmm7, xmm1, 1);
                     BILINEARN(30, xmm6, 0);
                     palignr(xmm7, xmm1, 2);
                     BILINEARN(31, xmm6, 1);
                 
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
                 
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(24, xmm3, 0);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(25, xmm3, 1);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(26, xmm4, 0);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(27, xmm4, 1);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(28, xmm5, 0);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(29, xmm5, 1);
                     palignr(xmm7, xmm12, 1);
                     BILINEARN(30, xmm6, 0);
                     palignr(xmm7, xmm12, 2);
                     BILINEARN(31, xmm6, 1);
                 
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;

                default: assert(0);
            }
#undef TRANSPOSE_AND_COPY_8x8
#undef BILINEARN
#undef INSERT_LINE
        }
    };


template <typename Sample>
struct IntraPredAng32x32_11to17_NegAng_SSE_8bits :
    Jit::Function
    {
        IntraPredAng32x32_11to17_NegAng_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Xbyak::Label add16;
        Xbyak::Label maskleft;
        Xbyak::Label maskLine;
        Xbyak::Label maskshuffle8;
        Xbyak::Label dfm_hor;
        Xbyak::Label dfm_ver;

        int mode;
        int mode_mask;

        void data()
        {
            align(32);
            L(add16);
            dw({16, 16, 16, 16, 16, 16, 16, 16}, 1);

            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(maskLine);
            db({0, 1, 1, 2, 2, 3,  3,  4,  4, 5, 5, 6, 6, 7, 7, 8});

            align(32);
            L(maskshuffle8);
            db({0, 2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 0, 0, 0, 0, 0}); 

            align(32);
            L(dfm_hor);
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 11
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 11
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 11
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 11
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 11
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 11
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 11
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 11
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 11
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 11
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 11
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 11
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 11
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 11
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 11
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 11
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 11
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 11
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 11
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 11
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 11
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 11
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 11
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 11
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 11
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 11
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 11
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 11
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 11
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 11
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 11
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 11
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 12
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 12
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 12
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 12
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 12
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 12
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 12
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 12
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 12
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 12
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 12
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 12
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 12
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 12
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 12
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 12
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 12
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 12
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 12
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 12
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 12
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 12
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 12
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 12
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 12
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 12
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 12
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 12
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 12
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 12
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 12
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 12
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 13
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 13
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 13
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 13
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 13
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 13
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 13
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 13
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 13
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 13
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 13
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 13
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 13
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 13
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 13
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 13
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 13
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 13
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 13
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 13
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 13
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 13
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 13
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 13
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 13
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 13
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 13
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 13
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 13
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 13
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 13
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 13
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 14
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 14
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 14
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 14
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 14
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 14
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 14
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 14
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 14
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 14
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 14
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 14
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 14
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 14
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 14
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 14
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 14
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 14
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 14
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 14
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 14
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 14
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 14
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 14
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 14
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 14
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 14
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 14
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 14
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 14
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 14
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 14
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 15
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 15
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 15
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 15
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 15
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 15
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 15
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 15
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 15
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 15
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 15
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 15
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 15
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 15
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 15
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 15
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 15
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 15
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 15
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 15
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 15
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 15
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 15
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 15
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 15
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 15
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 15
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 15
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 15
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 15
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 15                 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 15
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 16
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 16
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 16
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 16
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 16
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 16
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 16
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 16
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 16
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 16
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 16
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 16
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 16
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 16
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 16
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 16
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 16
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 16
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 16
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 16
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 16
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 16
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 16
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 16
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 16
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 16
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 16
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 16
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 16
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 16
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 16
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 16                 
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 17
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 17
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 17
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 17
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 17
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 17
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 17
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 17
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 17
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 17
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 17
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 17
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 17
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 17
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 17
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 17
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 17
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 17
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 17
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 17
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 17
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 17
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 17
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 17
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 17
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 17
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 17
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 17
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 17
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 17
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 17
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 17

        }
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner
            auto &g4  = reg64(4);

            auto &g6  = reg64(5);
            auto &g7  = reg64(11);
            auto &g8  = reg64(12);
            auto &g9  = reg64(13);
            auto &g10 = reg64(14);

            int size_1 =   sizeof(Sample);
            int size_2 = 2*sizeof(Sample);

            //db({ 0xcc });
           
            lea(g6,  ptr[r3 * size_1]); // stride
            lea(g7,  ptr[r3 * size_2]); // stride * 2
            lea(g8,  ptr[g7 + g6]);     // stride * 3
            lea(g9,  ptr[g8 + g6]);     // stride * 4
            lea(g10, ptr[r0 + g9]);     // stride * 4

            // Set the proper mask index
            mode_mask = mode - 11;
            lea(g4, ptr[rip + dfm_hor]);

            mov(ul, byte[r1 - 1]); // review: not needed for all angles?

#define TRANSPOSE_AND_COPY_8x8(mode_in, stride, last)          \
            movdqa(xmm8, xmm3);                                \
            movdqa(xmm9, xmm4);                                \
            punpckhbw(xmm8, xmm9);                             \
            punpcklbw(xmm3, xmm4);                             \
            movdqa(xmm9, xmm8);                                \
            movdqa(xmm10, xmm3);                               \
            punpckhbw(xmm10, xmm9);                            \
            punpcklbw(xmm3, xmm8);                             \
            movdqa(xmm8, xmm5);                                \
            movdqa(xmm9, xmm6);                                \
            punpckhbw(xmm8, xmm9);                             \
            punpcklbw(xmm5, xmm6);                             \
            movdqa(xmm4, xmm8);                                \
            movdqa(xmm6, xmm5);                                \
            punpckhbw(xmm6, xmm4);                             \
            punpcklbw(xmm5, xmm8);                             \
            movdqa(xmm8, xmm3);     /* C | A */                \
            movdqa(xmm9, xmm10);    /* G | E */                \
            movdqa(xmm4, xmm5);     /* D | B */                \
            movdqa(xmm7, xmm6);     /* H | F */                \
            punpckldq(xmm8, xmm4);  /* B | A */                \
            punpckhdq(xmm3, xmm5);  /* D | C */                \
            punpckldq(xmm9, xmm7);  /* F | E */                \
            punpckhdq(xmm10, xmm6); /* H | G */                \
            pextrq(ptr[r0  +       (stride*8) ], xmm8, 0);     \
            pextrq(ptr[r0  + (g6 + (stride*8))], xmm8, 1);     \
            pextrq(ptr[r0  + (g7 + (stride*8))], xmm3, 0);     \
            pextrq(ptr[r0  + (g8 + (stride*8))], xmm3, 1);     \
            pextrq(ptr[g10 +       (stride*8) ], xmm9, 0);     \
            pextrq(ptr[g10 + (g6 + (stride*8))], xmm9, 1);     \
            pextrq(ptr[g10 + (g7 + (stride*8))], xmm10, 0);    \
            pextrq(ptr[g10 + (g8 + (stride*8))], xmm10, 1);    \
            if ((stride == 3) && (!last))                      \
            {                                                  \
                lea(r0, ptr[r0 + g6*8]); /* Move 8 lines */    \
                lea(g10, ptr[r0 + g9]);  /* stride * 4   */    \
            }

#define BILINEAR(n, input, output, posout)                         \
            movdqa(xmm7, input);                                   \
            pshufb(xmm7, ptr[rip + maskLine]);                     \
            pmaddubsw(xmm7, ptr[g4 + (((mode_mask*32) +  n)*16)]); \
            paddw(xmm7, ptr[rip + add16]);                         \
            psrlw(xmm7, 5);                                        \
            pshufb(xmm7, ptr[rip + maskshuffle8]);                 \
            pextrq(rax, xmm7, 0);                                  \
            pinsrq(output, rax, posout);

#define INSERT_PIXEL_RIGHT(input, output, posin, posout)                                         \
            pslldq(output, 1);           /* Shift to add a position                           */ \
            pextrb(rax, input, posin);   /* Extract the U/L1 (Note that it is position posin) */ \
            pinsrb(output, rax, posout); /* Insert  the U/L1 in position 0                    */

            switch (mode)
            {
                case 11:
                {
                     //Loading all the samples
                     movdqu(xmm0,  ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                     lddqu(xmm1,   ptr[r1 + 0x21 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                     lddqu(xmm12,  ptr[r1 + 0x29 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                     lddqu(xmm13,  ptr[r1 + 0x19 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                     pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     movdqa(xmm15, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);

                     //------------------------------> 1st

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm0,  xmm2, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 15, 0);
                     BILINEAR(16, xmm0, xmm3, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     BILINEAR(18, xmm0, xmm4, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     BILINEAR(20, xmm0, xmm5, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     BILINEAR(24, xmm0, xmm3, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     BILINEAR(28, xmm0, xmm5, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd

                     BILINEAR(0, xmm12, xmm3, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     BILINEAR(2, xmm12, xmm4, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     BILINEAR(6, xmm12, xmm6, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm12, xmm3, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     BILINEAR(10, xmm12, xmm4, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     BILINEAR(12, xmm12, xmm5, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     BILINEAR(14, xmm12, xmm6, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 8, 0);
                     BILINEAR(16, xmm12, xmm3, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     BILINEAR(18, xmm12, xmm4, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     BILINEAR(20, xmm12, xmm5, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     BILINEAR(24, xmm12, xmm3, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     BILINEAR(28, xmm12, xmm5, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd

                     BILINEAR(0, xmm1, xmm3, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     BILINEAR(2, xmm1, xmm4, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     BILINEAR(6, xmm1, xmm6, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm1, xmm3, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     BILINEAR(10, xmm1, xmm4, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     BILINEAR(12, xmm1, xmm5, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     BILINEAR(14, xmm1, xmm6, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm2, xmm1, 0, 0);
                     BILINEAR(16, xmm1, xmm3, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     BILINEAR(18, xmm1, xmm4, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     BILINEAR(20, xmm1, xmm5, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     BILINEAR(24, xmm1, xmm3, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     BILINEAR(28, xmm1, xmm5, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th
                     BILINEAR(0, xmm13, xmm3, 0);
                     BILINEAR(1, xmm13, xmm3, 1);
                     BILINEAR(2, xmm13, xmm4, 0);
                     BILINEAR(3, xmm13, xmm4, 1);
                     BILINEAR(4, xmm13, xmm5, 0);
                     BILINEAR(5, xmm13, xmm5, 1);
                     BILINEAR(6, xmm13, xmm6, 0);
                     BILINEAR(7, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm13, xmm3, 0);
                     BILINEAR(9,  xmm13, xmm3, 1);
                     BILINEAR(10, xmm13, xmm4, 0);
                     BILINEAR(11, xmm13, xmm4, 1);
                     BILINEAR(12, xmm13, xmm5, 0);
                     BILINEAR(13, xmm13, xmm5, 1);
                     BILINEAR(14, xmm13, xmm6, 0);
                     BILINEAR(15, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 8, 0);
                     BILINEAR(16, xmm13, xmm3, 0);
                     BILINEAR(17, xmm13, xmm3, 1);
                     BILINEAR(18, xmm13, xmm4, 0);
                     BILINEAR(19, xmm13, xmm4, 1);
                     BILINEAR(20, xmm13, xmm5, 0);
                     BILINEAR(21, xmm13, xmm5, 1);
                     BILINEAR(22, xmm13, xmm6, 0);
                     BILINEAR(23, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     BILINEAR(24, xmm13, xmm3, 0);
                     BILINEAR(25, xmm13, xmm3, 1);
                     BILINEAR(26, xmm13, xmm4, 0);
                     BILINEAR(27, xmm13, xmm4, 1);
                     BILINEAR(28, xmm13, xmm5, 0);
                     BILINEAR(29, xmm13, xmm5, 1);
                     BILINEAR(30, xmm13, xmm6, 0);
                     BILINEAR(31, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 12:
                {
                     //Loading all the samples
                     movdqu(xmm0,  ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                     lddqu(xmm1,   ptr[r1 + 0x21 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                     lddqu(xmm12,  ptr[r1 + 0x29 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                     lddqu(xmm13,  ptr[r1 + 0x19 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                     pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     movdqa(xmm15, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     movdqa(xmm2, ptr[r1 + 0x10]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     //------------------------------> 1st
                     // -1 -1 -1 -1 -1 -1   -2 -2 -2 -2 -2 -2   -3 -3 -3 -3 -3 -3 -3   -4 -4 -4 -4 -4 -4   -5 -5 -5 -5 -5 -5 -5 
                     //  0  1  2  3  4  5    6  7  8  9 10 11   12 13 14 15 16 17 18   19 20 21 22 23 24   25 26 27 28 29 30 31
                     //                      6                  13                     19                  26

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  13, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(16, xmm0, xmm3, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     BILINEAR(18, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,   2, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     BILINEAR(20, xmm0, xmm5, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(24, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,   9, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     BILINEAR(28, xmm0, xmm5, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd

                     BILINEAR(0, xmm12, xmm3, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     BILINEAR(2, xmm12, xmm4, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 11, 0);
                     BILINEAR(6, xmm12, xmm6, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm12, xmm3, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     BILINEAR(10, xmm12, xmm4, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 10, 0);
                     BILINEAR(12, xmm12, xmm5, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     BILINEAR(14, xmm12, xmm6, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(16, xmm12, xmm3, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     BILINEAR(18, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 9, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     BILINEAR(20, xmm12, xmm5, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(24, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 8, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     BILINEAR(28, xmm12, xmm5, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd

                     BILINEAR(0, xmm1, xmm3, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     BILINEAR(2, xmm1, xmm4, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 3, 0);
                     BILINEAR(6, xmm1, xmm6, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm1, xmm3, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     BILINEAR(10, xmm1, xmm4, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 2, 0);
                     BILINEAR(12, xmm1, xmm5, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     BILINEAR(14, xmm1, xmm6, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(16, xmm1, xmm3, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     BILINEAR(18, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 1, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     BILINEAR(20, xmm1, xmm5, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(24, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 0, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     BILINEAR(28, xmm1, xmm5, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th
                     BILINEAR(0, xmm13, xmm3, 0);
                     BILINEAR(1, xmm13, xmm3, 1);
                     BILINEAR(2, xmm13, xmm4, 0);
                     BILINEAR(3, xmm13, xmm4, 1);
                     BILINEAR(4, xmm13, xmm5, 0);
                     BILINEAR(5, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 11, 0);
                     BILINEAR(6, xmm13, xmm6, 0);
                     BILINEAR(7, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm13, xmm3, 0);
                     BILINEAR(9,  xmm13, xmm3, 1);
                     BILINEAR(10, xmm13, xmm4, 0);
                     BILINEAR(11, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 10, 0);
                     BILINEAR(12, xmm13, xmm5, 0);
                     BILINEAR(13, xmm13, xmm5, 1);
                     BILINEAR(14, xmm13, xmm6, 0);
                     BILINEAR(15, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(16, xmm13, xmm3, 0);
                     BILINEAR(17, xmm13, xmm3, 1);
                     BILINEAR(18, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 9, 0);
                     BILINEAR(19, xmm13, xmm4, 1);
                     BILINEAR(20, xmm13, xmm5, 0);
                     BILINEAR(21, xmm13, xmm5, 1);
                     BILINEAR(22, xmm13, xmm6, 0);
                     BILINEAR(23, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(24, xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 8, 0);
                     BILINEAR(25, xmm13, xmm3, 1);
                     BILINEAR(26, xmm13, xmm4, 0);
                     BILINEAR(27, xmm13, xmm4, 1);
                     BILINEAR(28, xmm13, xmm5, 0);
                     BILINEAR(29, xmm13, xmm5, 1);
                     BILINEAR(30, xmm13, xmm6, 0);
                     BILINEAR(31, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 13:
                {
                     //Loading all the samples
                     lddqu(xmm0,  ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                     lddqu(xmm1,   ptr[r1 + 0x21 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                     lddqu(xmm12,  ptr[r1 + 0x29 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                     lddqu(xmm13,  ptr[r1 + 0x19 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                     pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     movdqa(xmm15, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     movdqa(xmm2, ptr[r1 + 0x10]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     //------------------------------> 1st
                     // -1 -1 -1   -2 -2 -2 -2  -3 -3 -3   -4 -4 -4 -4   -5 -5 -5   -6 -6 -6 -6   -7 -7 -7   -8 -8 -8 -8   -9 -9 -9 -9  
                     //  0  1  2    3  4  5  6   7  8  9   10 11 12 13   14 15 16   17 18 19 20   21 22 23   24 25 26 27   28 29 30 31
                     //             4            7         11            14         18            21         25            28

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  11, 0);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  14, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(16, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   1, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     BILINEAR(18, xmm0, xmm4, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     BILINEAR(20, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   4, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   8, 0);
                     BILINEAR(24, xmm0, xmm3, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  11, 0);
                     BILINEAR(28, xmm0, xmm5, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd
                     // -1 -1 -1   -2 -2 -2 -2  -3 -3 -3   -4 -4 -4 -4   -5 -5 -5   -6 -6 -6 -6   -7 -7 -7   -8 -8 -8 -8   -9 -9 -9 -9  
                     //  0  1  2    3  4  5  6   7  8  9   10 11 12 13   14 15 16   17 18 19 20   21 22 23   24 25 26 27   28 29 30 31
                     //             4            7         11            14         18            21         25            28
                     BILINEAR(0, xmm12, xmm3, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     BILINEAR(2, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 15, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     BILINEAR(6, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 14, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm12, xmm3, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 13, 0);
                     BILINEAR(10, xmm12, xmm4, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     BILINEAR(12, xmm12, xmm5, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 12, 0);
                     BILINEAR(14, xmm12, xmm6, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(16, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 11, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     BILINEAR(18, xmm12, xmm4, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     BILINEAR(20, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 10, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  9, 0);
                     BILINEAR(24, xmm12, xmm3, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  8, 0);
                     BILINEAR(28, xmm12, xmm5, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd
                     // -1 -1 -1   -2 -2 -2 -2  -3 -3 -3   -4 -4 -4 -4   -5 -5 -5   -6 -6 -6 -6   -7 -7 -7   -8 -8 -8 -8   -9 -9 -9 -9  
                     //  0  1  2    3  4  5  6   7  8  9   10 11 12 13   14 15 16   17 18 19 20   21 22 23   24 25 26 27   28 29 30 31
                     //             4            7         11            14         18            21         25            28
                     BILINEAR(0, xmm1, xmm3, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     BILINEAR(2, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 7, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     BILINEAR(6, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 6, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm1, xmm3, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 5, 0);
                     BILINEAR(10, xmm1, xmm4, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     BILINEAR(12, xmm1, xmm5, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 4, 0);
                     BILINEAR(14, xmm1, xmm6, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(16, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 3, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     BILINEAR(18, xmm1, xmm4, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     BILINEAR(20, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 2, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 1, 0);
                     BILINEAR(24, xmm1, xmm3, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 0, 0);
                     BILINEAR(28, xmm1, xmm5, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th
                     // -1 -1 -1   -2 -2 -2 -2  -3 -3 -3   -4 -4 -4 -4   -5 -5 -5   -6 -6 -6 -6   -7 -7 -7   -8 -8 -8 -8   -9 -9 -9 -9  
                     //  0  1  2    3  4  5  6   7  8  9   10 11 12 13   14 15 16   17 18 19 20   21 22 23   24 25 26 27   28 29 30 31
                     //             4            7         11            14         18            21         25            28

                     BILINEAR(0, xmm13, xmm3, 0);
                     BILINEAR(1, xmm13, xmm3, 1);
                     BILINEAR(2, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 15, 0);
                     BILINEAR(3, xmm13, xmm4, 1);
                     BILINEAR(4, xmm13, xmm5, 0);
                     BILINEAR(5, xmm13, xmm5, 1);
                     BILINEAR(6, xmm13, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 14, 0);
                     BILINEAR(7, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm13, xmm3, 0);
                     BILINEAR(9,  xmm13, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 13, 0);
                     BILINEAR(10, xmm13, xmm4, 0);
                     BILINEAR(11, xmm13, xmm4, 1);
                     BILINEAR(12, xmm13, xmm5, 0);
                     BILINEAR(13, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 12, 0);
                     BILINEAR(14, xmm13, xmm6, 0);
                     BILINEAR(15, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(16, xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 11, 0);
                     BILINEAR(17, xmm13, xmm3, 1);
                     BILINEAR(18, xmm13, xmm4, 0);
                     BILINEAR(19, xmm13, xmm4, 1);
                     BILINEAR(20, xmm13, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 10, 0);
                     BILINEAR(21, xmm13, xmm5, 1);
                     BILINEAR(22, xmm13, xmm6, 0);
                     BILINEAR(23, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution requir ed
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  9, 0);
                     BILINEAR(24, xmm13, xmm3, 0);
                     BILINEAR(25, xmm13, xmm3, 1);
                     BILINEAR(26, xmm13, xmm4, 0);
                     BILINEAR(27, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  8, 0);
                     BILINEAR(28, xmm13, xmm5, 0);
                     BILINEAR(29, xmm13, xmm5, 1);
                     BILINEAR(30, xmm13, xmm6, 0);
                     BILINEAR(31, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 14:
                {
                     //Loading all the samples
                     movdqu(xmm0,  ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                     lddqu(xmm1,   ptr[r1 + 0x21 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                     lddqu(xmm12,  ptr[r1 + 0x29 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                     lddqu(xmm13,  ptr[r1 + 0x19 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                     pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     movdqa(xmm15, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     movdqa(xmm2, ptr[r1 + 0x10]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     //------------------------------> 1st
                     // -1 -1  -2 -2   -3 -3 -3   -4 -4   -5 -5 -5   -6 -6   -7 -7 -7   -8 -8   -9 -9 -9   -10 -10  -11 -11 -11  -12 -12  -13 -13 -13 
                     //  0  1   2  3    4  5  6    7  8    9 10 11   12 13   14 15 16   17 18   19 20 21    22  23   24  25  26   27  28   29  30  31
                     //         2       5          7      10         12      15         17      20          22       25           27       30

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   2, 0);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  10, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  15, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(16, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   0, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     BILINEAR(18, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   3, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     BILINEAR(20, xmm0, xmm5, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   5, 0);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   8, 0);
                     BILINEAR(24, xmm0, xmm3, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  10, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     BILINEAR(28, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  13, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd
                     // -1 -1  -2 -2   -3 -3 -3   -4 -4   -5 -5 -5   -6 -6   -7 -7 -7   -8 -8   -9 -9 -9   -10 -10  -11 -11 -11  -12 -12  -13 -13 -13 
                     //  0  1   2  3    4  5  6    7  8    9 10 11   12 13   14 15 16   17 18   19 20 21    22  23   24  25  26   27  28   29  30  31
                     //         2       5          7      10         12      15         17      20          22       25           27       30
                     BILINEAR(0, xmm12, xmm3, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 3, 0);
                     BILINEAR(2, xmm12, xmm4, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 2, 0);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     BILINEAR(6, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 1, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 0, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     BILINEAR(10, xmm12, xmm4, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 15, 0);
                     BILINEAR(12, xmm12, xmm5, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 14, 0);
                     BILINEAR(14, xmm12, xmm6, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(16, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 13, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     BILINEAR(18, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 12, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     BILINEAR(20, xmm12, xmm5, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 11, 0);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 10, 0);
                     BILINEAR(24, xmm12, xmm3, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  9, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     BILINEAR(28, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  8, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd
                     // -1 -1  -2 -2   -3 -3 -3   -4 -4   -5 -5 -5   -6 -6   -7 -7 -7   -8 -8   -9 -9 -9   -10 -10  -11 -11 -11  -12 -12  -13 -13 -13 
                     //  0  1   2  3    4  5  6    7  8    9 10 11   12 13   14 15 16   17 18   19 20 21    22  23   24  25  26   27  28   29  30  31
                     //         2       5          7      10         12      15         17      20          22       25           27       30
                     BILINEAR(0, xmm1, xmm3, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(2, xmm1, xmm4, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     BILINEAR(6, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     BILINEAR(10, xmm1, xmm4, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  7, 0);
                     BILINEAR(12, xmm1, xmm5, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  6, 0);
                     BILINEAR(14, xmm1, xmm6, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(16, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  5, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     BILINEAR(18, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  4, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     BILINEAR(20, xmm1, xmm5, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  3, 0);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  2, 0);
                     BILINEAR(24, xmm1, xmm3, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  1, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     BILINEAR(28, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  0, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th
                     // -1 -1  -2 -2   -3 -3 -3   -4 -4   -5 -5 -5   -6 -6   -7 -7 -7   -8 -8   -9 -9 -9   -10 -10  -11 -11 -11  -12 -12  -13 -13 -13 
                     //  0  1   2  3    4  5  6    7  8    9 10 11   12 13   14 15 16   17 18   19 20 21    22  23   24  25  26   27  28   29  30  31
                     //         2       5          7      10         12      15         17      20          22       25           27       30

                     BILINEAR(0, xmm13, xmm3, 0);
                     BILINEAR(1, xmm13, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  3, 0);
                     BILINEAR(2, xmm13, xmm4, 0);
                     BILINEAR(3, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  2, 0);
                     BILINEAR(4, xmm13, xmm5, 0);
                     BILINEAR(5, xmm13, xmm5, 1);
                     BILINEAR(6, xmm13, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  1, 0);
                     BILINEAR(7, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  0, 0);
                     BILINEAR(9,  xmm13, xmm3, 1);
                     BILINEAR(10, xmm13, xmm4, 0);
                     BILINEAR(11, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  15, 0);
                     BILINEAR(12, xmm13, xmm5, 0);
                     BILINEAR(13, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  14, 0);
                     BILINEAR(14, xmm13, xmm6, 0);
                     BILINEAR(15, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(16, xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 13, 0);
                     BILINEAR(17, xmm13, xmm3, 1);
                     BILINEAR(18, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 12, 0);
                     BILINEAR(19, xmm13, xmm4, 1);
                     BILINEAR(20, xmm13, xmm5, 0);
                     BILINEAR(21, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 11, 0);
                     BILINEAR(22, xmm13, xmm6, 0);
                     BILINEAR(23, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 10, 0);
                     BILINEAR(24, xmm13, xmm3, 0);
                     BILINEAR(25, xmm13, xmm3, 1);
                     BILINEAR(26, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  9, 0);
                     BILINEAR(27, xmm13, xmm4, 1);
                     BILINEAR(28, xmm13, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  8, 0);
                     BILINEAR(29, xmm13, xmm5, 1);
                     BILINEAR(30, xmm13, xmm6, 0);
                     BILINEAR(31, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 15:
                {
                     //Loading all the samples
                     movdqu(xmm0,  ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                     lddqu(xmm1,   ptr[r1 + 0x21 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                     lddqu(xmm12,  ptr[r1 + 0x29 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                     lddqu(xmm13,  ptr[r1 + 0x19 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                     pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     movdqa(xmm15, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     movdqa(xmm2, ptr[r1 + 0x10]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     //------------------------------> 1st
                     // -1   -2 -2   -3 -3   -4 -4   -5 -5   -6 -6   -7 -7   -8 -8   -9   -10 -10   -11 -11  -12 -12   -13 -13   -14 -14   -15 -15   -16 -16   -17 -17 
                     //  0    1  2    3  4    5  6    7  8    9 10   11 12   13 14   15    16  17    18  19   20  21    22  23    24  25    26  27    28  29    30  31
                     //       2       4       6       8       9      11      13      15    17        19       21        23        24        26        28        30

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   2, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   6, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   8, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   9, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  11, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  13, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  15, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   0, 0);
                     BILINEAR(16, xmm0, xmm3, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   2, 0);
                     BILINEAR(18, xmm0, xmm4, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   4, 0);
                     BILINEAR(20, xmm0, xmm5, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   6, 0);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   7, 0);
                     BILINEAR(24, xmm0, xmm3, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   9, 0);
                     BILINEAR(26, xmm0, xmm4, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  11, 0);
                     BILINEAR(28, xmm0, xmm5, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  13, 0);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd
                     // -1   -2 -2   -3 -3   -4 -4   -5 -5   -6 -6   -7 -7   -8 -8   -9   -10 -10   -11 -11  -12 -12   -13 -13   -14 -14   -15 -15   -16 -16   -17 -17 
                     //  0    1  2    3  4    5  6    7  8    9 10   11 12   13 14   15    16  17    18  19   20  21    22  23    24  25    26  27    28  29    30  31
                     //       2       4       6       8       9      11      13      15    17        19       21        23        24        26        28        30
                     BILINEAR(0, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 7, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     BILINEAR(2, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 6, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     BILINEAR(4, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     BILINEAR(6, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 4, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  3, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     BILINEAR(10, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  2, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     BILINEAR(12, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  1, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     BILINEAR(14, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  0, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 15, 0);
                     BILINEAR(16, xmm12, xmm3, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 14, 0);
                     BILINEAR(18, xmm12, xmm4, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 13, 0);
                     BILINEAR(20, xmm12, xmm5, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 12, 0);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 11, 0);
                     BILINEAR(24, xmm12, xmm3, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12, 10, 0);
                     BILINEAR(26, xmm12, xmm4, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  9, 0);
                     BILINEAR(28, xmm12, xmm5, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  8, 0);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd
                     // -1   -2 -2   -3 -3   -4 -4   -5 -5   -6 -6   -7 -7   -8 -8   -9   -10 -10   -11 -11  -12 -12   -13 -13   -14 -14   -15 -15   -16 -16   -17 -17 
                     //  0    1  2    3  4    5  6    7  8    9 10   11 12   13 14   15    16  17    18  19   20  21    22  23    24  25    26  27    28  29    30  31
                     //       2       4       6       8       9      11      13      15    17        19       21        23        24        26        28        30
                     BILINEAR(0, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  15, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     BILINEAR(2, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  14, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     BILINEAR(4, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  13, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     BILINEAR(6, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  12, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  11, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     BILINEAR(10, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  10, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     BILINEAR(12, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   9, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     BILINEAR(14, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   8, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   7, 0);
                     BILINEAR(16, xmm1, xmm3, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   6, 0);
                     BILINEAR(18, xmm1, xmm4, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   5, 0);
                     BILINEAR(20, xmm1, xmm5, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   4, 0);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   3, 0);
                     BILINEAR(24, xmm1, xmm3, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   2, 0);
                     BILINEAR(26, xmm1, xmm4, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   1, 0);
                     BILINEAR(28, xmm1, xmm5, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   0, 0);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th
                     // -1   -2 -2   -3 -3   -4 -4   -5 -5   -6 -6   -7 -7   -8 -8   -9   -10 -10   -11 -11  -12 -12   -13 -13   -14 -14   -15 -15   -16 -16   -17 -17 
                     //  0    1  2    3  4    5  6    7  8    9 10   11 12   13 14   15    16  17    18  19   20  21    22  23    24  25    26  27    28  29    30  31
                     //       2       4       6       8       9      11      13      15    17        19       21        23        24        26        28        30

                     BILINEAR(0, xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  7, 0);
                     BILINEAR(1, xmm13, xmm3, 1);
                     BILINEAR(2, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  6, 0);
                     BILINEAR(3, xmm13, xmm4, 1);
                     BILINEAR(4, xmm13, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  5, 0);
                     BILINEAR(5, xmm13, xmm5, 1);
                     BILINEAR(6, xmm13, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  4, 0);
                     BILINEAR(7, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  3, 0);
                     BILINEAR(9,  xmm13, xmm3, 1);
                     BILINEAR(10, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  2, 0);
                     BILINEAR(11, xmm13, xmm4, 1);
                     BILINEAR(12, xmm13, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  1, 0);
                     BILINEAR(13, xmm13, xmm5, 1);
                     BILINEAR(14, xmm13, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  0, 0);
                     BILINEAR(15, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 15, 0);
                     BILINEAR(16, xmm13, xmm3, 0);
                     BILINEAR(17, xmm13, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 14, 0);
                     BILINEAR(18, xmm13, xmm4, 0);
                     BILINEAR(19, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 13, 0);
                     BILINEAR(20, xmm13, xmm5, 0);
                     BILINEAR(21, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 12, 0);
                     BILINEAR(22, xmm13, xmm6, 0);
                     BILINEAR(23, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution requir ed
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 11, 0);
                     BILINEAR(24, xmm13, xmm3, 0);
                     BILINEAR(25, xmm13, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 10, 0);
                     BILINEAR(26, xmm13, xmm4, 0);
                     BILINEAR(27, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  9, 0);
                     BILINEAR(28, xmm13, xmm5, 0);
                     BILINEAR(29, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  8, 0);
                     BILINEAR(30, xmm13, xmm6, 0);
                     BILINEAR(31, xmm13, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 16:   //// ====================== ////
                {
                     //Loading all the samples
                     movdqu(xmm0,  ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                     lddqu(xmm1,   ptr[r1 + 0x21 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                     lddqu(xmm12,  ptr[r1 + 0x29 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                     lddqu(xmm13,  ptr[r1 + 0x19 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                     pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     movdqa(xmm15, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     movdqa(xmm2, ptr[r1 + 0x10]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     //------------------------------> 1st
                     // -1   -2 -2   -3   -4 -4   -5   -6 -6   -7   -8 -8   -9   -10 -10   -11   -12 -12   -13   -14 -14   -15   -16 -16   -17   -18 -18   -19   -20 -20   -21 -21 
                     //  0    1  2    3    4  5    6    7  8    9   10 11   12    13  14    15    16  17    18    19  20    21    22  23    24    25  26    27    28  29    30  31
                     //       2       3    5       6    8       9   11      12    14        15    17        18    20        21    23        24    26        27    29        30
 
                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   2, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   3, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   8, 0);
                     BILINEAR(7, xmm0, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
 
                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   9, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  11, 0);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  14, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  15, 0);
                     BILINEAR(15, xmm0, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
 
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   0, 0);
                     BILINEAR(16, xmm0, xmm3, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   1, 0);
                     BILINEAR(18, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   3, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     BILINEAR(20, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   4, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   6, 0);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
 
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,   7, 0);
                     BILINEAR(24, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,   9, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,  10, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,  12, 0);
                     BILINEAR(28, xmm0, xmm5, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,  13, 0);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
 
                     //------------------------------> 2nd
                     // -1   -2 -2   -3   -4 -4   -5   -6 -6   -7   -8 -8   -9   -10 -10   -11   -12 -12   -13   -14 -14   -15   -16 -16   -17   -18 -18   -19   -20 -20   -21 -21 
                     //  0    1  2    3    4  5    6    7  8    9   10 11   12    13  14    15    16  17    18    19  20    21    22  23    24    25  26    27    28  29    30  31
                     //       2       3    5       6    8       9   11      12    14        15    17        18    20        21    23        24    26        27    29        30
                     BILINEAR(0, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 11, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     BILINEAR(2, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 10, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  9, 0);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  8, 0);
                     BILINEAR(6, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  7, 0);
                     BILINEAR(7, xmm12, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
 
                     BILINEAR(8,  xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  6, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  5, 0);
                     BILINEAR(10, xmm12, xmm4, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  4, 0);
                     BILINEAR(12, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  3, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     BILINEAR(14, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  2, 0);
                     BILINEAR(15, xmm12, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
 
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  1, 0);
                     BILINEAR(16, xmm12, xmm3, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  0, 0);
                     BILINEAR(18, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  15, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     BILINEAR(20, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  14, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  13, 0);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
 
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  12, 0);
                     BILINEAR(24, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  11, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  10, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,   9, 0);
                     BILINEAR(28, xmm12, xmm5, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,   8, 0);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
 
                     //------------------------------> 3rd
                     // -1   -2 -2   -3   -4 -4   -5   -6 -6   -7   -8 -8   -9   -10 -10   -11   -12 -12   -13   -14 -14   -15   -16 -16   -17   -18 -18   -19   -20 -20   -21 -21 
                     //  0    1  2    3    4  5    6    7  8    9   10 11   12    13  14    15    16  17    18    19  20    21    22  23    24    25  26    27    28  29    30  31
                     //       2       3    5       6    8       9   11      12    14        15    17        18    20        21    23        24    26        27    29        30
                     BILINEAR(0, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   3, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     BILINEAR(2, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   2, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   1, 0);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   0, 0);
                     BILINEAR(6, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  15, 0);
                     BILINEAR(7, xmm1, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
 
                     BILINEAR(8,  xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  14, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  13, 0);
                     BILINEAR(10, xmm1, xmm4, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  12, 0);
                     BILINEAR(12, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  11, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     BILINEAR(14, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  10, 0);
                     BILINEAR(15, xmm1, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
 
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   9, 0);
                     BILINEAR(16, xmm1, xmm3, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   8, 0);
                     BILINEAR(18, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   7, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     BILINEAR(20, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   6, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   5, 0);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
 
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   4, 0);
                     BILINEAR(24, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   3, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   2, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   1, 0);
                     BILINEAR(28, xmm1, xmm5, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   0, 0);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
 
                     //------------------------------> 4th
                     // -1   -2 -2   -3   -4 -4   -5   -6 -6   -7   -8 -8   -9   -10 -10   -11   -12 -12   -13   -14 -14   -15   -16 -16   -17   -18 -18   -19   -20 -20   -21 -21 
                     //  0    1  2    3    4  5    6    7  8    9   10 11   12    13  14    15    16  17    18    19  20    21    22  23    24    25  26    27    28  29    30  31
                     //       2       3    5       6    8       9   11      12    14        15    17        18    20        21    23        24    26        27    29        30

                     BILINEAR(0, xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 11, 0);
                     BILINEAR(1, xmm13, xmm3, 1);
                     BILINEAR(2, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 10, 0);
                     BILINEAR(3, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  9, 0);
                     BILINEAR(4, xmm13, xmm5, 0);
                     BILINEAR(5, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  8, 0);
                     BILINEAR(6, xmm13, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  7, 0);
                     BILINEAR(7, xmm13, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
 
                     BILINEAR(8,  xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  6, 0);
                     BILINEAR(9,  xmm13, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  5, 0);
                     BILINEAR(10, xmm13, xmm4, 0);
                     BILINEAR(11, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  4, 0);
                     BILINEAR(12, xmm13, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  3, 0);
                     BILINEAR(13, xmm13, xmm5, 1);
                     BILINEAR(14, xmm13, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  2, 0);
                     BILINEAR(15, xmm13, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
 
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  1, 0);
                     BILINEAR(16, xmm13, xmm3, 0);
                     BILINEAR(17, xmm13, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  0, 0);
                     BILINEAR(18, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  15, 0);
                     BILINEAR(19, xmm13, xmm4, 1);
                     BILINEAR(20, xmm13, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  14, 0);
                     BILINEAR(21, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  13, 0);
                     BILINEAR(22, xmm13, xmm6, 0);
                     BILINEAR(23, xmm13, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
 
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  12, 0);
                     BILINEAR(24, xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  11, 0);
                     BILINEAR(25, xmm13, xmm3, 1);
                     BILINEAR(26, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  10, 0);
                     BILINEAR(27, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,   9, 0);
                     BILINEAR(28, xmm13, xmm5, 0);
                     BILINEAR(29, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,   8, 0);
                     BILINEAR(30, xmm13, xmm6, 0);
                     BILINEAR(31, xmm13, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 17:
                {
                     //Loading all the samples
                     movdqu(xmm0,  ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...64. (aligned) 15 --> 0
                     lddqu(xmm1,   ptr[r1 + 0x21 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
                     lddqu(xmm12,  ptr[r1 + 0x29 - 0x41]);      // load vertical   data [0 + 40] = pos 40...56. (aligned) 24 --> 8
                     lddqu(xmm13,  ptr[r1 + 0x19 - 0x41]);      // load vertical   data [0 + 24] = pos 24...39. (aligned) 40 --> 23
                     pshufb(xmm0,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm1,  ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm12, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
                     pshufb(xmm13, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     movdqa(xmm15, ptr[r1]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     movdqa(xmm2, ptr[r1 + 0x10]);      // load horizontal data [0 + 64] = pos 64...78. (aligned)

                     //------------------------------> 1st
                     // -1   -2   -3   -4   -5 -5   -6   -7   -8   -9 -9   -10   -11   -12   -13 -13   -14   -15   -16   -17   -18 -18   -19   -20   -21  -22 -22   -23   -24   -25   -26 -26 
                     //  0    1    2    3    4  5    6    7    8    9 10    11    12    13    14  15    16    17    18    19    20  21    22    23    24   25  26    27    28    29    30  31
                     //       1    2    4    5       6    7    9   10       11    12    14    15        16    17    18    20    21        22    23    25   26        27    28    30    31
 
                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   1, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   2, 0);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
 
                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,   9, 0);
                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  10, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  11, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  14, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  15, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     movdqa(xmm15, ptr[r1]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0

                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  15, 0);
                     BILINEAR(16, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   0, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   1, 0);
                     BILINEAR(18, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,   3, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,   4, 0);
                     BILINEAR(20, xmm0, xmm5, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,   5, 0);
                     BILINEAR(22, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,   6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
 
                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,   8, 0);
                     BILINEAR(24, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,   9, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,  10, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,  11, 0);
                     BILINEAR(28, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,  13, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm0,  xmm11, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm2,  xmm0,  14, 0);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
 
                     //------------------------------> 2nd
                     // -1   -2   -3   -4   -5 -5   -6   -7   -8   -9 -9   -10   -11   -12   -13 -13   -14   -15   -16   -17   -18 -18   -19   -20   -21  -22 -22   -23   -24   -25   -26 -26 
                     //  0    1    2    3    4  5    6    7    8    9 10    11    12    13    14  15    16    17    18    19    20  21    22    23    24   25  26    27    28    29    30  31
                     //       1    2    4    5       6    7    9   10       11    12    14    15        16    17    18    20    21        22    23    25   26        27    28    30    31

                     BILINEAR(0, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm12,  0, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 15, 0);
                     BILINEAR(2, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 14, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 13, 0);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 12, 0);
                     BILINEAR(6, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 11, 0);
                     BILINEAR(7, xmm12, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
 
                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm11, xmm12, 10, 0);
                     BILINEAR(8,  xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  9, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     BILINEAR(10, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  8, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  7, 0);
                     BILINEAR(12, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  6, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  5, 0);
                     BILINEAR(14, xmm12, xmm6, 0);
                     BILINEAR(15, xmm12, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
 
                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  4, 0);
                     BILINEAR(16, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  3, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  2, 0);
                     BILINEAR(18, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  1, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm12,  0, 0);
                     BILINEAR(20, xmm12, xmm5, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  15, 0);
                     BILINEAR(22, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  14, 0);
                     BILINEAR(23, xmm12, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
 
                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  13, 0);
                     BILINEAR(24, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  12, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  11, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,  10, 0);
                     BILINEAR(28, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,   9, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm12,   8, 0);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
 
                     //------------------------------> 3rd
                     // -1   -2   -3   -4   -5 -5   -6   -7   -8   -9 -9   -10   -11   -12   -13 -13   -14   -15   -16   -17   -18 -18   -19   -20   -21  -22 -22   -23   -24   -25   -26 -26 
                     //  0    1    2    3    4  5    6    7    8    9 10    11    12    13    14  15    16    17    18    19    20  21    22    23    24   25  26    27    28    29    30  31
                     //       1    2    4    5       6    7    9   10       11    12    14    15        16    17    18    20    21        22    23    25   26        27    28    30    31

                     BILINEAR(0, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   8, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   7, 0);
                     BILINEAR(2, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   6, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   5, 0);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   4, 0);
                     BILINEAR(6, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   3, 0);
                     BILINEAR(7, xmm1, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
 
                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   2, 0);
                     BILINEAR(8,  xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   1, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     BILINEAR(10, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm1,   0, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  15, 0);
                     BILINEAR(12, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  14, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  13, 0);
                     BILINEAR(14, xmm1, xmm6, 0);
                     BILINEAR(15, xmm1, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
 
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  12, 0);
                     BILINEAR(16, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  11, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  10, 0);
                     BILINEAR(18, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   9, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   8, 0);
                     BILINEAR(20, xmm1, xmm5, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   7, 0);
                     BILINEAR(22, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
 
                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm14, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   5, 0);
                     BILINEAR(24, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   4, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   3, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   2, 0);
                     BILINEAR(28, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   1, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm15, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm1,  xmm14, 15, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,   0, 0);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
 
                     //------------------------------> 4th
                     // -1   -2   -3   -4   -5 -5   -6   -7   -8   -9 -9   -10   -11   -12   -13 -13   -14   -15   -16   -17   -18 -18   -19   -20   -21  -22 -22   -23   -24   -25   -26 -26 
                     //  0    1    2    3    4  5    6    7    8    9 10    11    12    13    14  15    16    17    18    19    20  21    22    23    24   25  26    27    28    29    30  31
                     //       1    2    4    5       6    7    9   10       11    12    14    15        16    17    18    20    21        22    23    25   26        27    28    30    31

                     BILINEAR(0, xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm13, 0, 0);
                     BILINEAR(1, xmm13, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 15, 0);
                     BILINEAR(2, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 14, 0);
                     BILINEAR(3, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 13, 0);
                     BILINEAR(4, xmm13, xmm5, 0);
                     BILINEAR(5, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 12, 0);
                     BILINEAR(6, xmm13, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 11, 0);
                     BILINEAR(7, xmm13, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);
 
                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 10, 0);
                     BILINEAR(8,  xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  9, 0);
                     BILINEAR(9,  xmm13, xmm3, 1);
                     BILINEAR(10, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  8, 0);
                     BILINEAR(11, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  7, 0);
                     BILINEAR(12, xmm13, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  6, 0);
                     BILINEAR(13, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13,  5, 0);
                     BILINEAR(14, xmm13, xmm6, 0);
                     BILINEAR(15, xmm13, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);
 
                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 4, 0);
                     BILINEAR(16, xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 3, 0);
                     BILINEAR(17, xmm13, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 2, 0);
                     BILINEAR(18, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 1, 0);
                     BILINEAR(19, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm14, xmm13, 0, 0);
                     BILINEAR(20, xmm13, xmm5, 0);
                     BILINEAR(21, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 15, 0);
                     BILINEAR(22, xmm13, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 14, 0);
                     BILINEAR(23, xmm13, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);
 
                     // No shift or substitution requir ed
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 13, 0);
                     BILINEAR(24, xmm13, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 12, 0);
                     BILINEAR(25, xmm13, xmm3, 1);
                     BILINEAR(26, xmm13, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 11, 0);
                     BILINEAR(27, xmm13, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13, 10, 0);
                     BILINEAR(28, xmm13, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  9, 0);
                     BILINEAR(29, xmm13, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm13,  8, 0);
                     BILINEAR(30, xmm13, xmm6, 0);
                     BILINEAR(31, xmm13, xmm6, 1);
 
                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                default: assert(0);
                break;
            }
#undef TRANSPOSE_AND_COPY_8x8
#undef BILINEAR
#undef INSERT_PIXEL_RIGHT
        }
    };

template <typename Sample>
struct IntraPredAng32x32_18to25_NegAng_SSE_8bits :
    Jit::Function
    {
        IntraPredAng32x32_18to25_NegAng_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Xbyak::Label add16;
        Xbyak::Label maskleft;
        Xbyak::Label maskLine;
        Xbyak::Label maskshuffle8;
        Xbyak::Label dfm_hor;
        Xbyak::Label dfm_ver;

        int mode;
        int mode_mask;

        void data()
        {
            align(32);
            L(add16);
            dw({16, 16, 16, 16, 16, 16, 16, 16}, 1);

            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(maskLine);
            db({0, 1, 1, 2, 2, 3,  3,  4,  4, 5, 5, 6, 6, 7, 7, 8});

            align(32);
            L(maskshuffle8);
            db({0, 2, 4, 6, 8, 10, 12, 14, 0, 0, 0, 0, 0, 0, 0, 0}); 

            align(32);
            L(dfm_ver);
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18 
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 18
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 19 == 17
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 19 == 17
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 19 == 17
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 19 == 17
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 19 == 17
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 19 == 17
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 19 == 17
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 19 == 17
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 19 == 17
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 19 == 17
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 19 == 17
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 19 == 17
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 19 == 17
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 19 == 17
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 19 == 17
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 19 == 17
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 19 == 17
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 19 == 17
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 19 == 17
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 19 == 17
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 19 == 17
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 19 == 17
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 19 == 17
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 19 == 17
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 19 == 17
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 19 == 17
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 19 == 17
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 19 == 17
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 19 == 17
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 19 == 17
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 19 == 17
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 19 == 17
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 20 == 16
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 20 == 16 
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 20 == 16
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 20 == 16
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 20 == 16
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 20 == 16
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 20 == 16
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 20 == 16
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 20 == 16
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 20 == 16
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 20 == 16
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 20 == 16
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 20 == 16
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 20 == 16
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 20 == 16
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 20 == 16
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 20 == 16
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 20 == 16
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 20 == 16
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 20 == 16
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 20 == 16
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 20 == 16
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 20 == 16
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 20 == 16
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 20 == 16
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 20 == 16
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 20 == 16
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 20 == 16
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 20 == 16
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 20 == 16
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 20 == 16
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 20 == 16
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 21 == 15
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 21 == 15
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 21 == 15
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 21 == 15
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 21 == 15
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 21 == 15
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 21 == 15
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 21 == 15
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 21 == 15
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 21 == 15
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 21 == 15
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 21 == 15
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 21 == 15
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 21 == 15
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 21 == 15
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 21 == 15
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 21 == 15
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 21 == 15 
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 21 == 15
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 21 == 15
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 21 == 15
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 21 == 15
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 21 == 15
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 21 == 15
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 21 == 15
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 21 == 15
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 21 == 15
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 21 == 15
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 21 == 15
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 21 == 15
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 21 == 15
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 21 == 15
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 22 == 14
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 22 == 14
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 22 == 14
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 22 == 14
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 22 == 14
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 22 == 14
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 22 == 14
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 22 == 14
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 22 == 14
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 22 == 14
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 22 == 14
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 22 == 14
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 22 == 14
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 22 == 14
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 22 == 14
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 22 == 14
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 22 == 14
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 22 == 14
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 22 == 14
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 22 == 14
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 22 == 14
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 22 == 14
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 22 == 14
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 22 == 14
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 22 == 14
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 22 == 14
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 22 == 14
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 22 == 14
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 22 == 14
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 22 == 14
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 22 == 14
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 22 == 14
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 23 == 13
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 23 == 13
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 23 == 13
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 23 == 13
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 23 == 13
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 23 == 13
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 23 == 13
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 23 == 13
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 23 == 13
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 23 == 13
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 23 == 13
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 23 == 13
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 23 == 13
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 23 == 13
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 23 == 13
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 23 == 13
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 23 == 13
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 23 == 13
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 23 == 13
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 23 == 13
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 23 == 13
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 23 == 13
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 23 == 13
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 23 == 13
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 23 == 13
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 23 == 13
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 23 == 13
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 23 == 13
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 23 == 13
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 23 == 13
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 23 == 13
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 23 == 13
            db({  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27}); // mode 24 == 12
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 24 == 12
            db({ 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17}); // mode 24 == 12
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 24 == 12
            db({ 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7}); // mode 24 == 12
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 24 == 12
            db({  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29}); // mode 24 == 12
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 24 == 12
            db({ 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19}); // mode 24 == 12
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 24 == 12
            db({ 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9}); // mode 24 == 12
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 24 == 12
            db({  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31}); // mode 24 == 12
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 24 == 12
            db({ 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21}); // mode 24 == 12
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 24 == 12
            db({ 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11, 21, 11}); // mode 24 == 12
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 24 == 12
            db({ 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1, 31,  1}); // mode 24 == 12
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 24 == 12
            db({  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23,  9, 23}); // mode 24 == 12
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 24 == 12
            db({ 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13, 19, 13}); // mode 24 == 12
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 24 == 12
            db({ 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3, 29,  3}); // mode 24 == 12
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 24 == 12
            db({  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25,  7, 25}); // mode 24 == 12
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 24 == 12
            db({ 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15, 17, 15}); // mode 24 == 12
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 24 == 12
            db({ 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5, 27,  5}); // mode 24 == 12
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 24 == 12
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 25 == 11
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 25 == 11
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 25 == 11
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 25 == 11
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 25 == 11
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 25 == 11
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 25 == 11
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 25 == 11
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 25 == 11
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 25 == 11
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 25 == 11
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 25 == 11
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 25 == 11
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 25 == 11
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 25 == 11
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 25 == 11
            db({  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30}); // mode 25 == 11
            db({  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28}); // mode 25 == 11
            db({  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26}); // mode 25 == 11
            db({  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24}); // mode 25 == 11
            db({ 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22}); // mode 25 == 11
            db({ 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20}); // mode 25 == 11
            db({ 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18}); // mode 25 == 11
            db({ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16}); // mode 25 == 11
            db({ 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14, 18, 14}); // mode 25 == 11
            db({ 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12, 20, 12}); // mode 25 == 11
            db({ 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10, 22, 10}); // mode 25 == 11
            db({ 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8, 24,  8}); // mode 25 == 11
            db({ 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6, 26,  6}); // mode 25 == 11
            db({ 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4, 28,  4}); // mode 25 == 11
            db({ 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2, 30,  2}); // mode 25 == 11
            db({ 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0, 32,  0}); // mode 25 == 11
        }
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours
            auto ul  = arg64(3); // neigh_corner
            auto &g4  = reg64(4);

            auto &g6  = reg64(5);
            auto &g7  = reg64(11);
            auto &g8  = reg64(12);
            auto &g9  = reg64(13);
            auto &g10 = reg64(14);

            int size_1 =   sizeof(Sample);
            int size_2 = 2*sizeof(Sample);

            //db({ 0xcc });
           
            lea(g6,  ptr[r3 * size_1]); // stride
            lea(g7,  ptr[r3 * size_2]); // stride * 2
            lea(g8,  ptr[g7 + g6]);     // stride * 3
            lea(g9,  ptr[g8 + g6]);     // stride * 4
            lea(g10, ptr[r0 + g9]);     // stride * 4

            // Set the proper mask index
            mode_mask = mode - 18;
            lea(g4, ptr[rip + dfm_ver]);

            mov(ul, byte[r1 - 1]); // review: not needed for all angles?

#define TRANSPOSE_AND_COPY_8x8(mode_in, stride, last)          \
            pextrq(ptr[r0  +       (stride*8) ], xmm3, 0);     \
            pextrq(ptr[r0  + (g6 + (stride*8))], xmm3, 1);     \
            pextrq(ptr[r0  + (g7 + (stride*8))], xmm4, 0);     \
            pextrq(ptr[r0  + (g8 + (stride*8))], xmm4, 1);     \
            pextrq(ptr[g10 +       (stride*8) ], xmm5, 0);     \
            pextrq(ptr[g10 + (g6 + (stride*8))], xmm5, 1);     \
            pextrq(ptr[g10 + (g7 + (stride*8))], xmm6, 0);     \
            pextrq(ptr[g10 + (g8 + (stride*8))], xmm6, 1);     \
            if ((stride == 3) && (!last))                      \
            {                                                  \
                lea(r0, ptr[r0 + g6*8]); /* Move 8 lines */    \
                lea(g10, ptr[r0 + g9]);  /* stride * 4   */    \
            }

#define BILINEAR(n, input, output, posout)                         \
            movdqa(xmm7, input);                                   \
            pshufb(xmm7, ptr[rip + maskLine]);                     \
            pmaddubsw(xmm7, ptr[g4 + (((mode_mask*32) +  n)*16)]); \
            paddw(xmm7, ptr[rip + add16]);                         \
            psrlw(xmm7, 5);                                        \
            pshufb(xmm7, ptr[rip + maskshuffle8]);                 \
            pextrq(rax, xmm7, 0);                                  \
            pinsrq(output, rax, posout);

#define INSERT_PIXEL_RIGHT(input, output, posin, posout)                                         \
            pslldq(output, 1);           /* Shift to add a position                           */ \
            pextrb(rax, input, posin);   /* Extract the U/L1 (Note that it is position posin) */ \
            pinsrb(output, rax, posout); /* Insert  the U/L1 in position 0                    */

            switch (mode)
            {
                case 25:
                {
                     //Loading all the samples
                     movdqa(xmm0,  ptr[r1]);      //load horizontal data [0 +  0] = pos  0...15. (aligned)  0 --> 15
                     lddqu(xmm1,  ptr[r1 + 0xf]);       //load horizontal data [0 + 16] = pos 16...31. (aligned) 16 --> 31
                     //Loading all the samples
                     lddqu(xmm11,  ptr[r1 + 0x7]);      //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                     lddqu(xmm12,  ptr[r1 + 0x17]);      //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39

                     movdqu(xmm15, ptr[r1 + 0x30 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);

                     //------------------------------> 1st

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm11, xmm3, 0);
                     BILINEAR(1, xmm11, xmm3, 1);
                     BILINEAR(2, xmm11, xmm4, 0);
                     BILINEAR(3, xmm11, xmm4, 1);
                     BILINEAR(4, xmm11, xmm5, 0);
                     BILINEAR(5, xmm11, xmm5, 1);
                     BILINEAR(6, xmm11, xmm6, 0);
                     BILINEAR(7, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm1, xmm3, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     BILINEAR(2, xmm1, xmm4, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     BILINEAR(6, xmm1, xmm6, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm12, xmm3, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     BILINEAR(2, xmm12, xmm4, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     BILINEAR(6, xmm12, xmm6, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd
                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm11, xmm3, 0);
                     BILINEAR(9,  xmm11, xmm3, 1);
                     BILINEAR(10, xmm11, xmm4, 0);
                     BILINEAR(11, xmm11, xmm4, 1);
                     BILINEAR(12, xmm11, xmm5, 0);
                     BILINEAR(13, xmm11, xmm5, 1);
                     BILINEAR(14, xmm11, xmm6, 0);
                     BILINEAR(15, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm1, xmm3, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     BILINEAR(10, xmm1, xmm4, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     BILINEAR(12, xmm1, xmm5, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     BILINEAR(14, xmm1, xmm6, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm12, xmm3, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     BILINEAR(10, xmm12, xmm4, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     BILINEAR(12, xmm12, xmm5, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     BILINEAR(14, xmm12, xmm6, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                     //------------------------------> 3rd
                     
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  15, 0);
                     BILINEAR(16, xmm0, xmm3, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     BILINEAR(18, xmm0, xmm4, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     BILINEAR(20, xmm0, xmm5, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(16, xmm11, xmm3, 0);
                     BILINEAR(17, xmm11, xmm3, 1);
                     BILINEAR(18, xmm11, xmm4, 0);
                     BILINEAR(19, xmm11, xmm4, 1);
                     BILINEAR(20, xmm11, xmm5, 0);
                     BILINEAR(21, xmm11, xmm5, 1);
                     BILINEAR(22, xmm11, xmm6, 0);
                     BILINEAR(23, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(16, xmm1, xmm3, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     BILINEAR(18, xmm1, xmm4, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     BILINEAR(20, xmm1, xmm5, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(16, xmm12, xmm3, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     BILINEAR(18, xmm12, xmm4, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     BILINEAR(20, xmm12, xmm5, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);
                     //------------------------------> 4th
                     BILINEAR(24, xmm0, xmm3, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     BILINEAR(28, xmm0, xmm5, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(24, xmm11, xmm3, 0);
                     BILINEAR(25, xmm11, xmm3, 1);
                     BILINEAR(26, xmm11, xmm4, 0);
                     BILINEAR(27, xmm11, xmm4, 1);
                     BILINEAR(28, xmm11, xmm5, 0);
                     BILINEAR(29, xmm11, xmm5, 1);
                     BILINEAR(30, xmm11, xmm6, 0);
                     BILINEAR(31, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(24, xmm1, xmm3, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     BILINEAR(28, xmm1, xmm5, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(24, xmm12, xmm3, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     BILINEAR(28, xmm12, xmm5, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 24:
                {
                     //Loading all the samples
                     movdqa(xmm0,  ptr[r1]);      //load horizontal data [0 +  0] = pos  0...15. (aligned)  0 --> 15
                     lddqu(xmm1,   ptr[r1 + 0xf]);      //load horizontal data [0 + 16] = pos 16...31. (aligned) 16 --> 31
                     //Loading all the samples
                     lddqu(xmm11,  ptr[r1 + 0x7]);      //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                     lddqu(xmm12,  ptr[r1 + 0x17]);      //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39

                     movdqu(xmm15, ptr[r1 + 0x30 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     //------------------------------> 1st

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm11, xmm3, 0);
                     BILINEAR(1, xmm11, xmm3, 1);
                     BILINEAR(2, xmm11, xmm4, 0);
                     BILINEAR(3, xmm11, xmm4, 1);
                     BILINEAR(4, xmm11, xmm5, 0);
                     BILINEAR(5, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(6, xmm11, xmm6, 0);
                     BILINEAR(7, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm1, xmm3, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     BILINEAR(2, xmm1, xmm4, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(6, xmm1, xmm6, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm12, xmm3, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     BILINEAR(2, xmm12, xmm4, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(6, xmm12, xmm6, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd
                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  13, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm11, xmm3, 0);
                     BILINEAR(9,  xmm11, xmm3, 1);
                     BILINEAR(10, xmm11, xmm4, 0);
                     BILINEAR(11, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(12, xmm11, xmm5, 0);
                     BILINEAR(13, xmm11, xmm5, 1);
                     BILINEAR(14, xmm11, xmm6, 0);
                     BILINEAR(15, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm1, xmm3, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     BILINEAR(10, xmm1, xmm4, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(12, xmm1, xmm5, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     BILINEAR(14, xmm1, xmm6, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm12, xmm3, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     BILINEAR(10, xmm12, xmm4, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(12, xmm12, xmm5, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     BILINEAR(14, xmm12, xmm6, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd
                     movdqu(xmm15, ptr[r1 + 0x20 - 0x41]);       //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     // -1 -1 -1 -1 -1 -1   -2 -2 -2 -2 -2 -2   -3 -3 -3 -3 -3 -3 -3   -4 -4 -4 -4 -4 -4   -5 -5 -5 -5 -5 -5 -5 
                     //  0  1  2  3  4  5    6  7  8  9 10 11   12 13 14 15 16 17 18   19 20 21 22 23 24   25 26 27 28 29 30 31
                     //                      6                  13                     19                  26

                     BILINEAR(16, xmm0, xmm3, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     BILINEAR(18, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 2, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     BILINEAR(20, xmm0, xmm5, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(16, xmm11, xmm3, 0);
                     BILINEAR(17, xmm11, xmm3, 1);
                     BILINEAR(18, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 8, 0);
                     BILINEAR(19, xmm11, xmm4, 1);
                     BILINEAR(20, xmm11, xmm5, 0);
                     BILINEAR(21, xmm11, xmm5, 1);
                     BILINEAR(22, xmm11, xmm6, 0);
                     BILINEAR(23, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(16, xmm1, xmm3, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     BILINEAR(18, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 8, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     BILINEAR(20, xmm1, xmm5, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     BILINEAR(16, xmm12, xmm3, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     BILINEAR(18, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 8, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     BILINEAR(20, xmm12, xmm5, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th

                     BILINEAR(24, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 9, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     BILINEAR(28, xmm0, xmm5, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(24, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 8, 0);
                     BILINEAR(25, xmm11, xmm3, 1);
                     BILINEAR(26, xmm11, xmm4, 0);
                     BILINEAR(27, xmm11, xmm4, 1);
                     BILINEAR(28, xmm11, xmm5, 0);
                     BILINEAR(29, xmm11, xmm5, 1);
                     BILINEAR(30, xmm11, xmm6, 0);
                     BILINEAR(31, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(24, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 8, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     BILINEAR(28, xmm1, xmm5, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(24, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 8, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     BILINEAR(28, xmm12, xmm5, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 23:
                {
                     // -1 -1 -1   -2 -2 -2 -2  -3 -3 -3   -4 -4 -4 -4   -5 -5 -5   -6 -6 -6 -6   -7 -7 -7   -8 -8 -8 -8   -9 -9 -9 -9  
                     //  0  1  2    3  4  5  6   7  8  9   10 11 12 13   14 15 16   17 18 19 20   21 22 23   24 25 26 27   28 29 30 31
                     //             4            7         11            14         18            21         25            28
                     //Loading all the samples
                     movdqa(xmm0,  ptr[r1]);      //load horizontal data [0 +  0] = pos  0...15. (aligned)  0 --> 15
                     lddqu(xmm1,   ptr[r1 + 0xf]);      //load horizontal data [0 + 16] = pos 16...31. (aligned) 16 --> 31
                     //Loading all the samples
                     lddqu(xmm11,  ptr[r1 + 0x7]);      //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                     lddqu(xmm12,  ptr[r1 + 0x17]);      //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39

                     movdqu(xmm15, ptr[r1 + 0x30 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     //------------------------------> 1st

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm11, xmm3, 0);
                     BILINEAR(1, xmm11, xmm3, 1);
                     BILINEAR(2, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(3, xmm11, xmm4, 1);
                     BILINEAR(4, xmm11, xmm5, 0);
                     BILINEAR(5, xmm11, xmm5, 1);
                     BILINEAR(6, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(7, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm1, xmm3, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     BILINEAR(2, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     BILINEAR(6, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm12, xmm3, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     BILINEAR(2, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     BILINEAR(6, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd

                     BILINEAR(8,  xmm0, xmm3, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  11, 0);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  14, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm11, xmm3, 0);
                     BILINEAR(9,  xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(10, xmm11, xmm4, 0);
                     BILINEAR(11, xmm11, xmm4, 1);
                     BILINEAR(12, xmm11, xmm5, 0);
                     BILINEAR(13, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(14, xmm11, xmm6, 0);
                     BILINEAR(15, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm1, xmm3, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(10, xmm1, xmm4, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     BILINEAR(12, xmm1, xmm5, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(14, xmm1, xmm6, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm12, xmm3, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(10, xmm12, xmm4, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     BILINEAR(12, xmm12, xmm5, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(14, xmm12, xmm6, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd
                     // -1 -1 -1   -2 -2 -2 -2  -3 -3 -3   -4 -4 -4 -4   -5 -5 -5   -6 -6 -6 -6   -7 -7 -7   -8 -8 -8 -8   -9 -9 -9 -9  
                     //  0  1  2    3  4  5  6   7  8  9   10 11 12 13   14 15 16   17 18 19 20   21 22 23   24 25 26 27   28 29 30 31
                     //             4            7         11            14         18            21         25            28

                     movdqu(xmm15, ptr[r1 + 0x20 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction
                     
                     BILINEAR(16, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 1, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     BILINEAR(18, xmm0, xmm4, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     BILINEAR(20, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 4, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(16, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 9, 0);
                     BILINEAR(17, xmm11, xmm3, 1);
                     BILINEAR(18, xmm11, xmm4, 0);
                     BILINEAR(19, xmm11, xmm4, 1);
                     BILINEAR(20, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 8, 0);
                     BILINEAR(21, xmm11, xmm5, 1);
                     BILINEAR(22, xmm11, xmm6, 0);
                     BILINEAR(23, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(16, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 9, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     BILINEAR(18, xmm1, xmm4, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     BILINEAR(20, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 8, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     BILINEAR(16, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 9, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     BILINEAR(18, xmm12, xmm4, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     BILINEAR(20, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 8, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th

                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 8, 0);
                     BILINEAR(24, xmm0, xmm3, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 11, 0);
                     BILINEAR(28, xmm0, xmm5, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 9, 0);
                     BILINEAR(24, xmm11, xmm3, 0);
                     BILINEAR(25, xmm11, xmm3, 1);
                     BILINEAR(26, xmm11, xmm4, 0);
                     BILINEAR(27, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 8, 0);
                     BILINEAR(28, xmm11, xmm5, 0);
                     BILINEAR(29, xmm11, xmm5, 1);
                     BILINEAR(30, xmm11, xmm6, 0);
                     BILINEAR(31, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 9, 0);
                     BILINEAR(24, xmm1, xmm3, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 8, 0);
                     BILINEAR(28, xmm1, xmm5, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 9, 0);
                     BILINEAR(24, xmm12, xmm3, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 8, 0);
                     BILINEAR(28, xmm12, xmm5, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 22:
                {
                     // -1 -1  -2 -2   -3 -3 -3   -4 -4   -5 -5 -5   -6 -6   -7 -7 -7   -8 -8   -9 -9 -9   -10 -10  -11 -11 -11  -12 -12  -13 -13 -13 
                     //  0  1   2  3    4  5  6    7  8    9 10 11   12 13   14 15 16   17 18   19 20 21    22  23   24  25  26   27  28   29  30  31
                     //         2       5          7      10         12      15         17      20          22       25           27       30
                     
                     //Loading all the samples
                     movdqa(xmm0,  ptr[r1]);      //load horizontal data [0 +  0] = pos  0...15. (aligned)  0 --> 15
                     lddqu(xmm1,   ptr[r1 + 0xf]);      //load horizontal data [0 + 16] = pos 16...31. (aligned) 16 --> 31
                     //Loading all the samples
                     lddqu(xmm11,  ptr[r1 + 0x7]);      //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                     lddqu(xmm12,  ptr[r1 + 0x17]);      //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39

                     movdqu(xmm15, ptr[r1 + 0x30 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     //------------------------------> 1st

                     BILINEAR(0, xmm0, xmm3, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  2, 0);
                     BILINEAR(2, xmm0, xmm4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm11, xmm3, 0);
                     BILINEAR(1, xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(2, xmm11, xmm4, 0);
                     BILINEAR(3, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(4, xmm11, xmm5, 0);
                     BILINEAR(5, xmm11, xmm5, 1);
                     BILINEAR(6, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(7, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm1, xmm3, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(2, xmm1, xmm4, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     BILINEAR(6, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm12, xmm3, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(2, xmm12, xmm4, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     BILINEAR(6, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd
                     // -1 -1  -2 -2   -3 -3 -3   -4 -4   -5 -5 -5   -6 -6   -7 -7 -7   -8 -8   -9 -9 -9   -10 -10  -11 -11 -11  -12 -12  -13 -13 -13 
                     //  0  1   2  3    4  5  6    7  8    9 10 11   12 13   14 15 16   17 18   19 20 21    22  23   24  25  26   27  28   29  30  31
                     //         2       5          7      10         12      15         17      20          22       25           27       30

                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  10, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  15, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(9,  xmm11, xmm3, 1);
                     BILINEAR(10, xmm11, xmm4, 0);
                     BILINEAR(11, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(12, xmm11, xmm5, 0);
                     BILINEAR(13, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(14, xmm11, xmm6, 0);
                     BILINEAR(15, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     BILINEAR(10, xmm1, xmm4, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(12, xmm1, xmm5, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(14, xmm1, xmm6, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     BILINEAR(10, xmm12, xmm4, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(12, xmm12, xmm5, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(14, xmm12, xmm6, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd
                     // -1 -1  -2 -2   -3 -3 -3   -4 -4   -5 -5 -5   -6 -6   -7 -7 -7   -8 -8   -9 -9 -9   -10 -10  -11 -11 -11  -12 -12  -13 -13 -13 
                     //  0  1   2  3    4  5  6    7  8    9 10 11   12 13   14 15 16   17 18   19 20 21    22  23   24  25  26   27  28   29  30  31
                     //         2       5          7      10         12      15         17      20          22       25           27       30

                     movdqu(xmm15, ptr[r1 + 0x20 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction
                     
                     BILINEAR(16, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 0, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     BILINEAR(18, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 3, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     BILINEAR(20, xmm0, xmm5, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 5, 0);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(16, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,10, 0);
                     BILINEAR(17, xmm11, xmm3, 1);
                     BILINEAR(18, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 9, 0);
                     BILINEAR(19, xmm11, xmm4, 1);
                     BILINEAR(20, xmm11, xmm5, 0);
                     BILINEAR(21, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 8, 0);
                     BILINEAR(22, xmm11, xmm6, 0);
                     BILINEAR(23, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(16, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     BILINEAR(18, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     BILINEAR(20, xmm1, xmm5, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     BILINEAR(16, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     BILINEAR(18, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     BILINEAR(20, xmm12, xmm5, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th
                     // -1 -1  -2 -2   -3 -3 -3   -4 -4   -5 -5 -5   -6 -6   -7 -7 -7   -8 -8   -9 -9 -9   -10 -10  -11 -11 -11  -12 -12  -13 -13 -13 
                     //  0  1   2  3    4  5  6    7  8    9 10 11   12 13   14 15 16   17 18   19 20 21    22  23   24  25  26   27  28   29  30  31
                     //         2       5          7      10         12      15         17      20          22       25           27       30

                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 8, 0);
                     BILINEAR(24, xmm0, xmm3, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 10, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     BILINEAR(28, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 13, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(24, xmm11, xmm3, 0);
                     BILINEAR(25, xmm11, xmm3, 1);
                     BILINEAR(26, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 9, 0);
                     BILINEAR(27, xmm11, xmm4, 1);
                     BILINEAR(28, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 8, 0);
                     BILINEAR(29, xmm11, xmm5, 1);
                     BILINEAR(30, xmm11, xmm6, 0);
                     BILINEAR(31, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(24, xmm1, xmm3, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 9, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     BILINEAR(28, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 8, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(24, xmm12, xmm3, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     BILINEAR(28, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 21:
                {
                     // -1   -2 -2   -3 -3   -4 -4   -5 -5   -6 -6   -7 -7   -8 -8   -9   -10 -10   -11 -11  -12 -12   -13 -13   -14 -14   -15 -15   -16 -16   -17 -17 
                     //  0    1  2    3  4    5  6    7  8    9 10   11 12   13 14   15    16  17    18  19   20  21    22  23    24  25    26  27    28  29    30  31
                     //       2       4       6       8       9      11      13      15    17        19       21        23        24        26        28        30

                     //Loading all the samples
                     movdqa(xmm0,  ptr[r1]);      //load horizontal data [0 +  0] = pos  0...15. (aligned)  0 --> 15
                     lddqu(xmm1,   ptr[r1 + 0xf]);      //load horizontal data [0 + 16] = pos 16...31. (aligned) 16 --> 31
                     //Loading all the samples
                     lddqu(xmm11,  ptr[r1 + 0x7]);      //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                     lddqu(xmm12,  ptr[r1 + 0x17]);      //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39

                     movdqu(xmm15, ptr[r1 + 0x30 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     //------------------------------> 1st

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  2, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     BILINEAR(4, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  6, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  8, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(1, xmm11, xmm3, 1);
                     BILINEAR(2, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(3, xmm11, xmm4, 1);
                     BILINEAR(4, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(5, xmm11, xmm5, 1);
                     BILINEAR(6, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(7, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     BILINEAR(2, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     BILINEAR(4, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     BILINEAR(6, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(0, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     BILINEAR(2, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     BILINEAR(4, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     BILINEAR(6, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd
                     // -1   -2 -2   -3 -3   -4 -4   -5 -5   -6 -6   -7 -7   -8 -8   -9   -10 -10   -11 -11  -12 -12   -13 -13   -14 -14   -15 -15   -16 -16   -17 -17 
                     //  0    1  2    3  4    5  6    7  8    9 10   11 12   13 14   15    16  17    18  19   20  21    22  23    24  25    26  27    28  29    30  31
                     //       2       4       6       8       9      11      13      15    17        19       21        23        24        26        28        30

                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  9, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  11, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  13, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  15, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(9,  xmm11, xmm3, 1);
                     BILINEAR(10, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(11, xmm11, xmm4, 1);
                     BILINEAR(12, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(13, xmm11, xmm5, 1);
                     BILINEAR(14, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(15, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     BILINEAR(10, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     BILINEAR(12, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     BILINEAR(14, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     // No shift or substitution required
                     BILINEAR(8,  xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     BILINEAR(10, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     BILINEAR(12, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     BILINEAR(14, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd
                     // -1   -2 -2   -3 -3   -4 -4   -5 -5   -6 -6   -7 -7   -8 -8   -9   -10 -10   -11 -11  -12 -12   -13 -13   -14 -14   -15 -15   -16 -16   -17 -17 
                     //  0    1  2    3  4    5  6    7  8    9 10   11 12   13 14   15    16  17    18  19   20  21    22  23    24  25    26  27    28  29    30  31
                     //       2       4       6       8       9      11      13      15    17        19       21        23        24        26        28        30

                     movdqu(xmm15, ptr[r1 + 0x20 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction
                     
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 0, 0);
                     BILINEAR(16, xmm0, xmm3, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 2, 0);
                     BILINEAR(18, xmm0, xmm4, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 4, 0);
                     BILINEAR(20, xmm0, xmm5, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 6, 0);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(16, xmm11, xmm3, 0);
                     BILINEAR(17, xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(18, xmm11, xmm4, 0);
                     BILINEAR(19, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(20, xmm11, xmm5, 0);
                     BILINEAR(21, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(22, xmm11, xmm6, 0);
                     BILINEAR(23, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(16, xmm1, xmm3, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(18, xmm1, xmm4, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(20, xmm1, xmm5, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(16, xmm12, xmm3, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(18, xmm12, xmm4, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(20, xmm12, xmm5, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th
                     // -1   -2 -2   -3 -3   -4 -4   -5 -5   -6 -6   -7 -7   -8 -8   -9   -10 -10   -11 -11  -12 -12   -13 -13   -14 -14   -15 -15   -16 -16   -17 -17 
                     //  0    1  2    3  4    5  6    7  8    9 10   11 12   13 14   15    16  17    18  19   20  21    22  23    24  25    26  27    28  29    30  31
                     //       2       4       6       8       9      11      13      15    17        19       21        23        24        26        28        30

                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  7, 0);
                     BILINEAR(24, xmm0, xmm3, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  9, 0);
                     BILINEAR(26, xmm0, xmm4, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 11, 0);
                     BILINEAR(28, xmm0, xmm5, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 13, 0);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(24, xmm11, xmm3, 0);
                     BILINEAR(25, xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(26, xmm11, xmm4, 0);
                     BILINEAR(27, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(28, xmm11, xmm5, 0);
                     BILINEAR(29, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(30, xmm11, xmm6, 0);
                     BILINEAR(31, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(24, xmm1, xmm3, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(26, xmm1, xmm4, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(28, xmm1, xmm5, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(24, xmm12, xmm3, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(26, xmm12, xmm4, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(28, xmm12, xmm5, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 20:
                {
                     // -1   -2 -2   -3   -4 -4   -5   -6 -6   -7   -8 -8   -9   -10 -10   -11   -12 -12   -13   -14 -14   -15   -16 -16   -17   -18 -18   -19   -20 -20   -21 -21 
                     //  0    1  2    3    4  5    6    7  8    9   10 11   12    13  14    15    16  17    18    19  20    21    22  23    24    25  26    27    28  29    30  31
                     //       2       3    5       6    8       9   11      12    14        15    17        18    20        21    23        24    26        27    29        30
                     
                     //Loading all the samples
                     movdqa(xmm0,  ptr[r1]);    //load horizontal data [0 +  0] = pos  0...15. (aligned)  0 --> 15
                     lddqu(xmm1,   ptr[r1 + 0xf]);      //load horizontal data [0 + 16] = pos 16...31. (aligned) 16 --> 31
                     //Loading all the samples
                     lddqu(xmm11,  ptr[r1 + 0x7]);      //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                     lddqu(xmm12,  ptr[r1 + 0x17]);      //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39

                     movdqu(xmm15, ptr[r1 + 0x30 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     //------------------------------> 1st

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  2, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  3, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  8, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(0, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(1, xmm11, xmm3, 1);
                     BILINEAR(2, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(3, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(4, xmm11, xmm5, 0);
                     BILINEAR(5, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(6, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(7, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(0, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     BILINEAR(2, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(6, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     BILINEAR(0, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     BILINEAR(2, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(6, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd
                     // -1   -2 -2   -3   -4 -4   -5   -6 -6   -7   -8 -8   -9   -10 -10   -11   -12 -12   -13   -14 -14   -15   -16 -16   -17   -18 -18   -19   -20 -20   -21 -21 
                     //  0    1  2    3    4  5    6    7  8    9   10 11   12    13  14    15    16  17    18    19  20    21    22  23    24    25  26    27    28  29    30  31
                     //       2       3    5       6    8       9   11      12    14        15    17        18    20        21    23        24    26        27    29        30

                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  9, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 11, 0);
                     BILINEAR(10, xmm0, xmm4, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 14, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     BILINEAR(14, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 15, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(8,  xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(9,  xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(10, xmm11, xmm4, 0);
                     BILINEAR(11, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(12, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(13, xmm11, xmm5, 1);
                     BILINEAR(14, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(15, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(8,  xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(10, xmm1, xmm4, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(12, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     BILINEAR(14, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     BILINEAR(8,  xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(10, xmm12, xmm4, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(12, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     BILINEAR(14, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd
                     // -1   -2 -2   -3   -4 -4   -5   -6 -6   -7   -8 -8   -9   -10 -10   -11   -12 -12   -13   -14 -14   -15   -16 -16   -17   -18 -18   -19   -20 -20   -21 -21 
                     //  0    1  2    3    4  5    6    7  8    9   10 11   12    13  14    15    16  17    18    19  20    21    22  23    24    25  26    27    28  29    30  31
                     //       2       3    5       6    8       9   11      12    14        15    17        18    20        21    23        24    26        27    29        30

                     movdqu(xmm15, ptr[r1 + 0x20 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction
                     
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 0, 0);
                     BILINEAR(16, xmm0, xmm3, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 1, 0);
                     BILINEAR(18, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 3, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     BILINEAR(20, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 4, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 6, 0);
                     BILINEAR(22, xmm0, xmm6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(16, xmm11, xmm3, 0);
                     BILINEAR(17, xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(18, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(19, xmm11, xmm4, 1);
                     BILINEAR(20, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(21, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(22, xmm11, xmm6, 0);
                     BILINEAR(23, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(16, xmm1, xmm3, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(18, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     BILINEAR(20, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(22, xmm1, xmm6, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(16, xmm12, xmm3, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(18, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     BILINEAR(20, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(22, xmm12, xmm6, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th
                     // -1   -2 -2   -3   -4 -4   -5   -6 -6   -7   -8 -8   -9   -10 -10   -11   -12 -12   -13   -14 -14   -15   -16 -16   -17   -18 -18   -19   -20 -20   -21 -21 
                     //  0    1  2    3    4  5    6    7  8    9   10 11   12    13  14    15    16  17    18    19  20    21    22  23    24    25  26    27    28  29    30  31
                     //       2       3    5       6    8       9   11      12    14        15    17        18    20        21    23        24    26        27    29        30

                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  7, 0);
                     BILINEAR(24, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  9, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 10, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 12, 0);
                     BILINEAR(28, xmm0, xmm5, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 13, 0);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(24, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(25, xmm11, xmm3, 1);
                     BILINEAR(26, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(27, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(28, xmm11, xmm5, 0);
                     BILINEAR(29, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(30, xmm11, xmm6, 0);
                     BILINEAR(31, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(24, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(28, xmm1, xmm5, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(24, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(28, xmm12, xmm5, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 19:
                {
                     // -1   -2   -3   -4   -5 -5   -6   -7   -8   -9 -9   -10   -11   -12   -13 -13   -14   -15   -16   -17   -18 -18   -19   -20   -21  -22 -22   -23   -24   -25   -26 -26 
                     //  0    1    2    3    4  5    6    7    8    9 10    11    12    13    14  15    16    17    18    19    20  21    22    23    24   25  26    27    28    29    30  31
                     //       1    2    4    5       6    7    9   10       11    12    14    15        16    17    18    20    21        22    23    25   26        27    28    30    31
                     //Loading all the samples
                     movdqa(xmm0,  ptr[r1]);      //load horizontal data [0 +  0] = pos  0...15. (aligned)  0 --> 15
                     lddqu(xmm1,   ptr[r1 + 0xf]);      //load horizontal data [0 + 16] = pos 16...31. (aligned) 16 --> 31
                     //Loading all the samples
                     lddqu(xmm11,  ptr[r1 + 0x7]);      //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                     lddqu(xmm12,  ptr[r1 + 0x17]);      //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39

                     movdqu(xmm15, ptr[r1 + 0x30 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     //------------------------------> 1st

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  1, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  2, 0);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  4, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  5, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(0, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 13, 0);
                     BILINEAR(1, xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(2, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(3, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(4, xmm11, xmm5, 0);
                     BILINEAR(5, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(6, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(7, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(0, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 13, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(2, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(4, xmm1, xmm5, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(6, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     BILINEAR(0, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 13, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(2, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(4, xmm12, xmm5, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(6, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd
                     // -1   -2   -3   -4   -5 -5   -6   -7   -8   -9 -9   -10   -11   -12   -13 -13   -14   -15   -16   -17   -18 -18   -19   -20   -21  -22 -22   -23   -24   -25   -26 -26 
                     //  0    1    2    3    4  5    6    7    8    9 10    11    12    13    14  15    16    17    18    19    20  21    22    23    24   25  26    27    28    29    30  31
                     //       1    2    4    5       6    7    9   10       11    12    14    15        16    17    18    20    21        22    23    25   26        27    28    30    31

                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  9, 0);
                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 10, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     BILINEAR(10, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 11, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 14, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 15, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 13, 0);
                     BILINEAR(8,  xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(9,  xmm11, xmm3, 1);
                     BILINEAR(10, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(11, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(12, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(13, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(14, xmm11, xmm6, 0);
                     BILINEAR(15, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 13, 0);
                     BILINEAR(8,  xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     BILINEAR(10, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(12, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(14, xmm1, xmm6, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 13, 0);
                     BILINEAR(8,  xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     BILINEAR(10, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(12, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(14, xmm12, xmm6, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd
                     // -1   -2   -3   -4   -5 -5   -6   -7   -8   -9 -9   -10   -11   -12   -13 -13   -14   -15   -16   -17   -18 -18   -19   -20   -21  -22 -22   -23   -24   -25   -26 -26 
                     //  0    1    2    3    4  5    6    7    8    9 10    11    12    13    14  15    16    17    18    19    20  21    22    23    24   25  26    27    28    29    30  31
                     //       1    2    4    5       6    7    9   10       11    12    14    15        16    17    18    20    21        22    23    25   26        27    28    30    31

                     movdqu(xmm15, ptr[r1 + 0x30 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 15, 0);
                     BILINEAR(16, xmm0, xmm3, 0);

                     movdqu(xmm15, ptr[r1 + 0x20 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 0, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 1, 0);
                     BILINEAR(18, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 3, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 4, 0);
                     BILINEAR(20, xmm0, xmm5, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 5, 0);
                     BILINEAR(22, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 14, 0);
                     BILINEAR(16, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 13, 0);
                     BILINEAR(17, xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(18, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(19, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(20, xmm11, xmm5, 0);
                     BILINEAR(21, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(22, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(23, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 14, 0);
                     BILINEAR(16, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 13, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(18, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(20, xmm1, xmm5, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(22, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 14, 0);
                     BILINEAR(16, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 13, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(18, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(20, xmm12, xmm5, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(22, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th
                     // -1   -2   -3   -4   -5 -5   -6   -7   -8   -9 -9   -10   -11   -12   -13 -13   -14   -15   -16   -17   -18 -18   -19   -20   -21  -22 -22   -23   -24   -25   -26 -26 
                     //  0    1    2    3    4  5    6    7    8    9 10    11    12    13    14  15    16    17    18    19    20  21    22    23    24   25  26    27    28    29    30  31
                     //       1    2    4    5       6    7    9   10       11    12    14    15        16    17    18    20    21        22    23    25   26        27    28    30    31

                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  8, 0);
                     BILINEAR(24, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  9, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     BILINEAR(26, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 10, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 11, 0);
                     BILINEAR(28, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 13, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 14, 0);
                     BILINEAR(30, xmm0, xmm6, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 13, 0);
                     BILINEAR(24, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(25, xmm11, xmm3, 1);
                     BILINEAR(26, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(27, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(28, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(29, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(30, xmm11, xmm6, 0);
                     BILINEAR(31, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 13, 0);
                     BILINEAR(24, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     BILINEAR(26, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(28, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(30, xmm1, xmm6, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 13, 0);
                     BILINEAR(24, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     BILINEAR(26, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(28, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(30, xmm12, xmm6, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                case 18:
                {
                     // -1  0  1  2  3  4  5  6    7  8  9 10 11 12 13 14   15 16 17 18 19 20 21 22   23 24 25 26 27 28 29 30 
                     //  0  1  2  3  4  5  6  7    8  9 10 11 12 13 14 15   16 17 18 19 20 21 22 23   24 25 26 27 28 29 30 31
                     //     1  2  3  4  5  6  7    8  9 10 11 12 13 14 15   16 17 18 19 20 21 22 23   24 25 26 27 28 29 30 31
                     //Loading all the samples
                     movdqa(xmm0,  ptr[r1]);      //load horizontal data [0 +  0] = pos  0...15. (aligned)  0 --> 15
                     lddqu(xmm1,   ptr[r1 + 0xf]);      //load horizontal data [0 + 16] = pos 16...31. (aligned) 16 --> 31
                     //Loading all the samples
                     lddqu(xmm11,  ptr[r1 + 0x7]);      //load horizontal data [0 +  72] = pos 72... 87 (aligned)   8 --> 23
                     lddqu(xmm12,  ptr[r1 + 0x17]);      //load horizontal data [0 +  88] = pos 88.. 103 (aligned)  24 --> 39

                     movdqu(xmm15, ptr[r1 + 0x30 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     // Prepare left and up (ul = corner)
                     pinsrq(xmm2, ul,  0); // ul
                     INSERT_PIXEL_RIGHT(xmm2, xmm0,  0, 0);
                     INSERT_PIXEL_RIGHT(xmm2, xmm15, 0, 0);

                     //------------------------------> 1st

                     BILINEAR(0, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  1, 0);
                     BILINEAR(1, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  2, 0);
                     BILINEAR(2, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  3, 0);
                     BILINEAR(3, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  4, 0);
                     BILINEAR(4, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  5, 0);
                     BILINEAR(5, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  6, 0);
                     BILINEAR(6, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  7, 0);
                     BILINEAR(7, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     BILINEAR(0, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 14, 0);
                     BILINEAR(1, xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 13, 0);
                     BILINEAR(2, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(3, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(4, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(5, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(6, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(7, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     BILINEAR(0, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 14, 0);
                     BILINEAR(1, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 13, 0);
                     BILINEAR(2, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(3, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(4, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(5, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(6, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(7, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     BILINEAR(0, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 14, 0);
                     BILINEAR(1, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 13, 0);
                     BILINEAR(2, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(3, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(4, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(5, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(6, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(7, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 2nd
                     // -1  0  1  2  3  4  5  6    7  8  9 10 11 12 13 14   15 16 17 18 19 20 21 22   23 24 25 26 27 28 29 30 
                     //  0  1  2  3  4  5  6  7    8  9 10 11 12 13 14 15   16 17 18 19 20 21 22 23   24 25 26 27 28 29 30 31
                     //     1  2  3  4  5  6  7    8  9 10 11 12 13 14 15   16 17 18 19 20 21 22 23   24 25 26 27 28 29 30 31

                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  8, 0);
                     BILINEAR(8,  xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  9, 0);
                     BILINEAR(9,  xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 10, 0);
                     BILINEAR(10, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 11, 0);
                     BILINEAR(11, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 12, 0);
                     BILINEAR(12, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 13, 0);
                     BILINEAR(13, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 14, 0);
                     BILINEAR(14, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 15, 0);
                     BILINEAR(15, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     BILINEAR(8,  xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 14, 0);
                     BILINEAR(9,  xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 13, 0);
                     BILINEAR(10, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(11, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(12, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(13, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(14, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(15, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 15, 0);
                     BILINEAR(8,  xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 14, 0);
                     BILINEAR(9,  xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 13, 0);
                     BILINEAR(10, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(11, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(12, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(13, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(14, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(15, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 15, 0);
                     BILINEAR(8,  xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 14, 0);
                     BILINEAR(9,  xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 13, 0);
                     BILINEAR(10, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(11, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(12, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(13, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(14, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(15, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 3rd
                     // -1  0  1  2  3  4  5  6    7  8  9 10 11 12 13 14   15 16 17 18 19 20 21 22   23 24 25 26 27 28 29 30 
                     //  0  1  2  3  4  5  6  7    8  9 10 11 12 13 14 15   16 17 18 19 20 21 22 23   24 25 26 27 28 29 30 31
                     //     1  2  3  4  5  6  7    8  9 10 11 12 13 14 15   16 17 18 19 20 21 22 23   24 25 26 27 28 29 30 31
                     movdqu(xmm15, ptr[r1 + 0x30 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 15, 0);
                     BILINEAR(16, xmm0, xmm3, 0);

                     movdqu(xmm15, ptr[r1 + 0x20 - 0x41]);      //load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
                     pshufb(xmm15, ptr[rip + maskleft]); //invert the order of pixel as lefts are in opposite direction

                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 0, 0);
                     BILINEAR(17, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 1, 0);
                     BILINEAR(18, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 2, 0);
                     BILINEAR(19, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 3, 0);
                     BILINEAR(20, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 4, 0);
                     BILINEAR(21, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 5, 0);
                     BILINEAR(22, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 6, 0);
                     BILINEAR(23, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     BILINEAR(16, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 14, 0);
                     BILINEAR(17, xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 13, 0);
                     BILINEAR(18, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(19, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(20, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(21, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(22, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(23, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 15, 0);
                     BILINEAR(16, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 14, 0);
                     BILINEAR(17, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 13, 0);
                     BILINEAR(18, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(19, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(20, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(21, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(22, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(23, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 15, 0);
                     BILINEAR(16, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 14, 0);
                     BILINEAR(17, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 13, 0);
                     BILINEAR(18, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(19, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(20, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(21, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(22, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(23, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 0);

                     //------------------------------> 4th
                     // -1  0  1  2  3  4  5  6    7  8  9 10 11 12 13 14   15 16 17 18 19 20 21 22   23 24 25 26 27 28 29 30 
                     //  0  1  2  3  4  5  6  7    8  9 10 11 12 13 14 15   16 17 18 19 20 21 22 23   24 25 26 27 28 29 30 31
                     //     1  2  3  4  5  6  7    8  9 10 11 12 13 14 15   16 17 18 19 20 21 22 23   24 25 26 27 28 29 30 31

                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  7, 0);
                     BILINEAR(24, xmm0, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  8, 0);
                     BILINEAR(25, xmm0, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0,  9, 0);
                     BILINEAR(26, xmm0, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 10, 0);
                     BILINEAR(27, xmm0, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 11, 0);
                     BILINEAR(28, xmm0, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 12, 0);
                     BILINEAR(29, xmm0, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 13, 0);
                     BILINEAR(30, xmm0, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm15, xmm0, 14, 0);
                     BILINEAR(31, xmm0, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 0, 0);

                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 15, 0);
                     BILINEAR(24, xmm11, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 14, 0);
                     BILINEAR(25, xmm11, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 13, 0);
                     BILINEAR(26, xmm11, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 12, 0);
                     BILINEAR(27, xmm11, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 11, 0);
                     BILINEAR(28, xmm11, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11, 10, 0);
                     BILINEAR(29, xmm11, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  9, 0);
                     BILINEAR(30, xmm11, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm0, xmm11,  8, 0);
                     BILINEAR(31, xmm11, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 1, 0);

                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 15, 0);
                     BILINEAR(24, xmm1, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 14, 0);
                     BILINEAR(25, xmm1, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 13, 0);
                     BILINEAR(26, xmm1, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 12, 0);
                     BILINEAR(27, xmm1, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 11, 0);
                     BILINEAR(28, xmm1, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1, 10, 0);
                     BILINEAR(29, xmm1, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  9, 0);
                     BILINEAR(30, xmm1, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm11, xmm1,  8, 0);
                     BILINEAR(31, xmm1, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 2, 0);

                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 15, 0);
                     BILINEAR(24, xmm12, xmm3, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 14, 0);
                     BILINEAR(25, xmm12, xmm3, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 13, 0);
                     BILINEAR(26, xmm12, xmm4, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 12, 0);
                     BILINEAR(27, xmm12, xmm4, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 11, 0);
                     BILINEAR(28, xmm12, xmm5, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12, 10, 0);
                     BILINEAR(29, xmm12, xmm5, 1);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  9, 0);
                     BILINEAR(30, xmm12, xmm6, 0);
                     INSERT_PIXEL_RIGHT(xmm1, xmm12,  8, 0);
                     BILINEAR(31, xmm12, xmm6, 1);

                     TRANSPOSE_AND_COPY_8x8(mode, 3, 1);
                }
                break;
                default: assert(0);
                break;
            }
#undef TRANSPOSE_AND_COPY_8x8
#undef BILINEAR
#undef INSERT_PIXEL_RIGHT
        }
    };


/// ============================================================================================================================

template <typename Sample>
struct IntraPredAng32x32_10_nofilt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng32x32_10_nofilt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        Xbyak::Label maskleft;
        Xbyak::Label flip;
        int mode;

        void data()
        {
            align(32);
            L(maskleft);
            db({15, 14, 13, 12, 11, 10,  9,  8, 7,  6,  5,  4,  3,  2,  1,  0}); // invert the order of pixel as lefts are in opposite direction

            align(32);
            L(flip);
            for (int sh = 0; sh < 16; sh++)
            {
                db({ sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh, sh });
            }
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r1 = arg64(2); // const Sample *neighbours
            auto &r3 = arg64(1); // dst_stride
            auto &g5 = reg64(5);

            // Loading all the samples
            movdqu(xmm1, ptr[r1 + 0x20 - 0x41]);      // load vertical   data [0 + 32] = pos 32...47. (aligned) 31 --> 16
            pshufb(xmm1, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction
            movdqu(xmm0, ptr[r1 + 0x30 - 0x41]);      // load vertical   data [0 + 48] = pos 48...63. (aligned) 15 -->  0
            pshufb(xmm0, ptr[rip + maskleft]); // invert the order of pixel as lefts are in opposite direction

            lea(g5, ptr[rip + flip]);

            //db({ 0xcc });
#define FLIP_AND_COPY(a1, n, last)                         \
            movdqa(xmm2, a1);                              \
            pshufb(xmm2,  ptr[g5 + (n*16)]);               \
            movdqa(ptr[r0], xmm2);                         \
            movdqa(ptr[r0 + (16 * sizeof(Sample))], xmm2); \
            if (!last)                                     \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            FLIP_AND_COPY(xmm0,  0, 0);
            FLIP_AND_COPY(xmm0,  1, 0);
            FLIP_AND_COPY(xmm0,  2, 0);
            FLIP_AND_COPY(xmm0,  3, 0);
            FLIP_AND_COPY(xmm0,  4, 0);
            FLIP_AND_COPY(xmm0,  5, 0);
            FLIP_AND_COPY(xmm0,  6, 0);
            FLIP_AND_COPY(xmm0,  7, 0);
            FLIP_AND_COPY(xmm0,  8, 0);
            FLIP_AND_COPY(xmm0,  9, 0);
            FLIP_AND_COPY(xmm0, 10, 0);
            FLIP_AND_COPY(xmm0, 11, 0);
            FLIP_AND_COPY(xmm0, 12, 0);
            FLIP_AND_COPY(xmm0, 13, 0);
            FLIP_AND_COPY(xmm0, 14, 0);
            FLIP_AND_COPY(xmm0, 15, 0);
            FLIP_AND_COPY(xmm1,  0, 0);
            FLIP_AND_COPY(xmm1,  1, 0);
            FLIP_AND_COPY(xmm1,  2, 0);
            FLIP_AND_COPY(xmm1,  3, 0);
            FLIP_AND_COPY(xmm1,  4, 0);
            FLIP_AND_COPY(xmm1,  5, 0);
            FLIP_AND_COPY(xmm1,  6, 0);
            FLIP_AND_COPY(xmm1,  7, 0);
            FLIP_AND_COPY(xmm1,  8, 0);
            FLIP_AND_COPY(xmm1,  9, 0);
            FLIP_AND_COPY(xmm1, 10, 0);
            FLIP_AND_COPY(xmm1, 11, 0);
            FLIP_AND_COPY(xmm1, 12, 0);
            FLIP_AND_COPY(xmm1, 13, 0);
            FLIP_AND_COPY(xmm1, 14, 0);
            FLIP_AND_COPY(xmm1, 15, 1);
#undef FLIP_AND_COPY
        }
    };


template <typename Sample>
struct IntraPredAng32x32_26_nofilt_SSE_8bits :
    Jit::Function
    {
        IntraPredAng32x32_26_nofilt_SSE_8bits(Jit::Buffer *buffer, int predmode) :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        mode(predmode)
        {
            this->build();
        }

        int mode;
        
        void data()
        {
            align(32);
        }
        
        void assemble()
        {
            //(Sample *dst, intptr_t dst_stride, const Sample *neighbours, Sample neigh_corner, havoc_pred_intra_packed packed, int predModeIntra, int bitDepth)
            auto &r0 = arg64(0); // Sample *dst
            auto &r3 = arg64(1); // dst_stride
            auto &r1 = arg64(2); // const Sample *neighbours

            //Loading all the samples
            movdqa(xmm0, ptr[r1]); //load horizontal data [0 + 64] = pos 64...79. (aligned)  0 --> 15
            movdqa(xmm1, ptr[r1 + 0x10]); //load horizontal data [0 + 80] = pos 80...95. (aligned) 16 --> 31

            //db({ 0xcc });

            // Store the pixels
#define INSERT_LINE(last)                                  \
            movdqa(ptr[r0], xmm0);                         \
            movdqa(ptr[r0 + (16 * sizeof(Sample))], xmm1); \
            if (!last)                                     \
                lea(r0, ptr[r0 + r3 * sizeof(Sample)]);

            INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0);
            INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0);
            INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0);
            INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(0); INSERT_LINE(1);
#undef INSERT_LINE
        }
    };



namespace havoc { namespace intra {

template <typename Sample, int k>
void predictPlanar(Sample *dst, intptr_t dstStride, Sample const *neighbours, int predModeIntra)
{
    assert(predModeIntra == 0);
    auto const nTbS = 1 << k;
    Neighbours<Sample> p{ neighbours };

    for (int y = 0; y < nTbS; ++y)
        for (int x = 0; x < nTbS; ++x)
            dst[x + y*dstStride] =
                ((nTbS - 1 - x) * p(-1, y) + (x + 1) * p(nTbS, -1) +
                (nTbS - 1 - y) * p(x, -1) + (y + 1) * p(-1, nTbS) + nTbS) >> (k + 1);
}

template <typename Sample, int k, bool edge_flag>
void predictDC(Sample *dst, intptr_t dstStride, Sample const *neighbours, int predModeIntra)
{
    assert(predModeIntra == 1);
    auto const nTbS = 1 << k;
    Neighbours<Sample> p{ neighbours };

    int dcVal = nTbS;
    for (int x = 0; x < nTbS; ++x)
        dcVal += p(x, -1);
    for (int y = 0; y < nTbS; ++y)
        dcVal += p(-1, y);
    dcVal >>= k + 1;

    for (int y = 0; y < nTbS; ++y)
        for (int x = 0; x < nTbS; ++x)
            dst[x + y*dstStride] = dcVal;

    if (edge_flag)
    {
        dst[0 + 0 * dstStride] = (p(-1, 0) + 2 * dcVal + p(0, -1) + 2) >> 2;
        for (int x = 1; x < nTbS; ++x)
            dst[x + 0 * dstStride] = (p(x, -1) + 3 * dcVal + 2) >> 2;
        for (int y = 1; y < nTbS; ++y)
            dst[0 + y*dstStride] = (p(-1, y) + 3 * dcVal + 2) >> 2;
    }
}

template <typename Sample, int bitDepth, int k, bool edge_flag>
void predictAngular(Sample *dst, intptr_t dst_stride, Sample const *neighbours, int predModeIntra)
{
    const int nTbS = 1 << k;
    Neighbours<Sample> p{ neighbours };
    ReferenceSampleArray<Sample> ref;

    if (predModeIntra >= 18)
    {
        for (int x = 0; x <= nTbS; ++x)
            ref[x] = p(-1 + x, -1);

        IntraPredAngle intraPredAngle{predModeIntra};
        if (intraPredAngle < 0)
        {
            InvAngle invAngle((predModeIntra));
            if (((nTbS * intraPredAngle) >> 5) < -1)
                for (int x = -1; x >= ((nTbS * intraPredAngle) >> 5); --x)
                    ref[x] = p(-1, -1 + ((x * invAngle + 128) >> 8));
        }
        else
            for (int x = nTbS + 1; x <= 2 * nTbS; ++x)
                ref[x] = p(-1 + x, -1);

        for (int y = 0; y < nTbS; ++y)
        {
            const int iIdx = ((y + 1) * intraPredAngle) >> 5;
            const int iFact = ((y + 1) * intraPredAngle) & 31;
            for (int x = 0; x < nTbS; ++x)
                if (iFact == 0)
                    dst[x + y*dst_stride] = ref[x + iIdx + 1];
                else
                    dst[x + y*dst_stride] = ((32 - iFact) * ref[x + iIdx + 1] + iFact * ref[x + iIdx + 2] + 16) >> 5;
        }

        if (predModeIntra == 26 /* vertical */ && edge_flag /*cIdx == 0 && nTbS < 32*/)
        {
            const int x = 0;
            for (int y = 0; y<nTbS; ++y)
                dst[x + y*dst_stride] = Clip3(0, (1 << bitDepth) - 1, p(x, -1) + ((p(-1, y) - p(-1, -1)) >> 1));
        }
    }
    else
    {
        for (int x = 0; x <= nTbS; ++x)
            ref[x] = p(-1, -1 + x);

        IntraPredAngle intraPredAngle((predModeIntra));
        if (intraPredAngle < 0)
        {
            InvAngle invAngle((predModeIntra));
            if (((nTbS * intraPredAngle) >> 5) < -1)
                for (int x = -1; x >= ((nTbS * intraPredAngle) >> 5); --x)
                    ref[x] = p(-1 + ((x * invAngle + 128) >> 8), -1);
        }
        else
            for (int x = nTbS + 1; x <= 2 * nTbS; ++x)
                ref[x] = p(-1, -1 + x);

        for (int y = 0; y < nTbS; ++y)
            for (int x = 0; x < nTbS; ++x)
            {
                const int iIdx = ((x + 1) * intraPredAngle) >> 5;
                const int iFact = ((x + 1) * intraPredAngle) & 31;
                if (iFact == 0)
                    dst[x + y*dst_stride] = ref[y + iIdx + 1];
                else
                    dst[x + y*dst_stride] = ((32 - iFact) * ref[y + iIdx + 1] + iFact * ref[y + iIdx + 2] + 16) >> 5;
            }

        if (predModeIntra == 10 /* horizontal */ && edge_flag /*cIdx == 0 && nTbS < 32*/)
        {
            const int y = 0;
            for (int x = 0; x<nTbS; ++x)
                dst[x + y*dst_stride] = Clip3(0, (1 << bitDepth) - 1, p(-1, y) + ((p(x, -1) - p(-1, -1)) >> 1));
        }
    }
}

template <int bitDepth, typename Sample>
void populateC(Table<Sample> &table)
{
    table.lookup(1, bitDepth, 2, 0) = predictPlanar<Sample, 2>;
    table.lookup(1, bitDepth, 3, 0) = predictPlanar<Sample, 3>;
    table.lookup(1, bitDepth, 4, 0) = predictPlanar<Sample, 4>;
    table.lookup(1, bitDepth, 5, 0) = predictPlanar<Sample, 5>;

    table.lookup(1, bitDepth, 2, 1) = predictDC<Sample, 2, false>;
    table.lookup(1, bitDepth, 3, 1) = predictDC<Sample, 3, false>;
    table.lookup(1, bitDepth, 4, 1) = predictDC<Sample, 4, false>;
    table.lookup(1, bitDepth, 5, 1) = predictDC<Sample, 5, false>;

    for (int predModeIntra = 2; predModeIntra < 35; ++predModeIntra)
    {
        table.lookup(1, bitDepth, 2, predModeIntra) = predictAngular<Sample, bitDepth, 2, false>;
        table.lookup(1, bitDepth, 3, predModeIntra) = predictAngular<Sample, bitDepth, 3, false>;
        table.lookup(1, bitDepth, 4, predModeIntra) = predictAngular<Sample, bitDepth, 4, false>;
        table.lookup(1, bitDepth, 5, predModeIntra) = predictAngular<Sample, bitDepth, 5, false>;
    }

    table.lookup(0, bitDepth, 2, 1) = predictDC<Sample, 2, true>;
    table.lookup(0, bitDepth, 3, 1) = predictDC<Sample, 3, true>;
    table.lookup(0, bitDepth, 4, 1) = predictDC<Sample, 4, true>;

    for (int predModeIntra = 10; predModeIntra <= 26; predModeIntra += 16)
    {
        table.lookup(0, bitDepth, 2, predModeIntra) = predictAngular<Sample, bitDepth, 2, true>;
        table.lookup(0, bitDepth, 3, predModeIntra) = predictAngular<Sample, bitDepth, 3, true>;
        table.lookup(0, bitDepth, 4, predModeIntra) = predictAngular<Sample, bitDepth, 4, true>;
    }
}

struct Predict :
    Jit::Function 
{
    int const sampleSize;

    template <typename Sample>
    Predict(Jit::Buffer *buffer, int bitDepth, int nTbS, bool edge_flag, Sample)
        :
        Jit::Function(buffer, Jit::CountArguments<havoc::intra::Function<Sample>>::value),
        nTbS(nTbS),
        edge_flag(edge_flag),
        bitDepth(bitDepth),
        sampleSize(sizeof(Sample))
    {
    }

    int widthInBytes() const
    {
        return this->nTbS * sampleSize;
    }

    template <typename Register>
    void loadLeftNeighbours(int r, int zero, Reg64 neighbours)
    {
        Register mm(r);
        if (sampleSize == 2)
        {
            if (nTbS == 4)
                vmovdqu(mm, ptr[neighbours - (nTbS + 1) * 2]);
            else
                vmovdqu(mm, ptr[neighbours - (nTbS + 1) * 2]);
        }
        else
        {
            if (nTbS == 4)
                vmovdqu(mm, ptr[neighbours - nTbS - 1]);
            else if (nTbS == 8)
                vmovdqu(mm, ptr[neighbours - nTbS - 1]);
            if (nTbS == 16)
            {
                vmovdqu(mm, ptr[neighbours - nTbS - 1]);
                vinserti128(Ymm(r), Ymm(r), ptr[neighbours - 8 - 1], 1);
            }
            vpunpcklbw(mm, Register(zero));
        }
    }

    template <typename Register>
    void loadAboveNeighbours(int r, int zero, Reg64 neighbours)
    {
        Register mm(r);
        if (sampleSize == 2)
            vmovdqu(mm, ptr[neighbours]);
        else
        {
            vmovdqu(mm, ptr[neighbours]);
            if (nTbS == 16)
                vinserti128(Ymm(r), Ymm(r), ptr[neighbours + 8], 1);
            vpunpcklbw(mm, Register(zero));
        }
    }

    template <class S>
    void readLine(int ymmIdx0, int ymmIdx1, S src)
    {
        if (widthInBytes() == 4)
            vmovd(Xmm(ymmIdx0), ptr[src]);
        if (widthInBytes() == 8)
            vmovq(Xmm(ymmIdx0), ptr[src]);
        if (widthInBytes() == 16)
            vmovdqu(Xmm(ymmIdx0), ptr[src]);
        if (widthInBytes() >= 32)
            vmovdqu(Ymm(ymmIdx0), ptr[src]);
        if (widthInBytes() == 64)
            vmovdqu(Ymm(ymmIdx1), ptr[src + 32]);
    }

    void writeLine(Reg64 dst, Reg64 stride, int y, int low, int high)
    {
        Ymm ymmLow(low);
        Xmm xmmLow(low);
        Ymm ymmHigh(high);
        if (y)
        {
            assert(y == 1);
            if (widthInBytes() == 4)
                vmovd(ptr[dst + stride * sampleSize], xmmLow);
            if (widthInBytes() == 8)
                vmovq(ptr[dst + stride * sampleSize], xmmLow);
            if (widthInBytes() == 16)
                vmovdqu(ptr[dst + stride * sampleSize], xmmLow);
            if (widthInBytes() >= 32)
                vmovdqu(ptr[dst + stride * sampleSize], ymmLow);
            if (widthInBytes() == 64)
                vmovdqu(ptr[dst + stride * sampleSize + 32], ymmHigh);
        }
        else
        {
            if (widthInBytes() == 4)
                vmovd(ptr[dst], xmmLow);
            if (widthInBytes() == 8)
                vmovq(ptr[dst], xmmLow);
            if (widthInBytes() == 16)
                vmovdqu(ptr[dst], xmmLow);
            if (widthInBytes() >= 32)
                vmovdqu(ptr[dst], ymmLow);
            if (widthInBytes() == 64)
                vmovdqu(ptr[dst + 32], ymmHigh);
        }
    }

    template <class Register>
    void smearVertical(Reg64 dst, Reg64 stride, int low, int high, int topLow, int topHigh)
    {
        writeLine(dst, stride, 0, topLow, topHigh);
        for (int y = 1; y < nTbS; ++y)
        {
            writeLine(dst, stride, y % 2, low, high);
            if (y % 2)
                lea(dst, ptr[dst + stride * (2 * sampleSize)]);
        }
    }

    void extract(const Address& addr, const Xmm& x, uint8 imm)
    {
        if (sampleSize == 2)
            vpextrw(addr, x, imm);
        else
            vpextrb(addr, x, imm);
    }


    void extractLeftColumn(Reg64 dst, Reg64 stride, int samples, int temp, bool extractTop=true)
    {
        if (nTbS >= 16)
        {
            if (sampleSize == 1)
                vpackuswb(Ymm(samples), Ymm(samples));
            vextracti128(Xmm(temp), Ymm(samples), 1);
        }
        else
            if (sampleSize == 1)
                vpackuswb(Xmm(samples), Xmm(samples));

        // write out vertical column x=0 of filtered samples using vpextr instruction
        for (int j = nTbS - 1; ; )
        {
            Xmm xmm(j >= 8 ? temp : samples);

            if (extractTop || j != nTbS - 1)
                this->extract(ptr[dst], xmm, j % 8);
            --j;
            this->extract(ptr[dst + stride * sampleSize], xmm, j % 8);
            if (j == 0)
                break;
            --j;
            lea(dst, ptr[dst + stride * (2 * sampleSize)]);
        }
    }

    template <class Register>
    void broadcastLeftNeighbour(int out, int store, Reg64 neighbours, int y)
    {
        Register mmOut(out);
        Xmm xmmStore(store);

        auto const nSamples = std::min<int>(16 / sampleSize, nTbS);

        if (y % nSamples == 0)
            vmovdqu(xmmStore, ptr[neighbours - (y + 1 + nSamples) * sampleSize]);

        vpalignr(mmOut, xmmStore, (int)sampleSize * (nSamples - 1 - y % nSamples));

        if (sampleSize == 2)
            vpbroadcastw(mmOut, Xmm(out));
        else
            vpbroadcastb(mmOut, Xmm(out));
    }

    int nTbS;
    bool edge_flag;
    int bitDepth;

};

struct PredictDc :
    Predict
{
    template <typename Sample>
    PredictDc(Jit::Buffer *buffer, int bitDepth, int log2TrafoSize, bool edge_flag, Sample) :
        Predict(buffer, bitDepth, 1 << log2TrafoSize, edge_flag, Sample()),
        log2TrafoSize(log2TrafoSize)
    {
        this->reg = 1 + (nTbS == 32 || edge_flag) + (sampleSize == 1 && edge_flag) + edge_flag;
        this->buildSinglePass(0, this->reg, 0);
    }

    int const log2TrafoSize;
    int reg;
    Label round;
    Label ones;
    Label pattern;
    Label twos;

    void data()
    {
        L(round);
        dw({ nTbS }, 16);

        L(ones);
        db({ 1 }, 32);

        L(pattern);
        for (int i = 0; i < nTbS; ++i)
            db({ 1 }); // left samples
        db({ 0 }); // corner
        for (int i = 0; i < nTbS; ++i)
            db({ 1 }); // above samples
        for (int i = 0; i < 32 - (2 * nTbS) - 1; ++i)
            db({ 0 }); // above right samples

        L(twos);
        dw({ 2 }, 16);
    }

    template <typename Register>
    void edge(int acc0, int acc1, int edge, int zero, Reg64 dst, Reg64 dstCopy, Reg64 dstStride, Reg64 neighbours)
    {
        mov(dstCopy, dst);

        if (sampleSize == 1)
            vpxor(Register(zero), Register(zero));

        loadAboveNeighbours<Register>(edge, zero, neighbours);

        vpbroadcastw(Register(acc0), Xmm(acc0));

        vpaddw(Register(edge), Register(acc0)); // add DC
        vpaddw(Register(edge), Register(acc0)); // add DC

        vmovdqa(Register(acc1), Register(acc0)); // DC
        if (sampleSize == 2)
            vpinsrw(Xmm(acc1), word[neighbours - 2 * 2], 0); // left y=0 neighbour
        else
            vpinsrb(Xmm(acc1), word[neighbours - 2], 0); // left y=0 neighbour

        if (nTbS == 16)
            vinserti128(Ymm(acc1), Ymm(acc1), Xmm(acc0), 1);

        vpaddw(Register(acc1), Register(edge)); // add left neighbour / DC
        vpaddw(Register(acc1), ptr[rip + twos]);
        vpsrlw(Register(acc1), 2);

        if (sampleSize == 1)
        {
            if (nTbS == 16)
                vextracti128(Ymm(edge), Ymm(acc1), 1);
            vpackuswb(Register(acc1), Register(edge));
            vpbroadcastb(Register(edge), Xmm(acc0));
            smearVertical<Register>(dst, dstStride, edge, edge, acc1, acc1);
        }
        else
            smearVertical<Register>(dst, dstStride, acc0, acc0, acc1, acc1);

        loadLeftNeighbours<Register>(edge, zero, neighbours);

        vpaddw(Register(edge), Register(acc0)); // add DC
        vpaddw(Register(edge), Register(acc0)); // add DC
        vpaddw(Register(edge), Register(acc0)); // add DC
        vpaddw(Register(edge), ptr[rip + twos]);
        vpsrlw(Register(edge), 2);

        // write out vertical column x=0 of filtered samples using vpextr instruction
        extractLeftColumn(dstCopy, dstStride, edge, acc1, false);
    }

    void assemble()
    {
        auto &dst = arg64(0);
        auto &dstStride = arg64(1);
        auto &neighbours = arg64(2);
        auto &predModeIntra = arg64(3);

        bool flag = false;

        int reg = 0;
        int acc0 = reg++;
        int acc1 = (nTbS == 32 || edge_flag) ? reg++ : -1;
        int zero = (sampleSize == 1 && edge_flag) ? reg++ : -1;
        int edge = edge_flag ? reg++ : -1;
        assert(reg == this->reg);

        if (sampleSize == 1)
        {
            if (nTbS == 32)
            {
                vmovdqu(Ymm(acc0), ptr[neighbours]);
                vpmaddubsw(Ymm(acc0), ptr[rip + ones]);
                vmovdqu(Ymm(acc1), ptr[neighbours - 33]);
                vpmaddubsw(Ymm(acc1), ptr[rip + ones]);
                vpaddw(Ymm(acc0), Ymm(acc1));
            }
            else if (nTbS == 16)
            {
                vmovdqu(Xmm(acc0), ptr[neighbours - 1 - nTbS]);
                vinserti128(Ymm(acc0), Ymm(acc0), ptr[neighbours], 1);
                vpmaddubsw(Ymm(acc0), ptr[rip + ones]);
            }
            else if (nTbS == 8)
            {
                vmovdqu(Ymm(acc0), ptr[neighbours - 1 - nTbS]);
                vpmaddubsw(Ymm(acc0), ptr[rip + pattern]);
            }
            else if (nTbS == 4)
            {
                vmovdqu(Xmm(acc0), ptr[neighbours - 1 - nTbS]);
                vpmaddubsw(Xmm(acc0), ptr[rip + pattern]);
            }
        }
        else
        {
            if (nTbS >= 16)
            {
                vmovdqu(Ymm(acc0), ptr[neighbours]);
                vpaddw(Ymm(acc0), ptr[neighbours - 17 * 2]);
                if (nTbS == 32)
                {
                    vmovdqu(Ymm(acc1), ptr[neighbours + 32]);
                    vpaddw(Ymm(acc1), ptr[neighbours - 33 * 2]);
                    vpaddw(Ymm(acc0), Ymm(acc1));
                }
            }
            else
            {
                auto left = ptr[neighbours - 2 * (nTbS + 1)];
                auto above = ptr[neighbours];
                if (nTbS == 8)
                    vmovdqu(Xmm(acc0), left);
                else if (nTbS == 4)
                    vmovq(Xmm(acc0), left);
                vpaddw(Xmm(acc0), above);
                flag = true;
            }
        }

        if (!flag)
        {
            vextracti128(Xmm(acc1), Ymm(acc0), 1);
            vpaddw(Xmm(acc0), Xmm(acc1));
        }

        if (!flag || nTbS >= 8)
            // 4 8-bit values in acc0
            vphaddw(Xmm(acc0), Xmm(acc0));

        // 4 16-bit values in acc0
        vphaddw(Xmm(acc0), Xmm(acc0));
        vphaddw(Xmm(acc0), Xmm(acc0));
        vpaddw(Xmm(acc0), ptr[rip + round]);
        vpsrlw(Xmm(acc0), log2TrafoSize + 1);

        if (this->edge_flag)
        {
            if (nTbS == 16)
                this->edge<Ymm>(acc0, acc1, edge, zero, dst, predModeIntra, dstStride, neighbours);
            else
                this->edge<Xmm>(acc0, acc1, edge, zero, dst, predModeIntra, dstStride, neighbours);
        }
        else
        {
            if (sampleSize == 2)
                vpbroadcastw(Ymm(acc0), Xmm(acc0));
            else
                vpbroadcastb(Ymm(acc0), Xmm(acc0));

            smearVertical<Ymm>(dst, dstStride, acc0, acc0, acc0, acc0);
        }
    }

    template <typename Sample>
    static havoc::intra::Function<Sample> *compile(Jit::Buffer &buffer, int bitDepth, int log2TrafoSize, bool edge_flag)
    {
        if (!(buffer.isa & HAVOC_AVX2))
            return 0;

        PredictDc compiler(&buffer, bitDepth, log2TrafoSize, edge_flag, Sample());
        return compiler;
    }
};


struct PredictPlanar :
    Predict
{
    template <typename Sample>
    PredictPlanar(Jit::Buffer *buffer, int bitDepth, int log2TrafoSize, Sample) :
        Predict(buffer, bitDepth, 1 << log2TrafoSize, false, Sample()),
        log2TrafoSize(log2TrafoSize)
    {
        this->reg = 5 + 4 * (nTbS == 32) + (sampleSize == 1);
        this->buildSinglePass(0, this->reg, 0);
    }

    int log2TrafoSize;
    int reg;
    Label add;
    Label topRightCoefficients;
    Label leftCoefficients;

    void data()
    {
        align();

        L(add);
        dw({ nTbS }, 16);

        L(topRightCoefficients);
        if (sampleSize == 1 && nTbS == 32)
        {
            for (int x = 0; x < 8; ++x)
                dw({ x + 1 });
            for (int x = 16; x < 24; ++x)
                dw({ x + 1 });
            for (int x = 8; x < 16; ++x)
                dw({ x + 1 });
            for (int x = 24; x < 32; ++x)
                dw({ x + 1 });
        }
        else
            for (int i = 0; i < 32 / nTbS; ++i)
                for (int x = 0; x < nTbS; ++x)
                    dw({ x + 1 });

        L(leftCoefficients);
        if (sampleSize == 1 && nTbS == 32)
        {
            for (int x = 0; x < 8; ++x)
                dw({ nTbS - 1 - x });
            for (int x = 16; x < 24; ++x)
                dw({ nTbS - 1 - x });
            for (int x = 8; x < 16; ++x)
                dw({ nTbS - 1 - x });
            for (int x = 24; x < 32; ++x)
                dw({ nTbS - 1 - x });
        }
        else
            for (int i = 0; i < 32 / nTbS; ++i)
                for (int x = 0; x < nTbS; ++x)
                    dw({ nTbS - 1 - x });
    }

    void assemble()
    {
        if (nTbS >= 16)
            inner<Ymm>();
        else
            inner<Xmm>();
    }

    template <class Register> 
    void inner()
    {
        auto dst = arg64(0);
        auto dstStride = arg64(1);
        auto neighbours = arg64(2);
        auto predModeIntra = arg64(3);

        int reg = 0;
        auto const bottomLeft = reg++; // sample at p(-1, nTbS)
        auto const topRight = reg++; // sample at p(nTbS, -1)
        auto const above = reg++; // samples p(0,-1) to p(nTbS-1,-1)
        auto const temp = reg++;
        auto const leftNeighbours = reg++;
        bool const needHigh = nTbS == 32;
        auto const aboveHigh = needHigh ? reg++ : -1;
        auto const leftCoeffHigh = needHigh ? reg++ : -1;
        auto const topRightHigh = needHigh ? reg++ : -1;
        auto const deltaYHigh = needHigh ? reg++ : -1;
        auto const zero = sampleSize == 1 ? reg++ : 0;
        assert(reg == this->reg);

        if (sampleSize == 1)
            vpxor(Register(zero), Register(zero));

        // load 
        if (sampleSize == 2)
        {
            vpbroadcastw(Register(bottomLeft), ptr[neighbours - 2 * (2 + nTbS)]);
            vpbroadcastw(Register(topRight), ptr[neighbours + 2 * nTbS]);
            vmovdqu(Register(above), ptr[neighbours]);
            if (needHigh)
                vmovdqu(Register(aboveHigh), ptr[neighbours + 32]);
        }
        else
        {
            vpbroadcastb(Register(bottomLeft), ptr[neighbours - 1 * (2 + nTbS)]);
            vpbroadcastb(Register(topRight), ptr[neighbours + 1 * nTbS]);
            vpunpcklbw(Register(bottomLeft), Register(zero));
            vpunpcklbw(Register(topRight), Register(zero));

            if (nTbS == 32)
            {
                vmovdqu(Register(above), ptr[neighbours]);
                vpunpckhbw(Register(aboveHigh), Register(above), Register(zero));
                vpunpcklbw(Register(above), Register(zero));
            }
            else
            {
                vmovdqu(Register(above), ptr[neighbours]);
                if (nTbS >= 8)
                    vinserti128(Ymm(above), Ymm(above), ptr[neighbours + 8], 1);
                vpunpcklbw(Register(above), Register(zero));
            }
        }

        // compute things that do not change with y
        if (needHigh)
            vmovdqa(Register(topRightHigh), Register(topRight));
        vpmullw(Register(topRight), ptr[rip + topRightCoefficients]); // (x + 1) * p(nTbS, -1)
        if (needHigh)
            vpmullw(Register(topRightHigh), ptr[rip + topRightCoefficients + 32]); // (x + 1) * p(nTbS, -1)

        auto ymmAccumulator = Register(topRight);
        auto ymmAccumulatorHigh = Register(topRightHigh);

        vpaddw(ymmAccumulator, ptr[rip + add]);  // (x + 1) * p(nTbS, -1) + nTbS
        if (needHigh)
            vpaddw(ymmAccumulatorHigh, ptr[rip + add]);  // (x + 1) * p(nTbS, -1) + nTbS

        vpsllw(Register(temp), Register(above), log2TrafoSize); // nTbS * p(x, -1)
        vpaddw(ymmAccumulator, Register(temp)); // (x + 1) * p(nTbS, -1) + nTbS * p(x, -1) + nTbS
        if (needHigh)
        {
            vpsllw(Register(temp), Register(aboveHigh), log2TrafoSize); // nTbS * p(x, -1)
            vpaddw(ymmAccumulatorHigh, Register(temp)); // (x + 1) * p(nTbS, -1) + nTbS * p(x, -1) + nTbS
        }

        auto ymmDeltaY = Register(bottomLeft); // p(-1, nTbS)
        if (needHigh)
        {
            vmovdqa(Register(deltaYHigh), ymmDeltaY);
            vpsubw(Register(deltaYHigh), Register(aboveHigh)); // p(-1, nTbS) - p(x, -1)
        }
        vpsubw(ymmDeltaY, Register(above)); // p(-1, nTbS) - p(x, -1)

        auto ymmLeftCoeff = Register(temp);
        vmovdqu(ymmLeftCoeff, ptr[rip + leftCoefficients]);
        if (needHigh)
            vmovdqu(Register(leftCoeffHigh), ptr[rip + leftCoefficients + 32]);

        auto ymmRow = Register(above);
        auto ymmRowHigh = Register(aboveHigh);

        for (int y = 0; y < nTbS; ++y)
        {
            vpaddw(ymmAccumulator, ymmDeltaY); // (x + 1) * p(nTbS, -1) + (nTbS - 1 - y) * p(x, -1) + (y + 1) * p(-1, nTbS) + nTbS
            if (needHigh)
                vpaddw(ymmAccumulatorHigh, Register(deltaYHigh)); // (x + 1) * p(nTbS, -1) + (nTbS - 1 - y) * p(x, -1) + (y + 1) * p(-1, nTbS) + nTbS

            broadcastLeftNeighbour<Register>(above, leftNeighbours, neighbours, y);
            if (sampleSize == 1)
                vpunpcklbw(ymmRow, Register(zero));

            if (needHigh)
                vmovdqa(ymmRowHigh, ymmRow);

            vpmullw(ymmRow, ymmLeftCoeff);
            if (needHigh)
                vpmullw(ymmRowHigh, Register(leftCoeffHigh));

            vpaddw(ymmRow, ymmAccumulator);
            if (needHigh)
                vpaddw(ymmRowHigh, ymmAccumulatorHigh);

            vpsrlw(ymmRow, log2TrafoSize + 1);
            if (needHigh)
                vpsrlw(ymmRowHigh, log2TrafoSize + 1);

            if (sampleSize == 1)
                vpackuswb(ymmRow, ymmRowHigh);

            if (sampleSize == 1 && nTbS == 16)
            {
                if (y % 2)
                {
                    vmovq(ptr[dst + dstStride], Xmm(ymmRow.getIdx()));
                    vextracti128(Ymm(above), Ymm(above), 1);
                    vmovq(ptr[dst + dstStride + 8], Xmm(ymmRow.getIdx()));
                }
                else
                {
                    vmovq(ptr[dst], Xmm(ymmRow.getIdx()));
                    vextracti128(Ymm(above), Ymm(above), 1);
                    vmovq(ptr[dst + 8], Xmm(ymmRow.getIdx()));
                }
            }
            else
                writeLine(dst, dstStride, y % 2, above, aboveHigh);

            if (y % 2 && y != nTbS - 1)
                lea(dst, ptr[dst + dstStride * (2 * sampleSize)]);
        }
    }

    template <typename Sample>
    static havoc::intra::Function<Sample> *compile(Jit::Buffer &buffer, int bitDepth, int log2TrafoSize)
    {
        if (!(buffer.isa & HAVOC_AVX2))
            return 0;

        PredictPlanar compiler(&buffer, bitDepth, log2TrafoSize, Sample());
        return compiler;
    }
};


struct PredictVert :
    Predict
{
    template <typename Sample>
    PredictVert(Jit::Buffer *buffer, int bitDepth, int log2TrafoSize, bool edge_flag, Sample) :
        Predict(buffer, bitDepth, 1 << log2TrafoSize, edge_flag, Sample())
    {
        this->reg = 2 + 2 * this->edge_flag;
        this->buildSinglePass(0, this->reg, 0);
    }

    int reg;

    void assemble()
    {
        if (nTbS <= 8)
            inner<Xmm>();
        else
            inner<Ymm>();
    }

    template <typename Register>
    void inner()
    {
        auto &dst = arg64(0);
        auto &dstStride = arg64(1);
        auto &neighbours = arg64(2);
        auto &predModeIntra = arg64(3);

        int reg = 0;
        int const lo = reg++;
        int const hi = reg++;

        Reg64 const *dstCopy = &predModeIntra;

        readLine(lo, hi, neighbours);

        if (edge_flag)
            mov(*dstCopy, dst);

        smearVertical<Register>(dst, dstStride, lo, hi, lo, hi);

        if (this->edge_flag)
        {
            auto const temp = reg++;
            auto const zero = reg++;

            vpxor(Register(zero), Register(zero));

            if (sampleSize == 2)
            {
                vpbroadcastw(Register(lo), ptr[neighbours - 2]);
                vpbroadcastw(Register(hi), ptr[neighbours]);
            }
            else
            {
                vpbroadcastb(Register(lo), ptr[neighbours - 1]);
                vpunpcklbw(Register(lo), Register(zero));
                vpbroadcastb(Register(hi), ptr[neighbours]);
                vpunpcklbw(Register(hi), Register(zero));
            }

            loadLeftNeighbours<Register>(temp, zero, neighbours);

            vpsubw(Register(temp), Register(lo));
            vpsraw(Register(temp), 1);
            vpaddw(Register(hi), Register(temp));

            if (sampleSize == 2)
            {
                mov(word[*dstCopy], (1 << bitDepth) - 1);
                vpbroadcastw(Register(temp), word[*dstCopy]);
                vpmaxsw(Register(hi), Register(zero));
                vpminsw(Register(hi), Register(temp));
            }

            extractLeftColumn(*dstCopy, dstStride, hi, temp);
        }

        assert(reg == this->reg);
    }

    template <typename Sample>
    static havoc::intra::Function<Sample> *compile(Jit::Buffer &buffer, int bitDepth, int log2TrafoSize, bool edge_flag)
    {
        if (!(buffer.isa & HAVOC_AVX2))
            return 0;

        PredictVert compiler(&buffer, bitDepth, log2TrafoSize, edge_flag, Sample());
        return compiler;
    }
};

// base class for all angular predictions
struct PredictAngular :
    Predict
{
    template <typename Sample>
    PredictAngular(Jit::Buffer *buffer, int bitDepth, int nTbS, int predModeIntra, Sample) :
        Predict(buffer, bitDepth, nTbS, false, Sample()),
        predModeIntra(predModeIntra),
        intraPredAngle(predModeIntra)
    {
    }

    // shuffle used in projecting neighbour samples
    struct Shuffle
    {
        std::vector<int> permutation;
        int offsetSource;
        int offsetDest;
        bool isMove() const
        {
            for (int i = 1; i < this->permutation.size(); ++i)
            {
                if (permutation[i] == -1)
                    continue;
                if (permutation[i] - i != permutation[0])
                    return false;
            }
            return true;
        }
    };

    // compute shuffle(s) needed to project neighbour samples
    void computeShuffles()
    {
        ReferenceSampleArray<int> ref;

        // ref contains neighbour offset:
        // ref[0] = 0 represents neighbour at (-1, -1)

        for (int x = 0; x <= nTbS; ++x)
            ref[x] = x;

        InvAngle invAngle{ this->predModeIntra };
        for (int x = -1; x > -nTbS; --x)
            ref[x] = -((x * invAngle + 128) >> 8);

        bool const left = this->predModeIntra < 18;

        for (int i = 0; i < 2 * nTbS; ++i)
        {
            int x;
            if (left)
                x = nTbS - i; // from nTbS to -(nTbS-1)
            else
                x = i - (nTbS - 1); // from -(nTbS-1) to nTbS

            if (x >= ((nTbS * intraPredAngle) >> 5))
            {
                for (int j = 0; j < sampleSize; ++j)
                {
                    auto const a = ((left ? -1 : 1) * ref[x] - 1) * sampleSize + j;

                    bool needNew = this->shuffles.empty();
                    if (!needNew)
                        needNew = this->shuffles.back().permutation.size() == 16;
                    if (!needNew)
                        needNew = a - this->shuffles.back().offsetSource > this->shuffles.back().permutation.front() + 15;

                    if (needNew)
                    {
                        Shuffle shuffle;
                        shuffle.offsetSource = a;
                        shuffle.offsetDest = ((left ? -1 : 1) * x - 1) * sampleSize + j;
                        this->shuffles.push_back(shuffle);
                    }

                    this->shuffles.back().permutation.push_back(a - this->shuffles.back().offsetSource);
                }
            }
        }

        for (auto &shuffle : this->shuffles)
            while (shuffle.permutation.size() < 16)
                shuffle.permutation.push_back(-1);
    }

    Label shuffleData;

    // assemble the data used by the shuffle code
    void dataShuffles()
    {
        L(shuffleData);
        for (auto a : this->shuffles)
            if (!a.isMove())
                for (auto b : a.permutation)
                    db({ b });
    }

    // assemble a sequence of shuffle instructions that will make a copy on the stack of neighbours with 
    // those that need to be shuffled in the expected positions
    void assembleShuffles(Reg64 neighbours)
    {
        auto const offset = -shuffles.front().offsetDest;
        int i = 0;
        for (int x = 0; x < this->shuffles.size(); )
        {
            if (x < this->shuffles.size() - 1 
                && !this->shuffles[x].isMove() 
                && !this->shuffles[x+1].isMove())
            {
                // perform a 32-byte shuffle
                vmovdqu(xmm0, ptr[neighbours + this->shuffles[x].offsetSource]);
                vinserti128(ymm0, ymm0, ptr[neighbours + this->shuffles[x+1].offsetSource], 1);
                vpshufb(ymm0, ymm0, ptr[rip + shuffleData + 16 * i]);
                i += 2;
                if (this->shuffles[x + 1].offsetDest == this->shuffles[x].offsetDest + 16)
                    vmovdqu(ptr[rsp + offset + this->shuffles[x].offsetDest], ymm0);
                else
                {
                    vmovdqu(ptr[rsp + offset + this->shuffles[x].offsetDest], xmm0);
                    vextracti128(ptr[rsp + offset + this->shuffles[x+1].offsetDest], ymm0, 1);
                }
                x += 2;
            }
            else
            {
                // perform a 16-byte shuffle
                vmovdqu(xmm0, ptr[neighbours + this->shuffles[x].offsetSource]);
                if (!this->shuffles[x].isMove())
                    vpshufb(xmm0, xmm0, ptr[rip + shuffleData + 16 * i++]);
                vmovdqu(ptr[rsp + offset + this->shuffles[x].offsetDest], xmm0);
                ++x;
            }
        }
        lea(neighbours, ptr[rsp + offset]);
    }

    int const predModeIntra;
    IntraPredAngle const intraPredAngle;
    std::vector<Shuffle> shuffles;
};

struct PredictAngularFromAbove :
    PredictAngular
{
    template <typename Sample>
    PredictAngularFromAbove(Jit::Buffer *buffer, int bitDepth, int log2TrafoSize, int predModeIntra, Sample) :
        PredictAngular(buffer, bitDepth, 1 << log2TrafoSize, predModeIntra, Sample()),
        needShuffle((predModeIntra >= 19 && predModeIntra <= 24) || (predModeIntra == 25 && log2TrafoSize == 5)),
        needFilter(this->predModeIntra != 18 && this->predModeIntra != 26 && this->predModeIntra != 34),
        bytes64(sampleSize * nTbS == 64)
    {
        int stackSize = 0;

        if (this->needShuffle)
        {
            this->computeShuffles();
            stackSize = 16 + this->shuffles.back().offsetDest - this->shuffles.front().offsetDest;
        }

        this->totalRegisters = 2 + 2 * needFilter + (nTbS >= (sampleSize == 1 ? 16 : 8)) + (bytes64)+(bytes64 && needFilter) + (sampleSize == 2) + needFilter;
        this->buildSinglePass(0, this->totalRegisters, stackSize);
    }

    bool const needShuffle;
    bool const needFilter;
    bool const bytes64;

    Label sixteen;
    Label coefficients;
    int totalRegisters;

    void data()
    {
        align();

        if (needShuffle)
            dataShuffles();

        if (needFilter)
        {
            L(coefficients);
            int offset = 0;
            for (int y = 0; y < nTbS; ++y)
            {
                auto const iFact = ((y + 1) * intraPredAngle) & 31;
                if (map.find(iFact) != map.end())
                    if (map[iFact] == offset)
                    {
                        if (sampleSize == 1)
                            db({ 32 - iFact , iFact });
                        else
                            dw({ 32 - iFact , iFact });
                        ++offset;
                    }
            }

            L(sixteen);
            dw({ 16 });
        }
    }

    std::map<int, int> map;

    struct Line
    {
        int iIdx = 999;
        int ymmL;
        int ymmH;
    };

    Line line[2];

    bool readLines(int iIdx, Reg64 neighbours, int lines, bool noSwap = false)
    {
        bool swap = line[0].iIdx == iIdx + 1 || line[0].iIdx == iIdx - 1 || line[1].iIdx == iIdx;

        if (noSwap)
            swap = false;

        if (line[0].iIdx != iIdx + swap)
            if (lines == 2 || !swap)
            {
                line[0].iIdx = iIdx + swap;
                readLine(line[0].ymmL, line[0].ymmH, neighbours + sampleSize * line[0].iIdx);
            }

        if (line[1].iIdx != iIdx + !swap)
            if (lines == 2 || swap)
            {
                line[1].iIdx = iIdx + !swap;
                readLine(line[1].ymmL, line[1].ymmH, neighbours + sampleSize * line[1].iIdx);
            }

        return swap;
    }

    template <class Register>
    void line8(int mm0L, int mm1L, int iFact, int coeffs, int lo, int hi, int round)
    {
        bool const high = hi >= 0;

        vpbroadcastw(Register(coeffs), ptr[rip + coefficients + 2 * this->map[iFact]]);

        vpunpcklbw(Register(lo), Register(mm0L), Register(mm1L));
        if (high)
            vpunpckhbw(Register(hi), Register(mm0L), Register(mm1L));

        vpmaddubsw(Register(lo), Register(coeffs));
        if (high)
            vpmaddubsw(Register(hi), Register(coeffs));

        vpaddw(Register(lo), Register(round));
        if (high)
            vpaddw(Register(hi), Register(round));

        vpsrlw(Register(lo), 5);
        if (high)
            vpsrlw(Register(hi), 5);

        vpackuswb(Register(lo), Register(hi));
    }

    template <class Register>
    void line16(int mm0L, int mm1L, int mm0H, int mm1H, int iFact, int lo, int hi, int coeff0, int coeff1, int round)
    {
        auto ymm0L = Register(mm0L);
        auto ymm1L = Register(mm1L);
        auto ymm0H = Register(mm0H);
        auto ymm1H = Register(mm1H);

        vpbroadcastw(Register(coeff0), ptr[rip + coefficients + 4 * this->map[iFact]]);
        vpbroadcastw(Register(coeff1), ptr[rip + coefficients + 4 * this->map[iFact] + 2]);

        vpmullw(Register(lo), ymm0L, Register(coeff0));
        vpmullw(Register(hi), ymm1L, Register(coeff1));
        vpaddw(Register(lo), Register(hi));
        vpaddw(Register(lo), Register(round));
        vpsrlw(Register(lo), 5);

        if (nTbS == 32)
        {
            vpmullw(Register(hi), ymm0H, Register(coeff0));
            vpmullw(Register(coeff0), ymm1H, Register(coeff1));
            vpaddw(Register(hi), Register(coeff0));
            vpaddw(Register(hi), Register(round));
            vpsrlw(Register(hi), 5);
        }
    }

    void assemble()
    {
        auto &dst = arg64(0);
        auto &dstStride = arg64(1);
        auto &neighbours = arg64(2);
        auto &predModeIntra = arg64(3);

        Reg64 const *dstCopy = &predModeIntra;

        int reg = 0;

        int lo = reg++;
        this->line[0].ymmL = reg++;
        this->line[1].ymmL = needFilter ? reg++ : -1;
        int coeff0 = needFilter ? reg++ : -1;
        int hi = nTbS >= (sampleSize == 1 ? 16 : 8) ? reg++ : -1;
        this->line[0].ymmH = bytes64 ? reg++ : -1;
        this->line[1].ymmH = (bytes64 && needFilter) ? reg++ : -1;
        int coeff1 = sampleSize == 2 ? reg++ : -1;
        int round = needFilter ? reg++ : -1;
        assert(reg == this->totalRegisters);

        if (needFilter)
            if (nTbS * sampleSize >= 16)
                vpbroadcastw(Ymm(round), ptr[rip + sixteen]);
            else
                vpbroadcastw(Xmm(round), ptr[rip + sixteen]);

        if (needShuffle)
            this->assembleShuffles(neighbours);

        int inA = -1;
        int inB = -1;

        int offset = 0;
        for (int y = 0; y < nTbS; ++y)
        {
            auto const iIdx = ((y + 1) * intraPredAngle) >> 5;
            auto const iFact = ((y + 1) * intraPredAngle) & 31;

            if (iFact == 0)
            {
                int i = readLines(iIdx, neighbours, 1, !needFilter);
                writeLine(dst, dstStride, y % 2, this->line[i].ymmL, this->line[i].ymmH);
            }
            else
            {
                // dst[x + y*dst_stride] = ((32 - iFact) * ref[x + iIdx + 1] + iFact * ref[x + iIdx + 2] + 16) >> 5;
                int i = readLines(iIdx, neighbours, 2);

                if (this->map.find(iFact) == this->map.end())
                    this->map[iFact] = offset++;

                if (sampleSize == 1)
                {
                    if (nTbS >= 16)
                        this->line8<Ymm>(this->line[i].ymmL, this->line[!i].ymmL, iFact, coeff0, lo, hi, round);
                    else
                        this->line8<Xmm>(this->line[i].ymmL, this->line[!i].ymmL, iFact, coeff0, lo, hi, round);
                }
                else
                {
                    if (nTbS >= 8)
                        this->line16<Ymm>(this->line[i].ymmL, this->line[!i].ymmL, this->line[i].ymmH, this->line[!i].ymmH, iFact, lo, hi, coeff0, coeff1, round);
                    else
                        this->line16<Xmm>(this->line[i].ymmL, this->line[!i].ymmL, this->line[i].ymmH, this->line[!i].ymmH, iFact, lo, hi, coeff0, coeff1, round);
                }

                writeLine(dst, dstStride, y % 2, lo, hi);
            }

            if (y % 2 && y != nTbS - 1)
                lea(dst, ptr[dst + dstStride * (2 * sampleSize)]);
        }
    }

    template <typename Sample>
    static havoc::intra::Function<Sample> *compile(Jit::Buffer &buffer, int bitDepth, int log2TrafoSize, int predModeIntra)
    {
        if (!(buffer.isa & HAVOC_AVX2))
            return 0;

        if (predModeIntra == 26)
            return 0;

        PredictAngularFromAbove compiler(&buffer, bitDepth, log2TrafoSize, predModeIntra, Sample());
        return compiler;
    }
};

struct PredictAngularFromLeft :
    PredictAngular
{
    template <typename Sample>
    PredictAngularFromLeft(Jit::Buffer *buffer, int bitDepth, int log2TrafoSize, int predModeIntra, Sample) :
        PredictAngular(buffer, bitDepth, 1 << log2TrafoSize, predModeIntra, Sample()),
        needShuffle(predModeIntra + (log2TrafoSize + 1) / 2 > 13),
        needFilter(predModeIntra != 2 && predModeIntra != 10),
        bytes64(sampleSize * nTbS == 64)
    {
        int stackSize = 0;

        // compute shuffles used for projection of neighbours
        if (this->needShuffle)
        {
            this->computeShuffles();
            stackSize = 16 + this->shuffles.back().offsetDest - this->shuffles.front().offsetDest;
        }

        ShuffleFilter shuffleFilter;

        // compute shuffles used during filtering
        for (int x = 0; x < nTbS; ++x)
        {
            const int iIdx = ((x + 1) * intraPredAngle) >> 5;

            shuffleFilter.permutation.push_back(-sampleSize * (iIdx + 1));
            if (sampleSize == 2)
                shuffleFilter.permutation.push_back(-sampleSize * (iIdx + 1) + 1);

            if (shuffleFilter.permutation.size() == 16 || x == nTbS - 1)
            {
                shuffleFilter.offset = shuffleFilter.permutation.front();
                for (auto &a : shuffleFilter.permutation)
                    if (a < shuffleFilter.offset)
                        shuffleFilter.offset = a;

                for (auto &a : shuffleFilter.permutation)
                {
                    a -= shuffleFilter.offset;
                    assert(a <= 15);
                }
                while (shuffleFilter.permutation.size() < 16)
                    shuffleFilter.permutation.push_back(-1);

                this->shufflesFilter.push_back(shuffleFilter);
                shuffleFilter.permutation.clear();
            }
        }

        this->reg = 3 + 3 * (nTbS >= 16) + 5 * needFilter + 2 * (needFilter && nTbS >= 16) + (sampleSize == 2 && needFilter);

        this->buildSinglePass(0, this->reg, stackSize);
    }

    bool const needShuffle;
    bool const needFilter;
    bool const bytes64;

    // shuffle used during filtering
    struct ShuffleFilter
    {
        std::vector<int> permutation;
        int offset;
        bool isBroadcast() const
        {
            for (auto a : this->permutation)
                if (a != this->permutation.front())
                    return false;
            return true;
        }
    };

    std::vector<ShuffleFilter> shufflesFilter;

    Label shuffleFilterData;
    Label sixteen;
    Label coefficients;
    int reg;

    void data()
    {
        align();

        if (needShuffle)
            dataShuffles();

        L(shuffleFilterData);
        for (auto &a : this->shufflesFilter)
            for (auto &b : a.permutation)
                db({ b });

        if (needFilter)
        {
            L(coefficients);
            for (int j = 0; j < sampleSize; ++j)
                for (int i = 0; i < nTbS; ++i)
                {
                    auto x = i;

                    // allow for unpacking
                    if (nTbS == 32 && sampleSize == 1)
                        x = ((i & 16) >> 1) | ((i & 8) << 1) | (i & 7);

                    auto const iFact = ((x + 1) * intraPredAngle) & 31;

                    if (sampleSize == 1)
                        db({ 32 - iFact, iFact });
                    else
                        dw({ j ? iFact : (32 - iFact) });
                }

            L(sixteen);
            dw({ 16 });
        }
    }

    void readLine(int lo, int hi, int shuffleL, int shuffleH, int y, Reg64 neighbours)
    {
        vmovdqu(Xmm(lo), ptr[neighbours + sampleSize * (-1 - y) + this->shufflesFilter[0].offset]);
        if (nTbS * sampleSize >= 32)
        {
            vinserti128(Ymm(lo), Ymm(lo), ptr[neighbours + sampleSize * (-1 - y) + this->shufflesFilter[1].offset], 1);
            if (nTbS * sampleSize == 64)
            {
                vmovdqu(Xmm(hi), ptr[neighbours + sampleSize * (- 1 - y) + this->shufflesFilter[2].offset]);
                vinserti128(Ymm(hi), Ymm(hi), ptr[neighbours + sampleSize * (-1 - y) + this->shufflesFilter[3].offset], 1);
            }
        }

        vpshufb(Ymm(lo), Ymm(lo), Ymm(shuffleL)); 
        if (nTbS * sampleSize == 64)
            vpshufb(Ymm(hi), Ymm(hi), Ymm(shuffleH));
    }

    void assemble()
    {
        if (nTbS * sampleSize <= 16)
            inner<Xmm>();
        else
            inner<Ymm>();
    }

    template <typename Register>
    void inner()
    {
        auto &dst = arg64(0);
        auto &dstStride = arg64(1);
        auto &neighbours = arg64(2);
        auto &predModeIntra = arg64(3);

        int reg = 0;
        int in0L = reg++;
        int in1L = reg++;
        int const shuffle = reg++;
        int const shuffleH = (nTbS >= 16) ? reg++ : -1;
        int in0H = (nTbS >= 16) ? reg++ : -1;
        int in1H = (nTbS >= 16) ? reg++ : -1;
        int const lo = needFilter ? reg++ : in0L;
        int const hi = needFilter ? reg++ : in0H;
        int const round = needFilter ? reg++ : -1;
        int const coeffs = needFilter ? reg++ : -1;
        int const coeffs1 = needFilter ? reg++ : -1;
        int const coeffsH = (needFilter && nTbS >= 16) ? reg++ : -1;
        int const coeffs1H = (needFilter && nTbS >= 16) ? reg++ : -1;
        int const temp = (sampleSize == 2 && needFilter) ? reg++ : -1;
        assert(reg == this->reg);

        if (needShuffle)
            assembleShuffles(neighbours);

        vmovdqu(Register(shuffle), ptr[rip + shuffleFilterData]);
        if (nTbS >= 16)
            vmovdqu(Register(shuffleH), ptr[rip + shuffleFilterData + 32]);
        vmovdqu(Register(coeffs), ptr[rip + coefficients]);
        if (nTbS >= 16)
            vmovdqu(Register(coeffsH), ptr[rip + coefficients + nTbS]);
        vmovdqu(Register(coeffs1), ptr[rip + coefficients + nTbS * sampleSize]);
        if (nTbS >= 16)
            vmovdqu(Register(coeffs1H), ptr[rip + coefficients + nTbS * sampleSize + nTbS]);
        vpbroadcastw(Register(round), ptr[rip + sixteen]);

        readLine(in0L, in0H, shuffle, shuffleH, 0, neighbours);

        for (int y = 0;y < nTbS; ++y)
        {
            readLine(in1L, in1H, shuffle, shuffleH, y + 1, neighbours);

            if (needFilter)
            {
                if (sampleSize == 1)
                {
                    if (nTbS >= 16)
                    {
                        vpunpckhbw(Register(hi), Register(in0L), Register(in1L));
                        vpmaddubsw(Register(hi), Register(coeffsH));
                        vpaddw(Register(hi), Register(round));
                        vpsrlw(Register(hi), 5);
                    }
                    vpunpcklbw(Register(lo), Register(in0L), Register(in1L));
                    vpmaddubsw(Register(lo), Register(coeffs));
                    vpaddw(Register(lo), Register(round));
                    vpsrlw(Register(lo), 5);

                    vpackuswb(Register(lo), Register(hi));
                }
                else
                {
                    vpmullw(Register(lo), Register(in0L), Register(coeffs));
                    vpmullw(Register(temp), Register(in1L), Register(coeffs1));
                    vpaddw(Register(lo), Register(temp));
                    vpaddw(Register(lo), Register(round));
                    vpsrlw(Register(lo), 5);
                    if (nTbS >= 16)
                    {
                        vpmullw(Register(hi), Register(in0H), Register(coeffsH));
                        vpmullw(Register(temp), Register(in1H), Register(coeffs1H));
                        vpaddw(Register(hi), Register(temp));
                        vpaddw(Register(hi), Register(round));
                        vpsrlw(Register(hi), 5);
                    }
                }

                std::swap(in0L, in1L);
                std::swap(in0H, in1H);
            }

            writeLine(dst, dstStride, y % 2, lo, hi);

            if (!needFilter && y + 1 != nTbS)
                readLine(in0L, in0H, shuffle, shuffleH, y + 1, neighbours);

            if (y % 2 && y != nTbS - 1)
                lea(dst, ptr[dst + dstStride * (2 * sampleSize)]);
        }
    }

    template <typename Sample>
    static havoc::intra::Function<Sample> *compile(Jit::Buffer &buffer, int bitDepth, int log2TrafoSize, int predModeIntra)
    {
        if (!(buffer.isa & HAVOC_AVX2))
            return 0;

        if (predModeIntra == 10)
            return 0;

        PredictAngularFromLeft compiler(&buffer, bitDepth, log2TrafoSize, predModeIntra, Sample());
        return compiler;
    }
};

struct PredictHoriz :
    Predict
{
    template <typename Sample>
    PredictHoriz(Jit::Buffer *buffer, int bitDepth, int log2TrafoSize, bool edge_flag, Sample) :
        Predict(buffer, bitDepth, 1 << log2TrafoSize, edge_flag, Sample())
    {
        this->reg = 2 + 2 * edge_flag + (edge_flag && sampleSize == 1);
        this->buildSinglePass(0, this->reg, 0);
    }

    Label max;
    int reg;

    void data()
    {
        L(max);
        dw({ (1 << bitDepth) - 1 });
    }

    void assemble()
    {
        auto &dst = arg64(0);
        auto &dstStride = arg64(1);
        auto &neighbours = arg64(2);
        auto &predModeIntra = arg64(3);

        int reg = 0;
        int const store = reg++;
        int const left = reg++;
        int const above = edge_flag ? reg++ : -1;
        int const corner = edge_flag ? reg++ : -1;
        int const zero = (edge_flag && sampleSize == 1) ? reg++ : -1;
        assert(reg == this->reg);

        typedef Ymm Register;

        for (int y = 0; y < nTbS; ++y)
        {
            broadcastLeftNeighbour<Register>(left, store, neighbours, y);

            if (y == 0 && edge_flag)
            {
                vpxor(Register(zero), Register(zero));

                if (sampleSize == 2)
                {
                    vpbroadcastw(Register(corner), ptr[neighbours - 2]); // corner
                }
                else
                {
                    vpbroadcastb(Register(corner), ptr[neighbours - 1]);
                    vpunpcklbw(Register(corner), Register(zero)); // corner
                    vpunpcklbw(Register(left), Register(zero)); // left neighbour (-1, 0)
                }

                loadAboveNeighbours<Register>(above, zero, neighbours);

                vpsubw(Register(above), Register(corner));
                vpsraw(Register(above), 1);

                vpaddw(Register(left), Register(above));

                if (sampleSize == 2)
                {
                    vpbroadcastw(Register(above), ptr[rip + max]);
                    vpmaxsw(Register(left), Register(zero));
                    vpminsw(Register(left), Register(above));
                }
                else
                {
                    if (nTbS == 16)
                        vextracti128(Xmm(above), Register(left), 1);
                    vpackuswb(Xmm(left), Xmm(above));
                }
            }

            writeLine(dst, dstStride, y % 2, left, left);

            if (y % 2 && y != nTbS - 1)
                lea(dst, ptr[dst + dstStride * (2 * sampleSize)]);
        }
    }

    template <typename Sample>
    static havoc::intra::Function<Sample> *compile(Jit::Buffer &buffer, int bitDepth, int log2TrafoSize, bool edge_flag)
    {
        if (!(buffer.isa & HAVOC_AVX2))
            return 0;

        PredictHoriz compiler(&buffer, bitDepth, log2TrafoSize, edge_flag, Sample());
        return compiler;
    }
};

template <int bitDepth, typename Sample>
void populateAsm(Table<Sample> &table, havoc_code code)
{
    auto &buffer = *reinterpret_cast<Jit::Buffer *>(code.implementation);
    
    if ((buffer.isa & HAVOC_SSE2) && !(buffer.isa & HAVOC_AVX2) && sizeof(Sample) == 1)
    {
        // 4x4
        table.lookup(1, bitDepth, 2, 0) = IntraPredPlanar4x4_SSE_8bits<Sample>{ &buffer, 0 };
        table.lookup(0, bitDepth, 2, 1) = IntraPredDc4x4_SSE_8bits<Sample>{ &buffer, 1 };
        table.lookup(1, bitDepth, 2, 1) = IntraPredDc4x4_SSE_8bits_nof<Sample>{ &buffer, 1 };
        for (int i = 2; i <= 9; ++i)
            table.lookup(0, bitDepth, 2, i) = IntraPredAng4x4_2to9_27to34_PosAng_SSE_8bits<Sample>{ &buffer, i };
        table.lookup(0, bitDepth, 2, 10) = IntraPredAng4x4_10_filt_SSE_8bits<Sample>{ &buffer, 10 };
        table.lookup(1, bitDepth, 2, 10) = IntraPredAng4x4_10_nofilt_SSE_8bits<Sample>{ &buffer, 10 };
        for (int i = 11; i <= 25; ++i)
            table.lookup(0, bitDepth, 2, i) = IntraPredAng4x4_11to25_NegAng_SSE_8bits<Sample>{ &buffer, i };
        table.lookup(0, bitDepth, 2, 26) = IntraPredAng4x4_26_filt_SSE_8bits<Sample>{ &buffer, 26 };
        table.lookup(1, bitDepth, 2, 26) = IntraPredAng4x4_26_nofilt_SSE_8bits<Sample>{ &buffer, 26 };
        for (int i = 27; i <= 34; ++i)
            table.lookup(0, bitDepth, 2, i) = IntraPredAng4x4_2to9_27to34_PosAng_SSE_8bits<Sample>{ &buffer, i };

        // 8x8
        table.lookup(1, bitDepth, 3, 0) = IntraPredPlanar8x8_SSE_8bits<Sample>{ &buffer, 0 };
        table.lookup(0, bitDepth, 3, 1) = IntraPredDc8x8_SSE_8bits<Sample>{ &buffer, 1 };
        table.lookup(1, bitDepth, 3, 1) = IntraPredDc8x8_SSE_8bits_nof<Sample>{ &buffer, 1 };
        for (int i = 2; i <= 9; ++i)
            table.lookup(0, bitDepth, 3, i) = IntraPredAng8x8_2to9_27to34_PosAng_SSE_8bits<Sample>{ &buffer, i };
        table.lookup(0, bitDepth, 3, 10) = IntraPredAng8x8_10_filt_SSE_8bits<Sample>{ &buffer, 10 };
        table.lookup(1, bitDepth, 3, 10) = IntraPredAng8x8_10_nofilt_SSE_8bits<Sample>{ &buffer, 10 };
        for (int i = 11; i <= 25; ++i)
            table.lookup(0, bitDepth, 3, i) = IntraPredAng8x8_11to25_NegAng_SSE_8bits<Sample>{ &buffer, i };
        table.lookup(0, bitDepth, 3, 26) = IntraPredAng8x8_26_filt_SSE_8bits<Sample>{ &buffer, 26 };
        table.lookup(1, bitDepth, 3, 26) = IntraPredAng8x8_26_nofilt_SSE_8bits<Sample>{ &buffer, 26 };
        for (int i = 27; i <= 34; ++i)
            table.lookup(0, bitDepth, 3, i) = IntraPredAng8x8_2to9_27to34_PosAng_SSE_8bits<Sample>{ &buffer, i };

        // 16x16
        table.lookup(1, bitDepth, 4, 0) = IntraPredPlanar16x16_SSE_8bits<Sample>{ &buffer, 0 };
        table.lookup(0, bitDepth, 4, 1) = IntraPredDc16x16_SSE_8bits<Sample>{ &buffer, 1 };
        table.lookup(1, bitDepth, 4, 1) = IntraPredDc16x16_SSE_8bits_nof<Sample>{ &buffer, 1 };
        for (int i = 2; i <= 9; ++i)
            table.lookup(0, bitDepth, 4, i) = IntraPredAng16x16_2to9_27to34_PosAng_SSE_8bits<Sample>{ &buffer, i };
        table.lookup(0, bitDepth, 4, 10) = IntraPredAng16x16_10_filt_SSE_8bits<Sample>{ &buffer, 10 };
        table.lookup(1, bitDepth, 4, 10) = IntraPredAng16x16_10_nofilt_SSE_8bits<Sample>{ &buffer, 10 };
        for (int i = 11; i <= 25; ++i)
            table.lookup(0, bitDepth, 4, i) = IntraPredAng16x16_11to25_NegAng_SSE_8bits<Sample>{ &buffer, i };
        table.lookup(0, bitDepth, 4, 26) = IntraPredAng16x16_26_filt_SSE_8bits<Sample>{ &buffer, 26 };
        table.lookup(1, bitDepth, 4, 26) = IntraPredAng16x16_26_nofilt_SSE_8bits<Sample>{ &buffer, 26 };
        for (int i = 27; i <= 34; ++i)
            table.lookup(0, bitDepth, 4, i) = IntraPredAng16x16_2to9_27to34_PosAng_SSE_8bits<Sample>{ &buffer, i };
        
        // 32x32
        table.lookup(1, bitDepth, 5, 0) = IntraPredPlanar32x32_SSE_8bits<Sample>{ &buffer, 0 };
        table.lookup(0, bitDepth, 5, 1) = IntraPredDc32x32_SSE_8bits<Sample>{ &buffer, 1 };
        table.lookup(1, bitDepth, 5, 1) = table.lookup(0, bitDepth, 5, 1);
        for (int i = 2; i <= 9; ++i)
            table.lookup(0, bitDepth, 5, i) = IntraPredAng32x32_2to9_PosAng_SSE_8bits<Sample>{ &buffer, i };
        table.lookup(0, bitDepth, 5, 10) = IntraPredAng32x32_10_nofilt_SSE_8bits<Sample>{ &buffer, 10 };
        table.lookup(1, bitDepth, 5, 10) = table.lookup(0, bitDepth, 5, 10);
        for (int i = 11; i <= 17; ++i)
             table.lookup(0, bitDepth, 5, i) = IntraPredAng32x32_11to17_NegAng_SSE_8bits<Sample>{ &buffer, i };
        for (int i = 18; i <= 25; ++i)
             table.lookup(0, bitDepth, 5, i) = IntraPredAng32x32_18to25_NegAng_SSE_8bits<Sample>{ &buffer, i };
        table.lookup(0, bitDepth, 5, 26) = IntraPredAng32x32_26_nofilt_SSE_8bits<Sample>{ &buffer, 26 };
        table.lookup(1, bitDepth, 5, 26) = table.lookup(0, bitDepth, 5, 26);
        for (int i = 27; i <= 34; ++i)
            table.lookup(0, bitDepth, 5, i) = IntraPredAng32x32_27to34_PosAng_SSE_8bits<Sample>{ &buffer, i };
    }

    for (int log2TrafoSize = 2; log2TrafoSize <= 5; ++log2TrafoSize)
    {
        auto functionPlanar = PredictPlanar::compile<Sample>(buffer, bitDepth, log2TrafoSize);
        if (functionPlanar)
            table.lookup(1, bitDepth, log2TrafoSize, 0) = functionPlanar;
        auto functionDc = PredictDc::compile<Sample>(buffer, bitDepth, log2TrafoSize, false);
        if (functionDc)
            table.lookup(1, bitDepth, log2TrafoSize, 1) = functionDc;
        auto function10 = PredictHoriz::compile<Sample>(buffer, bitDepth, log2TrafoSize, false);
        if (function10)
            table.lookup(1, bitDepth, log2TrafoSize, 10) = function10;
        auto function26 = PredictVert::compile<Sample>(buffer, bitDepth, log2TrafoSize, false);
        if (function26)
            table.lookup(1, bitDepth, log2TrafoSize, 26) = function26;
        for (int i = 2; i < 18; ++i)
        {
            auto function = PredictAngularFromLeft::compile<Sample>(buffer, bitDepth, log2TrafoSize, i);
            if (function)
                table.lookup(1, bitDepth, log2TrafoSize, i) = function;
        }
        for (int i = 18; i < 35; ++i)
        {
            auto function = PredictAngularFromAbove::compile<Sample>(buffer, bitDepth, log2TrafoSize, i);
            if (function)
                table.lookup(1, bitDepth, log2TrafoSize, i) = function;
        }
    }
    for (int log2TrafoSize = 2; log2TrafoSize <= 4; ++log2TrafoSize)
    {
        auto functionDc = PredictDc::compile<Sample>(buffer, bitDepth, log2TrafoSize, true);
        if (functionDc)
            table.lookup(0, bitDepth, log2TrafoSize, 1) = functionDc;
        auto function10 = PredictHoriz::compile<Sample>(buffer, bitDepth, log2TrafoSize, true);
        if (function10)
            table.lookup(0, bitDepth, log2TrafoSize, 10) = function10;
        auto function26 = PredictVert::compile<Sample>(buffer, bitDepth, log2TrafoSize, true);
        if (function26)
                table.lookup(0, bitDepth, log2TrafoSize, 26) = function26;
    }
}

template <int bitDepth, typename Sample>
void populate(Table<Sample> &table, havoc_code code)
{
    auto &buffer = *reinterpret_cast<Jit::Buffer *>(code.implementation);

    if ((buffer.isa & HAVOC_C_REF) || (buffer.isa & HAVOC_C_OPT))
        populateC<bitDepth>(table);

    populateAsm<bitDepth>(table, code);
}

template <typename Sample>
struct Populate;

template <>
struct Populate<uint16_t>
{
    static void populate(Table<uint16_t> &table, havoc_code code)
    {
        havoc::intra::populate<8>(table, code);
        havoc::intra::populate<9>(table, code);
        havoc::intra::populate<10>(table, code);
    }
};

template <>
struct Populate<uint8_t>
{
    static void populate(Table<uint8_t> &table, havoc_code code)
    {
        havoc::intra::populate<8>(table, code);
    }
};

template <typename Sample>
void Table<Sample>::populate(havoc_code code)
{
    this->~Table<Sample>();
    new (this) Table<Sample>{};

    Populate<Sample>::populate(*this, code);
}

template <typename Sample>
struct Bound
{
    Sample const *neighbours;
    int predModeIntra;
    int log2TrafoSize;
    int cIdx;
    Function<Sample> *function;
    Sample buffer[32 * 32 + 32];
    Sample *dst;
    int bitDepth;

    bool operator!=(Bound const &other) const
    {
        return this->function != other.function;
    }

    void print() const
    {
        const char *lookup[35] = { "planar", "DC", "ANGULAR2", "ANGULAR3", "ANGULAR4", "ANGULAR5", "ANGULAR6", "ANGULAR7", "ANGULAR8", "ANGULAR9", "ANGULAR10", "ANGULAR11", "ANGULAR12", "ANGULAR13", "ANGULAR14", "ANGULAR15", "ANGULAR16", "ANGULAR17", "ANGULAR18", "ANGULAR19", "ANGULAR20", "ANGULAR21", "ANGULAR22", "ANGULAR23", "ANGULAR24", "ANGULAR25", "ANGULAR26", "ANGULAR27", "ANGULAR28", "ANGULAR29", "ANGULAR30", "ANGULAR31", "ANGULAR32", "ANGULAR33", "ANGULAR34" };

        auto const nTbS = 1 << this->log2TrafoSize;
        std::cout << "\t" << 2 * sizeof(Sample) + 6 << "-bit " << nTbS << "x" << nTbS << " " << lookup[this->predModeIntra];
        if (this->cIdx == 0)
            std::cout << " edge";
    }

    int get(Table<Sample> &table)
    {
        auto *s = this;

        s->function = 0;

        // dst is aligned
        s->dst = reinterpret_cast<Sample *>(reinterpret_cast<intptr_t>(s->buffer + 31) >> 5 << 5);

        s->function = table.lookup(s->cIdx, s->bitDepth, s->log2TrafoSize, s->predModeIntra);
        memset(s->dst, 0, 32 * 32 * sizeof(Sample));

        return s->function ? 1 : 0;
    }

    void invoke(int iterations)
    {
        while (iterations--)
            this->function(this->dst, 32, this->neighbours, this->predModeIntra);
    }

    int mismatch(Bound &other)
    {
        auto const nTbS = 1 << this->log2TrafoSize;
        if (memcmp(this->dst, other.dst, 32 * sizeof(Sample) * nTbS))
            return 1;
        else
            return 0;
    }
};


template <typename Sample>
void test(int *error_count, havoc_instruction_set mask)
{
    havoc::Tester<Table<Sample>> tester{ mask };

    std::cout << "\nhavoc::intra::test<uint" << 8 * sizeof(Sample) << "_t> - Intra Prediction\n";

    Bound<Sample> b[2];

    HAVOC_ALIGN(32, Sample, neighbours[256]);
    b[0].neighbours = neighbours + 128;

    for (b[0].bitDepth = 8; b[0].bitDepth <= 2 * sizeof(Sample) + 6; ++b[0].bitDepth)
    {
        for (int x = 0; x < 256; x++)
            neighbours[x] = (rand() ^ x) & ((1 << b[0].bitDepth) - 1);

        for (b[0].log2TrafoSize = 2; b[0].log2TrafoSize <= 5; ++b[0].log2TrafoSize)
            for (b[0].predModeIntra = 0; b[0].predModeIntra < 35; ++b[0].predModeIntra)
            {
                b[0].cIdx = 1;
                b[1] = b[0];

                *error_count += tester.test(b, mask, 1000);

                if (b[0].log2TrafoSize <= 4 && (b[0].predModeIntra == 1 || b[0].predModeIntra == 10 || b[0].predModeIntra == 26))
                {
                    b[0].cIdx = 0;
                    b[1] = b[0];
                    *error_count += tester.test(b, mask, 1000);
                }
            }
    }
}

}}

template void havoc::intra::Table<uint16_t>::populate(havoc_code code);
template void havoc::intra::Table<uint8_t>::populate(havoc_code code);
template void havoc::intra::test<uint16_t>(int *error_count, havoc_instruction_set mask);
template void havoc::intra::test<uint8_t>(int *error_count, havoc_instruction_set mask);
